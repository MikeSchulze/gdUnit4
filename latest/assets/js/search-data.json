{"0": {
    "doc": "About",
    "title": "About",
    "content": " ",
    "url": "/gdUnit4/latest/doc/about.html",
    
    "relUrl": "/doc/about.html"
  },"1": {
    "doc": "About",
    "title": "GdUnit4 v6.0.0",
    "content": "Advice GdUnit4 v6.0.0 requires at least Godot 4.5! Compatiblility Overview build on (v4.5.stable.mono.official [876b29033]) . ",
    "url": "/gdUnit4/latest/#gdunit4-v600",
    
    "relUrl": "/#gdunit4-v600"
  },"2": {
    "doc": "About",
    "title": "What is GdUnit4?",
    "content": "Gd(Godot)Unit(Unit Testing)4(Godot 4.x) . GdUnit4 is an embedded unit testing framework designed for testing Gd scripts, C# scripts, and scenes in the Godot editor. With GdUnit4, you can easily create and run unit tests to verify the functionality and performance of your code, ensuring that it meets your requirements and specifications. GdUnit4 is a powerful tool that supports Test-Driven Development (TDD), a popular software development approach that emphasizes creating automated tests before writing any code. By using GdUnit4 for TDD, you can ensure that your code is thoroughly tested and free of bugs, which can save you time and effort in the long run. ",
    "url": "/gdUnit4/latest/#what-is-gdunit4",
    
    "relUrl": "/#what-is-gdunit4"
  },"3": {
    "doc": "About",
    "title": "Features",
    "content": "Core Testing Features . | Support for GDScript and C# Write and execute tests in both GDScript and C# | Embedded Test Inspector Navigate your test suites directly within the Godot editor | Test Discovery Automatically searches for tests at runtime and adds them to the inspector | Convenient Interface Run test-suites directly from Godot using the context menu (FileSystem panel, ScriptEditor, or GdUnit Inspector) | Create Tests from Editor Right-click on any function in the ScriptEditor and select “Create TestCase” to generate tests automatically | . Test Writing &amp; Assertions . | Fluent Syntax Write test cases with an easy-to-read, fluent interface | Wide Range of Assertions Comprehensive assertion methods for verifying behavior and output | Argument Matchers Verify function calls with expected arguments | Unicode Text Support Full support for unicode characters in test strings and assertions | Variadic Arguments Support Test functions that accept variable numbers of arguments | . Advanced Testing Capabilities . | Test Fuzzing Generate random inputs to test edge cases and boundary conditions | Parameterized Tests Test functions with multiple sets of inputs and expected outputs | Test Session Hooks Set up and tear down test resources at the session level for efficient test management | Mocking &amp; Spying . | Mock classes to simulate behavior and define output for specific functions | Spy on functions to verify they were called with expected parameters | Mock or spy on scenes to simulate behavior and verify function calls | . | Scene Runner Simulate different kinds of inputs and actions: . | Mouse clicks and movements | Keyboard inputs | Touch screen interactions | Custom input actions | Wait for specific signals or function return values | . | Flaky Test Handling Detect and handle flaky tests by rerunning failed tests Configure retry count and mark non-deterministic failures in test results | Configurable Templates Customize templates for generating new test-suites | . Continuous Integration Support . | Command Line Tool Run tests outside the Godot editor for CI/CD pipelines | HTML Report Generation Generate comprehensive HTML test reports | JUnit XML Report Export test results in JUnit XML format for CI integration | GitHub Action Integration Public marketplace action for integrating GdUnit4 into your CI workflow gdunit4-action | . GdUnit4Net - C# Support . | C# API - gdUnit4.api Full support for writing tests in C# | VSTest Integration - gdunit4.test.adapter Run and debug tests in: . | Visual Studio | Visual Studio Code | JetBrains Rider | . | . ",
    "url": "/gdUnit4/latest/#features",
    
    "relUrl": "/#features"
  },"4": {
    "doc": "About",
    "title": "You are welcome to",
    "content": ". | Give Feedback on the gdUnit GitHub Discussions page. | Suggest Improvements by creating a new feature request issue on the gdUnit GitHub Issues page. | Report Bugs by creating a new bug report issue on the gdUnit GitHub Issues page. | . ",
    "url": "/gdUnit4/latest/#you-are-welcome-to",
    
    "relUrl": "/#you-are-welcome-to"
  },"5": {
    "doc": "About",
    "title": "About",
    "content": " ",
    "url": "/gdUnit4/latest/",
    
    "relUrl": "/"
  },"6": {
    "doc": "Getting Started",
    "title": "Getting Started with GDScript Tests",
    "content": " ",
    "url": "/gdUnit4/latest/first_steps/getting-started/#getting-started-with-gdscript-tests",
    
    "relUrl": "/first_steps/getting-started/#getting-started-with-gdscript-tests"
  },"7": {
    "doc": "Getting Started",
    "title": "Before You Start",
    "content": "Create a new folder called first_steps in your project’s root directory and copy the following class into it. It should be located at res://first_steps/test_person.gd. | test_person.gd | . | class_name TestPerson extends Node var _first_name :String var _last_name :String func _init(first_name :String, last_name :String): _first_name = first_name _last_name = last_name func full_name() -&gt; String: return _first_name + \" \" + _last_name . | . ",
    "url": "/gdUnit4/latest/first_steps/getting-started/#before-you-start",
    
    "relUrl": "/first_steps/getting-started/#before-you-start"
  },"8": {
    "doc": "Getting Started",
    "title": "Creating a Test",
    "content": "To create a test in GdUnit4, you can use the built-in “Create Test” function. Follow these steps: . | Open the script that you want to test. | Right-click on the function that you want to create a test for. | Click on “Create Test” from the context menu. | . We have selected the full_name function to generate a test for it. The test has been automatically created using the built-in Create Test function. Congratulations, you have now created your first test! More detailed information about naming conventions and the definition of test cases can be found here . The generated test case should look like this: . ",
    "url": "/gdUnit4/latest/first_steps/getting-started/#creating-a-test",
    
    "relUrl": "/first_steps/getting-started/#creating-a-test"
  },"9": {
    "doc": "Getting Started",
    "title": "Execute Your Test",
    "content": "After creating your first test, you can execute it by selecting it in the editor with the right mouse click and then opening the context menu to click on Run Tests or Debug Tests. The test run is visualized in the GdUnit4 inspector, allowing you to inspect the test results. As you can see, your first test has resulted in a failure: “Test not implemented!” This is because a generated test first fails with this message since the assertion assert_not_yet_implemented() is used in the test by default. The failure report message are: . line 13: Test not implemented! . You can double-click on the failed test to jump directly to the test failure. ",
    "url": "/gdUnit4/latest/first_steps/getting-started/#execute-your-test",
    
    "relUrl": "/first_steps/getting-started/#execute-your-test"
  },"10": {
    "doc": "Getting Started",
    "title": "Complete Your First Test",
    "content": "To complete your test, you must specify what you want to test by using assertions. GdUnit provides a large number of assert functions to compare an actual value with an expected value. In this case, we did a test for the function full_name() which has a return type of String. To verify the return value of the function, we can use the assert_str() function and replace the assert_not_yet_implemented() in our test with it: . | Using resource path | Using class name | . | func test_full_name() -&gt; void: var person = load(\"res://first_steps/test_person.gd\").new(\"King\", \"Arthur\") assert_str(person.full_name()).is_equal(\"King Arthur\") . | func test_full_name() -&gt; void: var person := TestPerson.new(\"King\", \"Arthur\") assert_str(person.full_name()).is_equal(\"King Arthur\") . | . Now, run the test again by pressing the ReRun Debug button in the inspector. For more details about the inspector buttons, see Button Bar . The test failure is fixed but now we get a warning! . The warning message “Detected &lt;1&gt; orphan nodes during test execution” indicates that we have forgotten to release an object. It means that we still have to release the used object (in this case, TestPerson) after the test to avoid memory leaks. To release objects manually, we can use the free() function of the object. Another way is to use the included auto_free tool, which automatically releases all allocated objects at the end of a test. | free() | auto_free() | . | func test_full_name() -&gt; void: var person := TestPerson.new(\"King\", \"Arthur\") assert_str(person.full_name()).is_equal(\"King Arthur\") person.free() . | func test_full_name() -&gt; void: var person :TestPerson = auto_free(TestPerson.new(\"King\", \"Arthur\")) assert_str(person.full_name()).is_equal(\"King Arthur\") . | . GdUnit offers a wide range of Asserts for all basic built-in types and much more. A collection of tests is called a Test Suite in GdUnit. You can find more details about creating Test Setup/Teardown. Now, run your test again and it should complete successfully. ",
    "url": "/gdUnit4/latest/first_steps/getting-started/#complete-your-first-test",
    
    "relUrl": "/first_steps/getting-started/#complete-your-first-test"
  },"11": {
    "doc": "Getting Started",
    "title": "Congratulations on successfully writing your first test!",
    "content": " ",
    "url": "/gdUnit4/latest/first_steps/getting-started/",
    
    "relUrl": "/first_steps/getting-started/"
  },"12": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": " ",
    "url": "/gdUnit4/latest/first_steps/getting-started/",
    
    "relUrl": "/first_steps/getting-started/"
  },"13": {
    "doc": "Installation",
    "title": "Installation",
    "content": "GdUnit4 is a Godot plugin that needs to be installed before it can be used. To install GdUnit4, you can either use the AssetLib within the Godot application or manually download the latest build from the GdUnit4 GitHub repository and install it yourself. ",
    "url": "/gdUnit4/latest/first_steps/install/",
    
    "relUrl": "/first_steps/install/"
  },"14": {
    "doc": "Installation",
    "title": "Installing GdUnit4 from the AssetLib",
    "content": "To install GdUnit4 from the AssetLib, please follow these steps: . | Open the AssetLib from the top menu bar in the Godot application. | In the search bar, enter “GdUnit4”. | Select the GdUnit4 plugin from the search results. | Click on the “Download” button to download and install the plugin. | Accept the files and press install. | Activate the plugin follow this steps | . Advice It is recommended to restart the Godot Editor after the plugin installation. Godot has an issue with the project cache when installing plugins, for more details see here ",
    "url": "/gdUnit4/latest/first_steps/install/#installing-gdunit4-from-the-assetlib",
    
    "relUrl": "/first_steps/install/#installing-gdunit4-from-the-assetlib"
  },"15": {
    "doc": "Installation",
    "title": "Install the Latest Build from GitHub",
    "content": "Please note that if you install this version, you will be working with a version that has not been officially released yet. The master branch contains the latest development state, and this version may contain bug fixes that have not yet been officially released. To install the latest build from GitHub, follow these steps: . Advice Note that installing GdUnit4 from GitHub requires some technical knowledge and is recommended for advanced users. If you encounter any issues during the installation process, please refer to the GdUnit4 documentation or open an issue on the GitHub repository. To install the latest build from GitHub, follow these steps: . | Download the latest build from GitHub here. | Disable the current GdUnit4 plugin if you have it installed. | Delete the addons/gdunit4 folder. | Extract the downloaded package to the addons folder. | . ",
    "url": "/gdUnit4/latest/first_steps/install/#install-the-latest-build-from-github",
    
    "relUrl": "/first_steps/install/#install-the-latest-build-from-github"
  },"16": {
    "doc": "Installation",
    "title": "Activating the Plugin",
    "content": "To activate the GdUnit4 plugin, follow these steps: . | Open your project settings by navigating to Project -&gt; Project Settings. | Click on the Plugins tab and find GdUnit4 in the list of plugins and click the checkbox to activate it. | Once activated, the GdUnit4 inspector will be displayed in the top left corner of the Godot Editor. | . Make sure to save your project settings after activating the plugin. Advice It is recommended to restart the Godot Editor after the plugin installation. Godot has an issue with the project cache when installing plugins, for more details see here ",
    "url": "/gdUnit4/latest/first_steps/install/#activating-the-plugin",
    
    "relUrl": "/first_steps/install/#activating-the-plugin"
  },"17": {
    "doc": "Installation",
    "title": "GdUnit4 Inspector",
    "content": "After successfully installing and activating the GdUnit4 plugin, you will find the GdUnit4 inspector in the upper left corner of the Godot editor. | For detailed information about the inspector, please refer to the GdUnit Inspector | . ",
    "url": "/gdUnit4/latest/first_steps/install/#gdunit4-inspector",
    
    "relUrl": "/first_steps/install/#gdunit4-inspector"
  },"18": {
    "doc": "Run Tests",
    "title": "How to Run Test",
    "content": "Running tests in GdUnit is a straightforward process, and you have several options to choose from: . ",
    "url": "/gdUnit4/latest/first_steps/run-tests/#how-to-run-test",
    
    "relUrl": "/first_steps/run-tests/#how-to-run-test"
  },"19": {
    "doc": "Run Tests",
    "title": "Using the GdUnit Inspector",
    "content": "The GdUnit Inspector provides various options to run single unit tests or sets of testsuites: . | Using the Button Bar: You can use the buttons available in the GdUnit Inspector’s to run tests. Refer to the Using the Button Bar section for more details. | Using the Inspector Tree: The Inspector Tree allows you to run tests from a hierarchical view. Explore the Using the Inspector Tree section for instructions on running tests using this approach. | Using the Run Overall Button: The Run Overall button enables you to run all tests at once. Find more information in the Using the Run Overall Button section. | . ",
    "url": "/gdUnit4/latest/first_steps/run-tests/#using-the-gdunit-inspector",
    
    "relUrl": "/first_steps/run-tests/#using-the-gdunit-inspector"
  },"20": {
    "doc": "Run Tests",
    "title": "Using the Editor Context Menu",
    "content": "The Editor Context Menu provides options to run or debug individual test cases or entire testsuites: . | Using the Context Menu: You can right-click on a specific test case or testsuite in the editor and select the appropriate option from the context menu. | . For detailed steps, refer to the Using the Context Menu section. ",
    "url": "/gdUnit4/latest/first_steps/run-tests/#using-the-editor-context-menu",
    
    "relUrl": "/first_steps/run-tests/#using-the-editor-context-menu"
  },"21": {
    "doc": "Run Tests",
    "title": "Using the FileSystem Context Menu",
    "content": "The FileSystem Context Menu allows you to run or debug individual testsuites or sets of testsuites by selecting the desired testsuite or folder: . These options provide flexibility in running tests based on your preferences and requirements. ",
    "url": "/gdUnit4/latest/first_steps/run-tests/#using-the-filesystem-context-menu",
    
    "relUrl": "/first_steps/run-tests/#using-the-filesystem-context-menu"
  },"22": {
    "doc": "Run Tests",
    "title": "The GdUnit Test Inspector/Explorer",
    "content": "Definition . The GdUnit inspector provides an overview of the currently executed tests and allows you to navigate them. It allows you to select individual tests and view possible test failures. The integrated status and info bar gives you a quick overview of the last test run. | (1) Button Bar | (2) Status Bar | (3) Test Run Overview | (4) Failure Report | (5) Info Bar | . Button Bar . The button bar contains several buttons that allow you to perform different actions in GdUnit: . | Button | Description | . | (1) | Opens the GdUnit documentation page in your browser | . | (2) | Opens the GdUnit settings window | . | (3) | Run Overall tests | . | (4) | (Re)Run the tests in runtime mode | . | (5) | (Re)Run the tests in debug mode | . | (6) | Stops the current test run | . | (7) | Displays the version of GdUnit | . Note that the keyboard shortcuts for these buttons may vary depending on your specific GdUnit configuration. Advice When running tests in GdUnit, it is recommended to first run them in debug mode (4) in order to get the line number where the failure occurred in the test report. This is because Godot does not provide stack trace information when running in runtime mode (3), which can result in the failure line not being displayed in the report. The Run Overall Button . The Run Overall button provides a convenient way to execute all the tests in your project at once, instead of running them one by one or selecting a custom set of tests. By clicking the “Run Overall” button, you can initiate the execution of all the tests in your project, saving you time and effort. To enable the Run Overall button in GdUnit4, you need to adjust the UI settings. Once you have enabled the Run Overall button, it should be visible in the inspector. Status Bar . This area gives you information about the current/last test execution, such as the progress and errors/failures found. With the arrow buttons, you can navigate back and forth over found failures. | Marker | Description | . | (0) | Test execution progress (indicator of test run) | . | (1) | Number of errors (parse/runtime errors) | . | (2) | Number of failures | . | (3) | Number of flaky tests | . | (4) | Number of skipped tests | . | (5) | Discover and run all tests | . | (6) | Change sort tree mode (asc/desc/time) | . | (7) | Change the test tree presentation (tree/flat) | . | Sorting Options . The sorting option controls how the test results are displayed in the inspector tree. You can sort the results by: . | Unsorted: The natural order. | Name Ascending: Sorts the test cases alphabetically from A to Z. | Name Descending: Sorts the test cases alphabetically from Z to A. | Test Execution Time: Sorts the test cases based on the time they took to execute, from longest to shortest. | . | Tree Presentation . The tree presentation setting allows you to switch between two views: . | Flat View: Displays all test cases in a single, flat list without any hierarchical structure. | Tree View: Displays test cases in a hierarchical structure, reflecting the path of your test files and suites. | . | . Advice Whats the difference between errors and failures? GdUnit distinguishes between errors and failures. An error is a hard failure such as a test abort or timeout, while a failure is a test error caused by a failed assertion. Test Run Overview Tree . This area provides an overview of all executed/executing tests and their execution status in real-time. Here, you can navigate through the tests and view the report for each individual test by selecting it. You can also run the currently selected test or test suite again by right-clicking to open a context menu. Advice Double-clicking on a test in the test run overview allows you to jump directly to the test or test error if a failure line was reported in Debug Mode (4). Failure Report . This area displays the failure report of the currently selected failed test. GdUnit generates the failure report based on the used assert, according to the scheme expected vs current value. Info Bar . This section provides you with information about the total duration of the test execution and any orphaned nodes found. | Time The time taken to execute all tests. | Orphans The number of nodes that were not cleaned up after the execution of the tests. Orphaned nodes can cause memory leaks, and it’s essential to clean them | up after the execution of the tests. | . Advice It's recommended to always check for orphaned nodes after the execution of tests to ensure there are no memory leaks in your game/application. ",
    "url": "/gdUnit4/latest/first_steps/run-tests/#the-gdunit-test-inspectorexplorer",
    
    "relUrl": "/first_steps/run-tests/#the-gdunit-test-inspectorexplorer"
  },"23": {
    "doc": "Run Tests",
    "title": "Run Tests",
    "content": " ",
    "url": "/gdUnit4/latest/first_steps/run-tests/",
    
    "relUrl": "/first_steps/run-tests/"
  },"24": {
    "doc": "Settings",
    "title": "Settings",
    "content": "GdUnit4 provides several customizable settings to meet your testing needs. To access these settings, simply press the ‘tools’ button located in the GdUnit inspector. ",
    "url": "/gdUnit4/latest/first_steps/settings/",
    
    "relUrl": "/first_steps/settings/"
  },"25": {
    "doc": "Settings",
    "title": "Common Settings",
    "content": ". | Common . | Server Connection Timeout The server connection timeout determines the maximum wait time in minutes for the test runner client when communication between the editor and runner is interrupted. | Update Notification Enabled This option enables or disables the GdUnit update notification. If enabled, a notification will appear when starting Godot to inform you about new updates available for installation. | . | Test . | Flaky Test With this setting, you can activate or deactivate the detection of faulty tests and automatically run the test again if it fails. | Flaky Max Retries This setting is used to configure the number of retries that a test should perform if it fails. | Test Discovery This setting configures the auto-discovery of tests. If enabled, it will scan the configured Test Root Folder for available tests at startup. | Test Root Folder This setting defines the root folder where automated tests will be generated. By default, tests are usually located parallel to the source code in a folder named ‘test’. However, you can customize this location by specifying a different folder path. The default root folder is test. res://project/src/folder_a/folder_b/my_class.gd res://project/test/folder_a/folder_b/my_class_test.gd . | Test Suite Naming Nonvention Configures how to generate the test-suite file name. | AUTO_DETECT - generates the file name by source file naming convention. | SNAKE_CASE - generates the file name in snake case convention. | PASCAL_CASE - generates the file name in pascal case convention. | . | Test Timeout Seconds This setting configures the default timeout for a test case in seconds. If a test case runs longer than the specified timeout, the test will be interrupted and fail. You can override the default timeout on a per-test-case basis by specifying a different timeout using the timeout argument. | . | . | GdScript | C# | . | # Configures the test case to fail after a maximum of 2 seconds runtime func test_foo(timeout = 2000) -&gt; void: ... | // Configures the test case to fail after a maximum of 2 seconds runtime [TestCase(Timeout = 2000)] public async Task foo() { } . | . ",
    "url": "/gdUnit4/latest/first_steps/settings/#common-settings",
    
    "relUrl": "/first_steps/settings/#common-settings"
  },"26": {
    "doc": "Settings",
    "title": "Hooks Settings",
    "content": "Configure test session hooks and reporting mechanisms for automated test lifecycle management. Overview . Test session hooks execute custom logic at the beginning and end of test sessions, enabling: . | Automated test environment setup and teardown | Custom test report generation in various formats | Integration with external systems and CI/CD pipelines | Resource management across multiple test suites | . Built-in System Hooks . GdUnit4 includes two pre-installed system hooks that provide essential reporting functionality: . | GdUnitHtmlTestReporter SYSTEM Generates interactive HTML test reports with detailed results, execution times, and statistics. Reports include collapsible sections and visual charts for easy analysis. | GdUnitXMLTestReporter SYSTEM Produces JUnit-compatible XML reports for CI/CD integration. Compatible with Jenkins, GitLab CI, GitHub Actions, and other continuous integration tools. | . Hook Management Controls . | Control | Function | Description | . | ☑️ Checkbox | Enable/Disable | Toggle hook activation without removing it from the list | . | ⬆️ Up Arrow | Increase Priority | Move hook higher in execution order (executes earlier) | . | ⬇️ Down Arrow | Decrease Priority | Move hook lower in execution order (executes later) | . | ➕ Add | Register Hook | Add a new custom hook to the system | . | 🗑️ Remove | Delete Hook | Remove custom hooks (system hooks cannot be deleted) | . Execution Order . Hooks execute in the priority order shown in the list: . | Startup Phase: Hooks initialize in top-to-bottom order before tests begin | Test Execution: All test suites run if startup succeeds | Shutdown Phase: Hooks cleanup in reverse order after tests complete | . Configuration Notes . | System hooks are marked with a SYSTEM tag and cannot be removed | Custom hooks can be added, removed, and reordered as needed | Disabled hooks remain in the list but don’t execute during test sessions | Hook failures during startup prevent test execution and display errors in the console | Priority changes take effect immediately for the next test session | . Status Information . The text field at the bottom displays contextual information about the selected hook, including its description and current configuration status. For system hooks, it shows “The Html test reporting hook” or “The XML test reporting hook” respectively. ",
    "url": "/gdUnit4/latest/first_steps/settings/#hooks-settings",
    
    "relUrl": "/first_steps/settings/#hooks-settings"
  },"27": {
    "doc": "Settings",
    "title": "UI Settings",
    "content": ". | Inspector . | Node Collapse By default, the testsuite node in the Inspector is collapsed after a successful test run. This option controls whether the testsuite node remains collapsed or expanded. | Tree Sort Mode This setting controls the tree sorting by name in ascending or descending order, or by test execution time. | Tree View Mode This setting controls whether the inspector tree is presented as a flat view or a tree view. | . | ToolBar . | Run Overall This setting controls the visibility of the ‘run overall’ button in the inspector tool bar. By default, the button is hidden, but you can show or hide it as desired. | . | . ",
    "url": "/gdUnit4/latest/first_steps/settings/#ui-settings",
    
    "relUrl": "/first_steps/settings/#ui-settings"
  },"28": {
    "doc": "Settings",
    "title": "Shortcuts Settings",
    "content": ". | Editor This section allows you to customize the keyboard shortcuts for the script editor in Godot. You can customize the shortcuts for various actions such as create test, run test, and debug test. | Filesystem In this section, you can customize the keyboard shortcuts for the filesystem inspector in Godot. You can customize shortcuts for various actions, such as running tests and debugging tests. | Inspector In this section, you can customize the keyboard shortcuts for the GdUnit inspector in Godot. You can customize shortcuts for various actions, such as running tests, debugging tests, running overall tests, and stopping the current test run. | . ",
    "url": "/gdUnit4/latest/first_steps/settings/#shortcuts-settings",
    
    "relUrl": "/first_steps/settings/#shortcuts-settings"
  },"29": {
    "doc": "Settings",
    "title": "Report Settings",
    "content": ". | Asserts . | Strict Number Type Compare This setting controls how numbers are compared in GdUnit. By default, GdUnit performs a type-safe comparison and will always fail if you compare an integer with a floating-point number, even if they have the same value. To allow equal values, such as 0 and 0.0, you can turn off this configuration. | Verbose Errors This setting suppresses internal error reporting for failed assert conditions in GdUnit. When an assert condition fails, GdUnit normally generates an error message to indicate the failure. By enabling this setting, you can suppress these error messages, which can be useful in certain testing scenarios where error reporting is not necessary or desired. | Verbose Warnings This setting suppresses internal warning reporting for failed assert conditions in GdUnit. When an assert condition fails, GdUnit normally generates a warning message to indicate the failure. By enabling this setting, you can suppress these warning messages, which can be useful in certain testing scenarios where warning reporting is not necessary or desired. | . | Godot . | Push Error This setting reports Godot push_error() notifications in GdUnit and causes the test to fail (by default, this setting is disabled). When Godot encounters an error condition, it can generate a push_error() notification to indicate the error. By enabling this setting, you can capture these notifications in GdUnit and cause the associated test to fail. This can be useful in certain testing scenarios where error reporting is critical. | Script Error This setting reports Godot gdscript errors in GdUnit and causes the associated test to fail. When Godot encounters an error in a gdscript file, such as a syntax error or a runtime error, GdUnit can capture the error and cause the associated test to fail. By enabling this setting, you can ensure that errors in gdscript files are detected and reported in your tests. | . | Common . | Verbose Orphans This setting enables or disables orphan node reporting in GdUnit. When this setting is enabled, GdUnit will report any nodes in your project that are not referenced by any other nodes or resources. These orphan nodes can indicate unused or unnecessary content in your project, which can be helpful in optimizing your project. By disabling this setting, you can suppress the reporting of orphan nodes, which can be useful in certain testing scenarios where orphan node reporting is not necessary or desired. | . | . ",
    "url": "/gdUnit4/latest/first_steps/settings/#report-settings",
    
    "relUrl": "/first_steps/settings/#report-settings"
  },"30": {
    "doc": "Settings",
    "title": "Templates Settings",
    "content": "When creating a new test-case in GdUnit, you can use this template to generate your test-suite. To do this, simply right-click on the desired function you want to test and select ‘Create Test’ from the context menu. This will generate a new test-case using the default template, which you can customize to suit your testing needs. To personalize your test-suite template in GdUnit, you can use the provided tags to modify it according to your needs. These tags allow you to add custom placeholders and data fields to your test-suite, making them more informative and easier to manage. To view a list of all the supported tags, simply click on the Supported Tags button in the template page. ",
    "url": "/gdUnit4/latest/first_steps/settings/#templates-settings",
    
    "relUrl": "/first_steps/settings/#templates-settings"
  },"31": {
    "doc": "Settings",
    "title": "Updates",
    "content": "The Updates section provides automatic update management for GdUnit4 by monitoring the GitHub repository for new releases. | Update Notification When a new version of GdUnit4 is available on GitHub, the Updates tab will display a yellow bell icon to notify you of the available update. This visual indicator makes it easy to spot when updates are ready for installation. The update notification is enabled by default but can be manually disabled in the Common settings section if you prefer not to receive update notifications. | Release Notes The Updates section displays the complete release notes for the new version, allowing you to review what changes, bug fixes, and new features are included before deciding to update. This helps you understand what improvements or potential breaking changes the update may introduce. | Update Installation To install the new version, simply click the Update button. The update process will: . | Download the latest version from the GitHub repository | Replace the currently installed GdUnit4 plugin with the new version | Automatically restart Godot after the installation is complete | . | Technical Details The update system works by checking the GitHub releases API for new versions during Godot startup. When a newer version is detected compared to your currently installed version, the notification system activates and the update becomes available for installation. | . ",
    "url": "/gdUnit4/latest/first_steps/settings/#updates",
    
    "relUrl": "/first_steps/settings/#updates"
  },"32": {
    "doc": "Setup/Installation",
    "title": "GdUnit4 C# Test Setup",
    "content": "How GdUnit4 Integrates C# Test Support . GdUnit4 integrates C# testing capabilities through the GdUnit4Net project. This integration works by loading the necessary dependencies and utilizing the GdUnit4Net test engine to discover and execute C# tests directly within the Godot editor environment. The complete list of features and capabilities provided by the C# testing integration can be found on the GdUnit4Net GitHub page. 💡 Recommended Approach: For optimal C# testing experience, use dedicated IDEs like JetBrains Rider, Visual Studio, or Visual Studio Code instead of the Godot editor. ⚠️ Debugging Limitation: Debugging C# tests inside the Godot editor is not supported. Use external IDEs for debugging capabilities. Framework Support . With gdUnit4Net version 5.0.0, we fully support .net8, .net9 and LangVersion 12. This ensures compatibility and access to the enhanced features and capabilities provided by GdUnit4Net’s C# testing functionality. Before diving into gdUnit4 C# testing API, make sure your project is configured appropriately. Follow the steps outlined in the Official Godot documentary . GdUnit4 utilizes the C# language standard 12.0. To ensure seamless integration, adjust your project settings accordingly: . | Setup your Project . GdUnit4Net C# API supports the frameworks net8.0 and net9.0 to support the latest language standard Open you project file (*.csproj), and check you have added the gdunit4 dependencies. The gdUnit4.api should be used with version 5.1.0-rc1 to be best fit to Godot 4.5. &lt;!-- gdUnit4 package dependencies --&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"18.0.0\"/&gt; &lt;PackageReference Include=\"gdUnit4.api\" Version=\"5.1.0-rc1\"/&gt; &lt;PackageReference Include=\"gdUnit4.test.adapter\" Version=\"3.0.0\"/&gt; &lt;PackageReference Include=\"gdUnit4.analyzers\" Version=\"1.0.0\"&gt; &lt;PrivateAssets&gt;none&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; . Check for the latest available version on nuget.org . | gdUnit4.analyzer | gdUnit4.api | gdUnit4.test.adapter | . | Ensure the dotnet 8 or 9 SDK is installed. dotnet --list-sdks 8.0.201 [C:\\Program Files\\dotnet\\sdk] 9.0.100 [C:\\Program Files\\dotnet\\sdk] . If no sdk 8.0 or 9.0 installed, you can download it here If you encounter issues with older SDKs, consider uninstalling them. Here is a complete example of what your project should look like. &lt;Project Sdk=\"Godot.NET.Sdk/4.5\"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt; &lt;LangVersion&gt;13.0&lt;/LangVersion&gt; &lt;!--Force nullable warnings, you can disable if you want--&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;CopyLocalLockFileAssemblies&gt;true&lt;/CopyLocalLockFileAssemblies&gt; &lt;!--Disable warning of invalid/incompatible GodotSharp version--&gt; &lt;NoWarn&gt;NU1605&lt;/NoWarn&gt; &lt;/PropertyGroup&gt; &lt;!-- gdUnit4 package dependencies --&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"18.0.0\"/&gt; &lt;PackageReference Include=\"gdUnit4.api\" Version=\"5.1.0-rc1\"/&gt; &lt;PackageReference Include=\"gdUnit4.test.adapter\" Version=\"3.0.0\"/&gt; &lt;PackageReference Include=\"gdUnit4.analyzers\" Version=\"1.0.0\"&gt; &lt;PrivateAssets&gt;none&lt;/PrivateAssets&gt; &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt; &lt;/PackageReference&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; . | . ",
    "url": "/gdUnit4/latest/csharp_project_setup/csharp-setup/#gdunit4-c-test-setup",
    
    "relUrl": "/csharp_project_setup/csharp-setup/#gdunit4-c-test-setup"
  },"33": {
    "doc": "Setup/Installation",
    "title": "The GdUnit4 Godot Editor C# Support",
    "content": "GdUnit4 supports with GdUnit4Net v5.0.0 to write and run tests inside the Godot editor. For support Visual Studio, Visual Studio Code and JetBrains Rider check out here. ",
    "url": "/gdUnit4/latest/csharp_project_setup/csharp-setup/#the-gdunit4-godot-editor-c-support",
    
    "relUrl": "/csharp_project_setup/csharp-setup/#the-gdunit4-godot-editor-c-support"
  },"34": {
    "doc": "Setup/Installation",
    "title": "Test your C# build settings in the Godot Editor",
    "content": "Open the MSBuild inspector at the bottom of the Godot editor and press Rebuild Solution. The output should indicate that the project is built successfully. Running C# Tests inside the Godot Editor . How to run test . ",
    "url": "/gdUnit4/latest/csharp_project_setup/csharp-setup/#test-your-c-build-settings-in-the-godot-editor",
    
    "relUrl": "/csharp_project_setup/csharp-setup/#test-your-c-build-settings-in-the-godot-editor"
  },"35": {
    "doc": "Setup/Installation",
    "title": "Using External C# Editor",
    "content": "Open your Godot editor settings, and navigate to dotnet and select your preferred C# tool. ",
    "url": "/gdUnit4/latest/csharp_project_setup/csharp-setup/#using-external-c-editor",
    
    "relUrl": "/csharp_project_setup/csharp-setup/#using-external-c-editor"
  },"36": {
    "doc": "Setup/Installation",
    "title": "Setup/Installation",
    "content": " ",
    "url": "/gdUnit4/latest/csharp_project_setup/csharp-setup/",
    
    "relUrl": "/csharp_project_setup/csharp-setup/"
  },"37": {
    "doc": "Configure Your IDE",
    "title": "How GdUnit4Net Achieves IDE Support",
    "content": "GdUnit4Net leverages the industry-standard (VSTest) API to provide comprehensive IDE integration. By implementing the VSTest adapter interface, GdUnit4Net allows IDEs that support the Visual Studio Test Platform to: . | Discover tests automatically in your Godot C# projects | Execute tests with real-time feedback and reporting | Debug tests with full breakpoint and variable inspection support | Filter and organize test runs based on various criteria | Generate detailed reports in multiple formats | . This approach ensures a consistent testing experience across different IDEs while maintaining full compatibility with existing .NET testing workflows. The project repository can be found here gdunit4.test.adapter. ",
    "url": "/gdUnit4/latest/csharp_project_setup/vstest-adapter/#how-gdunit4net-achieves-ide-support",
    
    "relUrl": "/csharp_project_setup/vstest-adapter/#how-gdunit4net-achieves-ide-support"
  },"38": {
    "doc": "Configure Your IDE",
    "title": "Preconditions",
    "content": "Before configuring your IDE, ensure you have completed the following setup requirements: . Supported IDE’s . | IDE | Test Discovery | Test Run | Test Debug | Jump to Failure | Solution test config file | Test Filter | Parallel Test Execution | . | Visual Studio | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ❌ | . | Visual Studio Code | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ❌ | . | JetBrains Rider version 2024.2 | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ❌ | . ✅ - supported ☑️ - supported by a workaround (link) ❌ - not supported 🔜 - not yet implemented . 1. Project Configuration . Your Godot C# project must be properly configured with GdUnit4Net dependencies as described in the Setup Documentation. This includes: . | Correct .NET framework targeting (net8.0 or net9.0) | Required NuGet package references (gdUnit4.api, gdUnit4.test.adapter, etc.) | Proper project file structure | . 2. Environment Variable Setup . You must configure the GODOT_BIN environment variable pointing to your Godot executable. | Platform | Environment Variable | Example Path | . | Windows | %GODOT_BIN% | d:\\development\\Godot_v4.4.1-stable_mono_win64\\Godot_v4.4.1-stable_mono_win64.exe | . | Linux/Unix/Mac | $GODOT_BIN | /Users/MisterX/Documents/develop/GodotMono.app/Contents/MacOS/Godot | . Or define it in the .runsettings under EnvironmentVariables see below. 3. RunSettings Configuration . Create a .runsettings file in your project to configure test execution. The full guide to configure the settings can be found here. Below is an example: . &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;RunSettings&gt; &lt;RunConfiguration&gt; &lt;MaxCpuCount&gt;1&lt;/MaxCpuCount&gt; &lt;ResultsDirectory&gt;./TestResults&lt;/ResultsDirectory&gt; &lt;TargetFrameworks&gt;net8.0;net9.0&lt;/TargetFrameworks&gt; &lt;TestSessionTimeout&gt;180000&lt;/TestSessionTimeout&gt; &lt;TreatNoTestsAsError&gt;true&lt;/TreatNoTestsAsError&gt; &lt;EnvironmentVariables&gt; &lt;GODOT_BIN&gt;d:\\development\\Godot_v4.5-stable_mono_win64\\Godot_v4.5-stable_mono_win64.exe&lt;/GODOT_BIN&gt; &lt;/EnvironmentVariables&gt; &lt;/RunConfiguration&gt; &lt;LoggerRunSettings&gt; &lt;Loggers&gt; &lt;Logger friendlyName=\"console\" enabled=\"True\"&gt; &lt;Configuration&gt; &lt;Verbosity&gt;detailed&lt;/Verbosity&gt; &lt;/Configuration&gt; &lt;/Logger&gt; &lt;Logger friendlyName=\"html\" enabled=\"True\"&gt; &lt;Configuration&gt; &lt;LogFileName&gt;test-result.html&lt;/LogFileName&gt; &lt;/Configuration&gt; &lt;/Logger&gt; &lt;Logger friendlyName=\"trx\" enabled=\"True\"&gt; &lt;Configuration&gt; &lt;LogFileName&gt;test-result.trx&lt;/LogFileName&gt; &lt;/Configuration&gt; &lt;/Logger&gt; &lt;/Loggers&gt; &lt;/LoggerRunSettings&gt; &lt;GdUnit4&gt; &lt;!-- Additional Godot runtime parameters. These are passed to the Godot executable when running tests.--&gt; &lt;Parameters&gt;\"--verbose\"&lt;/Parameters&gt; &lt;!-- Controls the display name format of test cases in the test results. Allowed values: - SimpleName: Uses only the method name (e.g., \"TestMethod\") - FullyQualifiedName: Uses the full path including class and method name (e.g., \"MyNamespace.MyClass.TestMethod\") Default: SimpleName --&gt; &lt;DisplayName&gt;FullyQualifiedName&lt;/DisplayName&gt; &lt;!-- When set to true, standard output (stdout) from test cases is captured and included in the test result. This can be useful for debugging. --&gt; &lt;CaptureStdOut&gt;true&lt;/CaptureStdOut&gt; &lt;!-- The maximum duration allowed for a Godot project compilation process in milliseconds. After this timeout period expires, the compilation process is forcefully terminated. For large or complex Godot projects, you may need to increase this value. Default: 20000 (20 seconds) --&gt; &lt;CompileProcessTimeout&gt;20000&lt;/CompileProcessTimeout&gt; &lt;/GdUnit4&gt; &lt;/RunSettings&gt; . Visual Studio . Do follow this steps to activate the test explorer: . | Activate the test explorer | Configure the path to your .runsettings | Restart Visual Studio | . Visual Studio Code . Do follow this steps to activate the test explorer: . | Install the C# Dev Kit (v1.5.12 (pre-release) recommended). | Detailed instructions can be found here. | Open your .vscode/settings.json and add the following property to your project settings: It is important to use the correct C# Dev Kit version, which is currently a PreRelease. The property is newly introduced by this issue. \"dotnet.unitTests.runSettingsPath\": \"./test/.runsettings\" . | Restart Visual Studio Code | . JetBrains Rider . Do follow these steps to activate the test explorer: . Advice We recommend to use Rider 2024.2 or higher to enable test debugging! Checkout for the latest version . | Install the Godot Support plugin | Configure the path to your .runsettings | Enable the VSTest adapters in the Rider settings | Restart JetBrains Rider | . Issues and Workarounds . | Issue | Solution | . | The test discovery is aborted and not all tests are found | Increase the &lt;TestSessionTimeout&gt; in your RunSettings | . ",
    "url": "/gdUnit4/latest/csharp_project_setup/vstest-adapter/#preconditions",
    
    "relUrl": "/csharp_project_setup/vstest-adapter/#preconditions"
  },"39": {
    "doc": "Configure Your IDE",
    "title": "Configure Your IDE",
    "content": " ",
    "url": "/gdUnit4/latest/csharp_project_setup/vstest-adapter/",
    
    "relUrl": "/csharp_project_setup/vstest-adapter/"
  },"40": {
    "doc": "Array Assert",
    "title": "Array Assertions",
    "content": "An assertion tool to verify arrays, supports all Godot array types . | GdScript | C# | . | GdUnitArrayAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current Array is equal to the given one. | . | is_equal_ignoring_case | Verifies that the current Array is equal to the given one, ignoring case considerations. | . | is_not_equal | Verifies that the current Array is not equal to the given one. | . | is_not_equal_ignoring_case | Verifies that the current Array is not equal to the given one, ignoring case considerations. | . | is_same | Verifies that the current Array is the same. | . | is_not_same | Verifies that the current Array is NOT the same. | . | is_empty | Verifies that the current Array is empty, it has a size of 0. | . | is_not_empty | Verifies that the current Array is not empty, it has a size of minimum 1. | . | has_size | Verifies that the current Array has a size of given value. | . | contains | Verifies that the current Array contains the given values, in any order. | . | contains_exactly | Verifies that the current Array contains exactly only the given values and nothing else, in same order. | . | contains_exactly_in_any_order | Verifies that the current Array contains exactly only the given values and nothing else, in any order. | . | not_contains | Verifies that the current Array do NOT contains the given values, in any order. | . | contains_same | Verifies that the current Array contains the given values, in any order. | . | contains_same_exactly | Verifies that the current Array contains exactly only the given values and nothing else, in same order. | . | contains_same_exactly_in_any_order | Verifies that the current Array contains exactly only the given values and nothing else, in any order. | . | not_contains_same | Verifies that the current Array do NOT contains the given values, in any order. | . | extract | Extracts all values by given function name and optional arguments. | . | extractv | Extracts all values by given extractor’s. | . | IEnumerableAssert . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current Array is equal to the given one. | . | IsEqualIgnoringCase | Verifies that the current Array is equal to the given one, ignoring case considerations. | . | IsNotEqual | Verifies that the current Array is not equal to the given one. | . | IsNotEqualIgnoringNase | Verifies that the current Array is not equal to the given one, ignoring case considerations. | . | IsSame | Verifies that the current Array is the same. | . | IsNotSame | Verifies that the current Array is NOT the same. | . | IsEmpty | Verifies that the current Array is empty, it has a size of 0. | . | IsNotEmpty | Verifies that the current Array is not empty, it has a size of minimum 1. | . | HasNize | Verifies that the current Array has a size of given value. | . | Contains | Verifies that the current Array contains the given values, in any order. | . | ContainsExactly | Verifies that the current Array contains exactly only the given values and nothing else, in same order. | . | ContainsExactlyInAnyOrder | Verifies that the current Array contains exactly only the given values and nothing else, in any order. | . | NotContains | Verifies that the current Array do NOT contains the given values, in any order. | . | ContainsSame | Verifies that the current Array contains the given values, in any order. | . | ContainsSameExactly | Verifies that the current Array contains exactly only the given values and nothing else, in same order. | . | ContainsSameExactlyInAnyOrder | Verifies that the current Array contains exactly only the given values and nothing else, in any order. | . | NotContainsSame | Verifies that the current Array do NOT contains the given values, in any order. | . | Extract | Extracts all values by given function name and optional arguments. | . | ExtractV | Extracts all values by given extractor’s. | . | . ",
    "url": "/gdUnit4/latest/testing/assert-array/#array-assertions",
    
    "relUrl": "/testing/assert-array/#array-assertions"
  },"41": {
    "doc": "Array Assert",
    "title": "Array Assert Examples",
    "content": "is_null . Verifies that the current value is null. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_null() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array(null).is_null() # should fail because the array not null assert_array([]).is_null() . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsNull() . // this assertion succeeds AssertThat(null).IsNull(); // should fail because the array not null AssertThat(new int[]{}).IsNull(); . | . is_not_null . Verifies that the current value is not null. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_null() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([]).is_not_null() # should fail because the array is null assert_array(null).is_not_null() . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsNotNull() . // this assertion succeeds AssertThat(new int[]{}).IsNotNull(); // should fail because the array is null AssertThat(null).IsNotNull(); . | . is_equal . Verifies that the current Array is equal to the given one. The values are compared by deep parameter comparision, for object reference compare you have to use is_same. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitArrayAssert . var a := [1, 2, 3, 4, 2, 5] # this assertion succeeds, all values are equal assert_array(a).is_equal(1, 2, 3, 4, 2, 5) # should fail because the array not contains the expected elements and has diff size assert_array(a).is_equal(1, 2, 3, 4, 2, 5, 7) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(new int[]{1, 2, 3, 4, 2, 5}).IsEqual(new int[]{1, 2, 3, 4, 2, 5}); // should fail because the array not contains same elements and has diff size AssertThat(new int[]{1, 2, 4, 2, 5}).IsEqual(new int[]{1, 2, 3, 4, 2, 5}); . | . is_equal_ignoring_case . Verifies that the current Array is equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([\"this\", \"is\", \"a\", \"message\"]).is_equal_ignoring_case(\"This\", \"is\", \"a\", \"Message\") # should fail because the array not contains same elements assert_array([\"this\", \"is\", \"a\", \"message\"]).is_equal_ignoring_case(\"This\", \"is\", \"an\", \"Message\") . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertThat(new sring[]{\"this\", \"is\", \"a\", \"message\"}).IsEqualIgnoringCase(new sring[]{\"This\", \"is\", \"a\", \"Message\"}); // should fail because the array not contains same elements AssertThat(new sring[]{\"this\", \"is\", \"a\", \"message\"}).IsEqualIgnoringCase(new sring[]{\"This\", \"is\", \"an\", \"Message\"}); . | . is_not_equal . Verifies that the current Array is not equal to the given one. The values are compared by deep parameter comparision, for object reference compare you have to use is_not_same. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).is_not_equal(1, 2, 3, 4, 5, 6) # should fail because the array contains same elements assert_array([1, 2, 3, 4, 5]).is_not_equal(1, 2, 3, 4, 5) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(new int[]{1, 2, 3, 4, 5}).IsNotEqual(new int[]{1, 2, 3, 4, 5, 6}); // should fail because the array contains same elements AssertThat(new int[]{1, 2, 3, 4, 5}).IsNotEqual(new int[]{1, 2, 3, 4, 5}); . | . is_not_equal_ignoring_case . Verifies that the current Array is not equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([\"this\", \"is\", \"a\", \"message\"]).is_not_equal_ignoring_case(\"This\", \"is\", \"an\", \"Message\") # should fail because the array contains same elements ignoring case sensitive assert_array([\"this\", \"is\", \"a\", \"message\"]).is_not_equal_ignoring_case(\"This\", \"is\", \"a\", \"Message\") . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsNotEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertThat(new string[]{\"this\", \"is\", \"a\", \"message\"}).IsNotEqualIgnoringCase(new string[]{\"This\", \"is\", \"an\", \"Message\"}); // should fail because the array contains same elements ignoring case sensitive AssertThat(new string[]{\"this\", \"is\", \"a\", \"message\"}).IsNotEqualIgnoringCase(new string[]{\"This\", \"is\", \"a\", \"Message\"}); . | . is_same . Verifies that the current Array is the same. The array are compared by object reference, for deep parameter comparision use is_equal. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).is_same(&lt;expected&gt;) -&gt; GdUnitArrayAssert . var a := [1, 2, 3, 4, 2, 5] var b := [1, 2, 3, 4, 2, 5] # this assertion succeeds assert_array(a).is_same(a) # should fail because the arrays are not the same assert_array(a).is_same(b) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsSame(&lt;expected&gt;) . int[] a = { 1, 2, 3, 4, 2, 5 }; int[] b = { 1, 2, 3, 4, 2, 5 }; // this assertion succeeds AssertThat(a).IsSame(a); // should fail because the arrays are not the same AssertThat(a).IsSame(b); . | . is_not_same . Verifies that the current Array is the NOT same. The array are compared by object reference, for deep parameter comparision use is_not_equal. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_same(&lt;expected&gt;) -&gt; GdUnitArrayAssert . var a := [1, 2, 3, 4, 2, 5] var b := [1, 2, 3, 4, 2, 5] # this assertion succeeds assert_array(a).is_not_same(b) # should fail because the arrays are the same assert_array(a).is_not_same(a) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsNotSame(&lt;expected&gt;) . int[] a = { 1, 2, 3, 4, 2, 5 }; int[] b = { 1, 2, 3, 4, 2, 5 }; // this assertion succeeds AssertThat(a).IsNotSame(b); // should fail because the arrays are the same AssertThat(a).IsNotSame(a); . | . is_empty . Verifies that the current Array is empty, it has a size of 0. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_empty() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([]).is_empty() # should fail because the array is not empty it has a size of one assert_array([1]).is_empty() . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsEmpty() . // this assertion succeeds AssertThat(new int[]{}).IsEmpty(); // should fail because the array is not empty it has a size of one AssertThat(new int[]{1}).IsEmpty(); . | . is_not_empty . Verifies that the current Array is not empty, it has a size of minimum 1. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_empty() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1]).is_not_empty() # should fail because the array is empty assert_array([]).is_not_empty() . | public static IEnumerableAssert AssertThat(&lt;current&gt;).IsNotEmpty() . // this assertion succeeds AssertThat(new int[]{1}).IsNotEmpty(); // should fail because the array is empty AssertThat(new int[]{}).IsNotEmpty(); . | . has_size . Verifies that the current Array has a size of given value. | GdScript | C# | . | func assert_array(&lt;current&gt;).has_size(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).has_size(5) assert_array([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]).has_size(6) # should fail because the array has a size of 5 and not 4 assert_array([1, 2, 3, 4, 5]).has_size(4) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).HasSize(&lt;expected&gt;) . // this assertion succeeds AssertThat(new int[]{1, 2, 3, 4, 5}).HasSize(5); AssertThat(new string[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}).HasSize(6); // should fail because the array has a size of 5 and not 4 AssertThat(new int[]{1, 2, 3, 4, 5}).HasSize(4); . | . contains . Verifies that the current Array contains the given values, in any order. The values are compared by deep parameter comparision, for object reference compare you have to use contains_same. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).contains(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).contains(5, 2) # should fail because the array not contains 7 and 6 assert_array([1, 2, 3, 4, 5]).contains(2, 7, 6) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).Contains(&lt;expected&gt;) . // this assertion succeeds AssertThat(new int[]{1, 2, 3, 4, 5}).Contains(5, 2); // should fail because the array not contains 7 and 6 AssertThat(new int[]{1, 2, 3, 4, 5}).Contains(2, 7, 6): . | . contains_exactly . Verifies that the current Array contains exactly only the given values and nothing else, in same order. The values are compared by deep parameter comparision, for object reference compare you have to use contains_same_exactly. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).contains_exactly(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).contains_exactly(1, 2, 3, 4, 5) # should fail because the array contains the same elements but in a different order assert_array([1, 2, 3, 4, 5]).contains_exactly(1, 4, 3, 2, 5) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).ContainsExactly(&lt;expected&gt;) . // this assertion succeeds AssertThat(new int[]{1, 2, 3, 4, 5}).ContainsExactly(1, 2, 3, 4, 5); // should fail because the array contains the same elements but in a different order AssertThat(new int[]{1, 2, 3, 4, 5}).ContainsExactly(1, 4, 3, 2, 5); . | . contains_exactly_in_any_order . Verifies that the current Array contains exactly only the given values and nothing else, in any order. The values are compared by deep parameter comparision, for object reference compare you have to use contains_same_exactly_in_any_order. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func contains_exactly_in_any_order(expected) -&gt; GdUnitArrayAssert: . # this assertion succeeds, contains all elements but in a different order assert_array([1, 2, 3, 4, 5]).contains_exactly_in_any_order(1, 5, 3, 4, 2) # should fail because the array contains not exacly all elements (5 is missing) assert_array([1, 2, 3, 4]).contains_exactly(1, 4, 3, 2) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).ContainsExactlyInAnyOrder(&lt;expected&gt;) . // this assertion succeeds, contains all elements but in a different order AssertThat(new int[]{1, 2, 3, 4, 5}).ContainsExactlyInAnyOrder(1, 5, 3, 4, 2); // should fail because the array contains not exacly all elements (5 is missing) AssertThat(new int[]{1, 2, 3, 4}).ContainsExactlyInAnyOrder(1, 4, 3, 2); . | . not_contains . Verifies that the current Array do NOT contains the given values, in any order. The values are compared by deep parameter comparision, for object reference compare you have to use not_contains_same. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func not_contains(expected) -&gt; GdUnitArrayAssert: . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).not_contains(6, 0) # should fail because the array contains the value 2 assert_array([1, 2, 3, 4]).contains_exactly(6, 0, 2) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).NotContains(&lt;expected&gt;) . // this assertion succeeds AssertThat(new int[]{1, 2, 3, 4, 5}).NotContains(6, 0); // should fail because the array contains the value 2 AssertThat(new int[]{1, 2, 3, 4}).NotContains(6, 0, 2); . | . contains_same . Verifies that the current Array contains the same values, in any order. The values are compared by object reference, for deep parameter comparision use contains. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).contains_same(&lt;expected&gt;) -&gt; GdUnitArrayAssert . var value_a := Node.new() var value_b := Node.new() var value_c := Node.new() var a := [value_a, value_b] # this assertion succeeds assert_array(a).contains_same(value_a) # should fail because the array not contains value_c assert_array(a).contains_same(value_c) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).ContainsSame(&lt;expected&gt;) . Node value_a = new Node(); Node value_b = new Node(); Node value_c = new Node(); Node[] a = {value_a, value_b} // this assertion succeeds AssertThat(a).ContainsSame(value_a); // should fail because the array not contains value_c AssertThat(a).ContainsSame(value_c); . | . contains_same_exactly . Verifies that the current Array contains exactly only the given values and nothing else, in same order. The values are compared by object reference, for deep parameter comparision use contains_exactly. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).contains_same_exactly(&lt;expected&gt;) -&gt; GdUnitArrayAssert . var value_a := Node.new() var value_b := Node.new() var a := [value_a, value_b] # this assertion succeeds assert_array(a).contains_same_exactly(value_a, value_b) # should fail because the array not contains more than value_a assert_array(a).contains_same_exactly(value_a) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).ContainsSameExactly(&lt;expected&gt;) . Node value_a = new Node(); Node value_b = new Node(); Node[] a = {value_a, value_b} // this assertion succeeds AssertThat(a).ContainsSameExactly(value_a, value_b); // should fail because the array not contains more than value_a AssertThat(a).ContainsSameExactly(value_a); . | . contains_same_exactly_in_any_order . Verifies that the current Array contains exactly only the given values and nothing else, in any order. The values are compared by object reference, for deep parameter comparision use contains_exactly_in_any_order. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_array(&lt;current&gt;).contains_same_exactly_in_any_order(&lt;expected&gt;) -&gt; GdUnitArrayAssert . var value_a := Node.new() var value_b := Node.new() var a := [value_a, value_b] # this assertion succeeds assert_array(a).contains_same_exactly_in_any_order(value_b, value_a) # should fail because the array not contains more than value_a assert_array(a).contains_same_exactly_in_any_order(value_a) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).ContainsSameExactlyInAnyOrder(&lt;expected&gt;) . Node value_a = new Node(); Node value_b = new Node(); Node[] a = {value_a, value_b} // this assertion succeeds AssertThat(a).ContainsSameExactlyInAnyOrder(value_b, value_a); // should fail because the array not contains more than value_a AssertThat(a).ContainsSameExactlyInAnyOrder(value_a); . | . not_contains_same . Verifies that the current Array do NOT contains the same values, in any order. The values are compared by object reference, for deep parameter comparision use not_contains. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func not_contains_same(expected) -&gt; GdUnitArrayAssert: . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).not_contains_same(6, 0) # should fail because the array contains the value 2 assert_array([1, 2, 3, 4]).not_contains_same([6, 0, 2) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).NotContainsSame(&lt;expected&gt;) . // this assertion succeeds AssertThat(new int[]{1, 2, 3, 4, 5}).NotContainsSame(6, 0); // should fail because the array contains the value 2 AssertThat(new int[]{1, 2, 3, 4}).NotContainsSame(6, 0, 2); . | . extract . Extracts all values by given function name and optional arguments into a new ArrayAssert. If the elements not accessible by func_name the value is converted to \"n.a\", expecting null values . You can use function name chaining e.g. get_parent.get_name . | GdScript | C# | . | func assert_array(&lt;current&gt;).extract(&lt;func_name :String&gt;, [args :Array]) -&gt; GdUnitArrayAssert func assert_array(&lt;current&gt;).extract(&lt;func_name :String&gt;[.&lt;func_name&gt;, ..]) -&gt; GdUnitArrayAssert . # extracting only by function name \"get_class\" assert_array([Reference.new(), 2, AStar.new(), auto_free(Node.new())])\\ .extract(\"get_class\")\\ .contains_exactly([\"Reference\", \"n.a.\", \"AStar\", \"Node\"]) # extracting by a function name and arguments assert_array([Reference.new(), 2, AStar.new(), auto_free(Node.new())])\\ .extract(\"has_signal\", [\"tree_entered\"])\\ .contains_exactly([false, \"n.a.\", false, true]) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).Extract(&lt;func_name :String&gt;, &lt;args&gt;); public static IEnumerableAssert AssertThat(&lt;current&gt;).Extract(&lt;func_name :String&gt;[.&lt;func_name&gt;], &lt;args&gt;]); . // extracting only by function name \"get_class\" AssertThat(new object[] { new Reference(), 2, new AStar(), AutoFree(new Node()) }) .Extract(\"get_class\") .ContainsExactly(\"Reference\", \"n.a.\", \"AStar\", \"Node\"); // extracting by a function name and arguments AssertThat(new object[] { new Reference(), 2, new AStar(), AutoFree(new Node()) }) .Extract(\"has_signal\", [\"tree_entered\"]) .ContainsExactly(false, \"n.a.\", false, true); . | . extractv . Extracts all values by given extractor’s into a new ArrayAssert, a maximum of teen extractors currently supported. If the elements not extractable than the value is converted to \"n.a\", expecting null values . To check multiple extracted values you must use tuple, a tuple can hold two up to ten values . | GdScript | C# | . | func assert_array(&lt;current&gt;).extractv(&lt;extractor:GdUnitValueExtractor&gt;[, extractor, ..]) -&gt; GdUnitArrayAssert . # example object for extraction class TestObj: var _name :String var _value var _x func _init(name :String, value, x = null): _name = name _value = value _x = x func get_name() -&gt; String: return _name func get_value(): return _value func get_x(): return _x . # single extract assert_array([1, false, 3.14, null, Color.aliceblue])\\ .extractv(extr(\"get_class\"))\\ .contains_exactly([\"n.a.\", \"n.a.\", \"n.a.\", null, \"n.a.\"]) # tuple of two assert_array([TestObj.new(\"A\", 10), TestObj.new(\"B\", \"foo\"), Color.aliceblue, TestObj.new(\"C\", 11)])\\ .extractv(extr(\"get_name\"), extr(\"get_value\"))\\ .contains_exactly([ tuple(\"A\", 10), tuple(\"B\", \"foo\"), tuple(\"n.a.\", \"n.a.\"), tuple(\"C\", 11)]) # tuple of three assert_array([TestObj.new(\"A\", 10), TestObj.new(\"B\", \"foo\", \"bar\"), TestObj.new(\"C\", 11, 42)])\\ .extractv(extr(\"get_name\"), extr(\"get_value\"), extr(\"get_x\"))\\ .contains_exactly([ tuple(\"A\", 10, null), tuple(\"B\", \"foo\", \"bar\"), tuple(\"C\", 11, 42)]) . | public static IEnumerableAssert AssertThat(&lt;current&gt;).ExtractV(&lt;extractor:IValueExtractor&gt;[, extractor, ..]); . // example object for extraction class TestObj : Godot.Reference { string _name; object _value; object _x; public TestObj(string name, object value, object x = null) { _name = name; _value = value; _x = x; } public string GetName() =&gt; _name; public object GetValue() =&gt; _value; public object GetX() =&gt; _x; } . // single extract AssertThat(new object[] { 1, false, 3.14, null, Colors.AliceBlue }) .ExtractV(Extr(\"GetClass\")) .ContainsExactly(\"n.a.\", \"n.a.\", \"n.a.\", null, \"n.a.\"); // tuple of two AssertThat(new object[] { new TestObj(\"A\", 10), new TestObj(\"B\", \"foo\"), Colors.AliceBlue, new TestObj(\"C\", 11) }) .ExtractV(Extr(\"GetName\"), Extr(\"GetValue\")) .ContainsExactly(Tuple(\"A\", 10), Tuple(\"B\", \"foo\"), Tuple(\"n.a.\", \"n.a.\"), Tuple(\"C\", 11)); // tuple of three AssertThat(new object[] { new TestObj(\"A\", 10), new TestObj(\"B\", \"foo\", \"bar\"), new TestObj(\"C\", 11, 42) }) .ExtractV(Extr(\"GetName\"), Extr(\"GetValue\"), Extr(\"GetX\")) .ContainsExactly(Tuple(\"A\", 10, null), Tuple(\"B\", \"foo\", \"bar\"), Tuple(\"C\", 11, 42)); . | . custom value extractor . GdUnit provides extr function to build a value extractor by given function name and optional arguments. You can use also function name chaining e.g. get_parent.get_name . | GdScript | C# | . | # Builds an extractor by given function name and optional arguments static func extr(&lt;func_name :String&gt;[.func_name, ..], [args :Array]) -&gt; GdUnitValueExtractor: . | // Builds an extractor by given function name and optional arguments public static IValueExtractor Extr(string methodName, params object[] args); . | . ",
    "url": "/gdUnit4/latest/testing/assert-array/#array-assert-examples",
    
    "relUrl": "/testing/assert-array/#array-assert-examples"
  },"42": {
    "doc": "Array Assert",
    "title": "Array Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-array/",
    
    "relUrl": "/testing/assert-array/"
  },"43": {
    "doc": "Boolean Assert",
    "title": "Boolean Assertions",
    "content": "An assertion tool to verify boolean values. | GdScript | C# | . | GdUnitBoolAssert . | Function | Description | . | is_true | Verifies that the current value is true. | . | is_false | Verifies that the current value is false. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | IBoolAssert . | Function | Description | . | IsTrue | Verifies that the current value is true. | . | IsFalse | Verifies that the current value is false. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | . ",
    "url": "/gdUnit4/latest/testing/assert-bool/#boolean-assertions",
    
    "relUrl": "/testing/assert-bool/#boolean-assertions"
  },"44": {
    "doc": "Boolean Assert",
    "title": "Boolean Assert Examples",
    "content": "is_true . Verifies that the current value is true. | GdScript | C# | . | func assert_bool(&lt;current&gt;).is_true() -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(true).is_true() # this assertion fails because the value is false and not true assert_bool(false).is_true() . | public static IBoolAssert AssertThat(&lt;current&gt;).IsTrue() . // this assertion succeeds AssertThat(true).IsTrue(); // this assertion fails because the value is false and not true AssertThat(false).IsTrue(); . | . is_false . Verifies that the current value is false. | GdScript | C# | . | func assert_bool(&lt;current&gt;).is_false() -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_false() # this assertion fails because the value is true and not false assert_bool(true).is_false() . | public static IBoolAssert AssertThat(&lt;current&gt;).IsFalse(); . // this assertion succeeds AssertThat(false).IsFalse(); // this assertion fails because the value is true and not false AssertThat(true).IsFalse(); . | . is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_bool(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_equal(false) # this assertion fails because the value is false and not true assert_bool(false).is_equal(true) . | public static IBoolAssert AssertThat(&lt;current&gt;).IsEqual(&lt;expected&gt;); . // this assertion succeeds AssertThat(false).IsEqual(false); // this assertion fails because the value is false and not true AssertThat(false).IsEqual(true); . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_bool(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_not_equal(true) # this assertion fails because the value is false and should not be false assert_bool(false).is_not_equal(false) . | public static IBoolAssert AssertThat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;); . // this assertion succeeds AssertThat(false).IsNotEqual(true); // this assertion fails because the value is false and should not be false AssertThat(false).IsNotEqual(false); . | . ",
    "url": "/gdUnit4/latest/testing/assert-bool/#boolean-assert-examples",
    
    "relUrl": "/testing/assert-bool/#boolean-assert-examples"
  },"45": {
    "doc": "Boolean Assert",
    "title": "Boolean Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-bool/",
    
    "relUrl": "/testing/assert-bool/"
  },"46": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assertions",
    "content": "An assertion tool to verify dictionaries. | GdScript | C# | . | GdUnitDictionaryAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current dictionary is equal to the given one, ignoring order. | . | is_not_equal | Verifies that the current dictionary is not equal to the given one, ignoring order. | . | is_same | Verifies that the current dictionary is the same. | . | is_not_same | Verifies that the current dictionary is NOT the same. | . | is_empty | Verifies that the current dictionary is empty, it has a size of 0. | . | is_not_empty | Verifies that the current dictionary is not empty, it has a size of minimum 1. | . | has_size | Verifies that the current dictionary has a size of given value. | . | contains_keys | Verifies that the current dictionary contains the given keys. | . | contains_key_value | Verifies that the current dictionary contains the given key and value. | . | not_contains_keys | Verifies that the current dictionary not contains the given keys. | . | contains_same_keys | Verifies that the current dictionary contains the given keys. | . | contains_same_key_value | Verifies that the current dictionary contains the given key and value. | . | not_contains_same_keys | Verifies that the current dictionary not contains the given keys. | . | IDictionaryAssert . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current dictionary is equal to the given one, ignoring order. | . | IsNotEqual | Verifies that the current dictionary is not equal to the given one, ignoring order. | . | IsSame | Verifies that the current dictionary is the same. | . | IsNotSame | Verifies that the current dictionary is NOT the same. | . | IsEmpty | Verifies that the current dictionary is empty, it has a size of 0. | . | IsNotEmpty | Verifies that the current dictionary is not empty, it has a size of minimum 1. | . | HasSize | Verifies that the current dictionary has a size of given value. | . | ContainsKeys | Verifies that the current dictionary contains the given keys. | . | ContainsKeyValue | Verifies that the current dictionary contains the given key and value. | . | NotContainsKeys | Verifies that the current dictionary not contains the given keys. | . | ContainsSameKeys | Verifies that the current dictionary contains the given keys. | . | ContainsSameKeyValue | Verifies that the current dictionary contains the given key and value. | . | NotContainsSameKeys | Verifies that the current dictionary not contains the given keys. | . | . ",
    "url": "/gdUnit4/latest/testing/assert-dictionary/#dictionary-assertions",
    
    "relUrl": "/testing/assert-dictionary/#dictionary-assertions"
  },"47": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assert Examples",
    "content": "is_null . Verifies that the current value is null. | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_null() -&gt; GdUnitDictionaryAssert . # this assertion succeeds assert_dict(null).is_null() # should fail because the dictionary is not null assert_dict({}).is_null() . | public static IDictionaryAssert AssertThat(current).IsNull(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsNull(); . // this assertion succeeds AssertThat(null).IsNull(); // should fail because it not null AssertThat(new Hashtable()).IsNull(); . | . is_not_null . Verifies that the current value is not null. | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_not_null() -&gt; GdUnitDictionaryAssert . # this assertion succeeds assert_dict({}).is_not_null() # should fail because the dictionary is null assert_dict(null).is_not_null() . | public static IDictionaryAssert AssertThat(current).IsNotNull(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsNotNull(); . // this assertion succeeds AssertThat(new Hashtable()).IsNotNull(); // should fail because the current value is null AssertThat(null).IsNotNull(); . | . is_equal . Verifies that the current dictionary is equal to the given one, ignoring order. The values are compared by deep parameter comparision, for object reference compare you have to use is_same. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).is_equal({}) assert_dict({1:1}).is_equal({1:1}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_equal({1:1, \"key_a\": \"value_a\" }) # different order is also equals assert_dict({\"key_a\": \"value_a\", 1:1}).is_equal({1:1, \"key_a\": \"value_a\" }) # should fail assert_dict({}).is_equal({1:1}) assert_dict({1:1}).is_equal({1:2}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_equal({1:1, \"key_b\": \"value_b\"}) . | public static IDictionaryAssert AssertThat(current).IsEqual(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsEqual(); . // this assertion succeeds AssertThat(new Hashtable()).IsEqual(new Hashtable()); // should fail because is not equal AssertThat(new Hashtable()).IsEqual(new Hashtable() { { 1, 1 } }); . | . is_not_equal . Verifies that the current dictionary is not equal to the given one, ignoring order. The values are compared by deep parameter comparision, for object reference compare you have to use is_not_same. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict(null).is_not_equal({}) assert_dict({}).is_not_equal(null) assert_dict({}).is_not_equal({1:1}) assert_dict({1:1}).is_not_equal({}) assert_dict({1:1}).is_not_equal({1:2}) assert_dict({2:1}).is_not_equal({1:1}) assert_dict({1:1}).is_not_equal({1:1, \"key_a\": \"value_a\"}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_equal({1:1}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_equal({1:1,\"key_b\": \"value_b\"}) # should fail assert_dict({}).is_not_equal({}) assert_dict({1:1}).is_not_equal({1:1}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_equal({1:1, \"key_a\": \"value_a\"}) assert_dict({\"key_a\": \"value_a\", 1:1}).is_not_equal({1:1, \"key_a\": \"value_a\"}) . | public static IDictionaryAssert AssertThat(current).IsNotEqual(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsNotEqual(); . // this assertion succeeds AssertThat(new Hashtable()).IsNotEqual(new Hashtable() { { 1, 1 } }); // should fail because it is equal AssertThat(new Hashtable()).IsNotEqual(new Hashtable()); . | . is_same . Verifies that the current dictionary is the same. The dictionary are compared by object reference, for deep parameter comparision use is_equal. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_same(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . var a := { \"key_a\": \"value_a\", \"key_b\": \"value_b\"} var b := { \"key_a\": \"value_a\", \"key_b\": \"value_b\"} # this assertion succeeds assert_dict(a).is_same(a) # should fail assert_dict(a).is_same(b) . | public static IDictionaryAssert AssertThat(current).IsSame(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsSame(); . Hashtable a = new Hashtable(); Hashtable b = new Hashtable(); // this assertion succeeds AssertThat(a).IsSame(a); // should fail because is not equal AssertThat(a).IsSame(b); . | . is_not_same . Verifies that the current dictionary is NOT the same. The dictionary are compared by object reference, for deep parameter comparision use is_not_equal. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_not_same(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . var a := { \"key_a\": \"value_a\", \"key_b\": \"value_b\"} var b := { \"key_a\": \"value_a\", \"key_b\": \"value_b\"} # this assertion succeeds assert_dict(a).is_not_same(b) # should fail assert_dict(a).is_not_same(a) . | public static IDictionaryAssert AssertThat(current).IsNotSame(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsNotSame(); . Hashtable a = new Hashtable(); Hashtable b = new Hashtable(); // this assertion succeeds AssertThat(a).IsNotSame(b); // should fail because is not equal AssertThat(a).IsNotSame(a); . | . is_empty . Verifies that the current dictionary is empty, it has a size of 0. | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_empty() -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).is_empty() # should fail assert_dict(null).is_empty() assert_dict({1:1}).is_empty() . | public static IDictionaryAssert AssertThat(current).IsEmpty(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsEmpty(); . // this assertion succeeds AssertThat(new Hashtable()).IsEmpty(); // should fail because it is NOT empty AssertThat(new Hashtable() { { 1, 1 } }).IsEmpty(); . | . is_not_empty . Verifies that the current dictionary is not empty, it has a size of minimum 1. | GdScript | C# | . | func assert_dict(&lt;current&gt;).is_not_empty() -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({1:1}).is_not_empty() assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_empty() # should fail assert_dict(null).is_not_empty() assert_dict({}).is_not_empty() . | public static IDictionaryAssert AssertThat(current).IsNotEmpty(); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).IsNotEmpty(); . // this assertion succeeds AssertThat(new Hashtable() { { 1, 1 } }).IsNotEmpty(); // should fail because it is empty AssertThat(new Hashtable()).IsNotEmpty(); . | . has_size . Verifies that the current dictionary has a size of given value. | GdScript | C# | . | func assert_dict(&lt;current&gt;).has_size(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).has_size(0) assert_dict({1:1, 2:1, 3:1}).has_size(3) # should fail assert_dict(null).has_size(0) assert_dict({}).has_size(1) assert_dict({1:1, 2:1, 3:1}).has_size(4) . | public static IDictionaryAssert AssertThat(current).HasSize(&lt;count&gt;); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).HasSize(&lt;count&gt;); . // this assertion succeeds AssertThat(new Hashtable() { { 1, 1 } }).HasSize(1); // should fail because it is empty AssertThat(new Hashtable()).HasSize(1); . | . contains_keys . Verifies that the current dictionary contains the given key(s). The values are compared by deep parameter comparision, for object reference compare you have to use contains_same_keys. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).contains_keys(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({1:1, 2:2, 3:3}).contains_keys(2) assert_dict({1:1, 2:2, \"key_a\": \"value_a\"}).contains_keys(2, \"key_a\") # should fail assert_dict({1:1, 3:3}).contains_keys(2) # key 2 is missing assert_dict({1:1, 3:3}).contains_keys(1, 4) # key 4 is missing . | public static IDictionaryAssert AssertThat(current).ContainsKeys(&lt;keys&gt;); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).ContainsKeys(&lt;keys&gt;); . // this assertion succeeds AssertThat(new Hashtable() { { \"a\", 1 }, { \"b\", 2} }).ContainsKeys(\"a\", \"b\"); // should fail because it not contains key \"c\" AssertThat(new Hashtable() { { \"a\", 1 }, { \"b\", 2} }).ContainsKeys(\"a\", \"c\"); . | . contains_key_value . Verifies that the current dictionary contains the given key and value. The values are compared by deep parameter comparision, for object reference compare you have to use contains_same_key_value. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func contains_key_value(&lt;key&gt;, &lt;value&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({1:1}).contains_key_value(1, 1) assert_dict({1:1, 2:2, 3:3}).contains_key_value(3, 3).contains_key_value(1, 1) # should fail assert_dict({1:1}.contains_key_value(1, 2) # contains key '1' but with value '2' . | public static IDictionaryAssert AssertThat(current).ContainsKeyValue(&lt;keys&gt;); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).ContainsKeyValue(&lt;keys&gt;); . // this assertion succeeds AssertThat(new Hashtable() { { \"a\", 1 }, { \"b\", 2} }).ContainsKeyValue(\"a\", \"1\"); // should fail because it NOT contains key and value \"a:2\" AssertThat(new Hashtable() { { \"a\", 1 }, { \"b\", 2} }).ContainsKeyValue(\"a\", \"2\"); . | . not_contains_keys . Verifies that the current dictionary not contains the given key(s). The values are compared by deep parameter comparision, for object reference compare you have to use not_contains_same_keys. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).not_contains_keys(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).not_contains_keys(2) assert_dict({1:1, 3:3}).not_contains_keys(2) assert_dict({1:1, 3:3}).not_contains_keys(2, 4) # should fail assert_dict({1:1, 2:2, 3:3}).not_contains_keys(2, 4) # but contains 2 assert_dict({1:1, 2:2, 3:3}.not_contains_keys(1, 2, 3, 4) # but contains 1, 2, 3 . | public static IDictionaryAssert AssertThat(current).NotContainsKeys(&lt;keys&gt;); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).NotContainsKeys(&lt;keys&gt;); . // this assertion succeeds AssertThat(new Hashtable() { { \"a\", 1 }, { \"b\", 2} }).ContainsKeys(\"c\", \"d\"); // should fail because it contains key \"b\" AssertThat(new Hashtable() { { \"a\", 1 }, { \"b\", 2} }).NotContainsKeys(\"b\", \"c\"); . | . contains_same_keys . Verifies that the current dictionary contains the given key(s). The dictionary are compared by object reference, for deep parameter comparision use contains_keys. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).contains_same_keys(&lt;expected&gt;: Array) -&gt; GdUnitDictionaryAssert: . var key_a := Node.new() var key_b := Node.new() var key_c := Node.new() var dict_a := { key_a:\"foo\", key_b:\"bar\" } # this assertion succeeds assert_dict(dict_a).contains_same_keys([key_a]) # should fail assert_dict(a).contains_same_keys([key_c]) # key_c is missing . | public static IDictionaryAssert AssertThat(current).ContainsSameKeys(&lt;keys&gt;); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).ContainsSameKeys(&lt;keys&gt;); . String key_a = \"a\"; String key_b = \"b\"; String key_c = \"c\"; Hashtable dict_a = new Hashtable() { { key_a, \"foo\" }, { key_b, \"bar\"} }; // this assertion succeeds AssertThat(dict_a).ContainsSameKeys(key_a); // should fail because it not contains key \"c\" AssertThat(dict_a).ContainsSameKeys(key_c); . | . contains_same_key_value . Verifies that the current dictionary contains the given key and value. The values are compared by deep parameter comparision, for object reference compare you have to use contains_key_value. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func contains_same_key_value(&lt;key&gt;, &lt;value&gt;) -&gt; GdUnitDictionaryAssert: . var key_a := Node.new() var key_b := Node.new() var value_a := Node.new() var value_b := Node.new() var dict_a := { key_a:value_a, key_b:value_b } # this assertion succeeds assert_dict(dict_a)\\ .contains_same_key_value(key_a, value_a)\\ .contains_same_key_value(key_b, value_b) # should fail because it NOT contains key with value key_a, value_b assert_dict(dict_a).contains_same_key_value(key_a, value_b) . | public static IDictionaryAssert AssertThat(current).ContainsSameKeyValue(&lt;keys&gt;); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).ContainsSameKeyValue(&lt;keys&gt;); . String key_a = \"a\"; String key_b = \"b\"; String value_a = \"foo\"; String value_b = \"bar\"; Hashtable dict_a = new Hashtable() { { key_a, value_a }, { key_b, value_b} }; // this assertion succeeds AssertThat(dict_a).ContainsSameKeyValue(key_a, value_a); // should fail because it NOT contains key with value key_a, value_b AssertThat(dict_a).ContainsSameKeyValue(key_a, value_b); . | . not_contains_same_keys . Verifies that the current dictionary not contains the given key(s). The values are compared by deep parameter comparision, for object reference compare you have to use not_contains_keys. For more details about comparision works see How GdUnit Asserts compares Objects . | GdScript | C# | . | func assert_dict(&lt;current&gt;).not_contains_same_keys(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . var key_a := Node.new() var key_b := Node.new() var key_c := Node.new() var dict_a := { key_a:\"foo\", key_b:\"bar\" } # this assertion succeeds assert_dict(dict_a).not_contains_same_keys(key_c) # should fail because it contains key_a and key_b assert_dict(dict_a).not_contains_same_keys(key_a) assert_dict(dict_a).not_contains_same_keys(key_b) . | public static IDictionaryAssert AssertThat(current).NotContainsSameKeys(&lt;keys&gt;); public static IDictionaryAssert AssertThat&lt;K, V&gt;(current).NotContainsSameKeys(&lt;keys&gt;); . String key_a = \"a\"; String key_b = \"b\"; String key_c = \"b\"; Hashtable dict_a = new Hashtable() { { key_a, \"foo\" }, { key_b, \"bar\"} }; // this assertion succeeds AssertThat(dict_a).NotContainsSameKeys(key_c); // should fail because it contains key \"a\" and \"b\" AssertThat(dict_a).NotContainsSameKeys(key_a); AssertThat(dict_a).NotContainsSameKeys(key_b); . | . ",
    "url": "/gdUnit4/latest/testing/assert-dictionary/#dictionary-assert-examples",
    
    "relUrl": "/testing/assert-dictionary/#dictionary-assert-examples"
  },"48": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-dictionary/",
    
    "relUrl": "/testing/assert-dictionary/"
  },"49": {
    "doc": "Error/Exception Assert",
    "title": "Error Assertion",
    "content": "The error assertion functionality in GdUnit4 is designed to test for runtime errors and exceptions. Due to the fundamental differences between GdScript and C# as programming languages and their integration with the Godot engine, GdUnit4 provides different approaches for error testing in each language. ",
    "url": "/gdUnit4/latest/testing/assert-error/#error-assertion",
    
    "relUrl": "/testing/assert-error/#error-assertion"
  },"50": {
    "doc": "Error/Exception Assert",
    "title": "Why Different Approaches?",
    "content": "GdScript Integration: GdScript is Godot’s native scripting language with built-in error handling mechanisms. GdUnit4 leverages Godot’s internal error reporting system to capture push_error(), push_warning(), and assertion failures through the assert_error() function approach. C# Integration: C# operates as a managed language within Godot’s runtime, where exceptions can occur at multiple levels - both in managed C# code and during Godot engine callbacks. GdUnit4Net provides attribute-based testing that integrates with the .NET exception system and includes specialized monitoring for exceptions that occur within Godot’s main thread execution. Runtime Differences: While GdScript errors are typically reported through Godot’s logging system, C# exceptions follow the .NET exception model. Additionally, many C# exceptions that occur during Godot callbacks (like _Ready(), _Process()) are caught and silently handled by Godot’s CSharpInstanceBridge, making them invisible to normal exception handling - hence the need for specialized monitoring. ",
    "url": "/gdUnit4/latest/testing/assert-error/#why-different-approaches",
    
    "relUrl": "/testing/assert-error/#why-different-approaches"
  },"51": {
    "doc": "Error/Exception Assert",
    "title": "How the Approaches Differ",
    "content": "In GdScript, assert_error tests for Godot runtime errors such as failing asserts, script runtime errors, push_error, and push_warning messages. In C#, GdUnit4Net provides advanced exception handling capabilities that can capture exceptions normally hidden by the Godot runtime. | GdScript | C# | . | GdUnitGodotErrorAssert . | Function | Description | . | is_success | Verifies if the executed code runs without any runtime errors. | . | is_runtime_error | Verifies if the executed code runs into a runtime error. | . | is_push_warning | Verifies if the executed code has a push_warning() used. | . | is_push_error | Verifies if the executed code has a push_error() used. | . | Exception Testing Attributes . | Attribute | Description | . | ThrowsException | Verifies that a test method throws a specific exception type with optional message and location verification. | . | GodotExceptionMonitor | Monitors exceptions that occur during Godot’s main thread execution, capturing exceptions normally hidden by Godot’s runtime. | . | . ",
    "url": "/gdUnit4/latest/testing/assert-error/#how-the-approaches-differ",
    
    "relUrl": "/testing/assert-error/#how-the-approaches-differ"
  },"52": {
    "doc": "Error/Exception Assert",
    "title": "GdScript Error Testing",
    "content": "Testing for Success . To test whether a specific code snippet runs successfully without any errors, you can use the is_success() function with assert_error. Here’s an example: . | GdScript | C# | . | func assert_error(&lt;Callable&gt;).is_success() -&gt; GdUnitGodotErrorAssert: . func test_is_success() -&gt; void: await assert_error(func(): &lt;code to execute&gt;).is_success() . | For C# exception testing, use the [ThrowsException] attribute. See the C# Exception Testing section below. | . Replace &lt;code to execute&gt; with the actual code snippet you want to test. If the code executes without any runtime errors, the test will pass; otherwise, it will fail. Testing for Assert Failed . You can use assert_error to verify that an assertion failure occurs during the execution of your code. This can help you ensure that your asserts are working correctly. Here’s an example: . | GdScript | C# | . | func assert_error(&lt;Callable&gt;).is_runtime_error(&lt;message&gt;) -&gt; GdUnitGodotErrorAssert: . func test_is_assert_failed() -&gt; void: await assert_error(func(): &lt;code to execute&gt;)\\ .is_runtime_error('Assertion failed: this is an assert error') . | For C# exception testing, use the [ThrowsException] attribute. See the C# Exception Testing section below. | . Replace &lt;code to execute&gt; with the code snippet that contains the assertion you want to test. The is_runtime_error function checks whether the expected assertion error message is generated. If the assertion fails as expected, the test will pass; otherwise, it will fail. Testing for Push Warnings and Push Errors . You can also use assert_error to test for specific push warnings and push errors that may occur during the execution of your code. Here are examples for both cases: . | GdScript | C# | . | func assert_error(&lt;Callable&gt;).is_push_warning(&lt;message&gt;) -&gt; GdUnitGodotErrorAssert: func assert_error(&lt;Callable&gt;).is_push_error(&lt;message&gt;) -&gt; GdUnitGodotErrorAssert: . func test_is_push_warning() -&gt; void: await assert_error(func(): &lt;code to execute&gt;)\\ .is_push_warning('this is a push_warning') func test_is_push_error() -&gt; void: await assert_error(func(): &lt;code to execute&gt;)\\ .is_push_error('this is a push_error') . | For C# exception testing, use the [ThrowsException] attribute. See the C# Exception Testing section below. | . Replace &lt;code to execute&gt; with the relevant code snippet that may generate a push warning or a push error. The is_push_warning and is_push_error functions check whether the expected warning or error message is generated during code execution. If the message is generated as expected, the test will pass; otherwise, it will fail. ",
    "url": "/gdUnit4/latest/testing/assert-error/#gdscript-error-testing",
    
    "relUrl": "/testing/assert-error/#gdscript-error-testing"
  },"53": {
    "doc": "Error/Exception Assert",
    "title": "C# Exception Testing with ThrowsException",
    "content": "GdUnit4Net provides the [ThrowsException] attribute for comprehensive exception testing in C#. This attribute allows you to verify that specific exceptions are thrown with optional message and source location verification. Basic Exception Type Testing . Test that a specific exception type is thrown: . [TestCase] [ThrowsException(typeof(ArgumentNullException))] public void TestNullArgumentException() { string? text = null; text!.Length; // Will throw ArgumentNullException } . Exception Message Testing . Verify both the exception type and message: . [TestCase] [ThrowsException(typeof(ArgumentException), \"The argument 'message' is invalid\")] public void TestSpecificExceptionMessage() { throw new ArgumentException(\"The argument 'message' is invalid\"); } . Exception Location Testing . Verify exception type, message, and source location: . [TestCase] [ThrowsException(typeof(TestFailedException), \"Expecting: 'False' but is 'True'\", 31)] public void TestExceptionWithLineNumber() { AssertBool(true).IsFalse(); // This will fail at the specified line } . Full Location Testing . Test with file and line number verification: . [TestCase] [ThrowsException(typeof(InvalidOperationException), \"Operation failed\", \"TestClass.cs\", 42)] public void TestExceptionWithFullLocation() { throw new InvalidOperationException(\"Operation failed\"); } . Multiple Exception Types . You can specify multiple possible exception types for a single test: . [TestCase] [ThrowsException(typeof(ArgumentNullException))] [ThrowsException(typeof(InvalidOperationException))] public void TestMultiplePossibleExceptions() { // Test logic that might throw either exception type } . Timeout Exception Testing . Test for execution timeout exceptions: . [TestCase(Timeout = 100)] [ThrowsException(typeof(ExecutionTimeoutException), \"The execution has timed out after 100ms.\")] public async Task TestTimeoutException() { await Task.Delay(500); // This will exceed the 100ms timeout } . ",
    "url": "/gdUnit4/latest/testing/assert-error/#c-exception-testing-with-throwsexception",
    
    "relUrl": "/testing/assert-error/#c-exception-testing-with-throwsexception"
  },"54": {
    "doc": "Error/Exception Assert",
    "title": "Godot Exception Monitoring",
    "content": "GdUnit4Net provides the [GodotExceptionMonitor] attribute to capture exceptions that occur during Godot’s main thread execution. These exceptions are normally caught and hidden by Godot’s CSharpInstanceBridge.Call method. Method-Level Monitoring . Monitor exceptions for a specific test method: . [TestCase] [GodotExceptionMonitor] [ThrowsException(typeof(InvalidOperationException), \"TestNode '_Ready' failed.\")] public void TestNodeExceptionInReady() { var sceneTree = (SceneTree)Engine.GetMainLoop(); sceneTree.Root.AddChild(new TestNode()); // TestNode throws in _Ready() } . Class-Level Monitoring . Monitor exceptions for all test methods in a class: . [TestSuite] [GodotExceptionMonitor] public class MyGodotTests { [TestCase] public void TestSceneProcessing() { // All test methods automatically monitor Godot exceptions var scene = SceneLoader.Load(\"res://my_scene.tscn\"); } } . Scene Processing Exception Testing . Test exceptions during scene tree processing: . [TestCase] [ThrowsException(typeof(InvalidProgramException), \"Exception during scene processing\")] public async Task TestSceneException() { var sceneRunner = ISceneRunner.Load(\"res://scenes/problematic_scene.tscn\", true); await sceneRunner.SimulateFrames(10); // Exception occurs during frame processing } . Common Use Cases for Godot Exception Monitoring . 💡 Node Lifecycle Exceptions: Capture exceptions in _Ready, _Process, _Input, and other Godot callback methods. 💡 Scene Tree Operations: Monitor exceptions during scene loading, node addition/removal, and tree traversal. 💡 Signal Processing: Detect exceptions in signal handlers and callback functions. 💡 Resource Loading: Catch exceptions during asset loading and resource management. Push Error Testing in CSharp . Test Godot push_error calls as test failures: . [TestCase] [ThrowsException(typeof(TestFailedException), \"Testing Godot PushError\")] public void TestPushErrorHandling() { GD.PushError(\"Testing Godot PushError\"); // Captured as TestFailedException } . ",
    "url": "/gdUnit4/latest/testing/assert-error/#godot-exception-monitoring",
    
    "relUrl": "/testing/assert-error/#godot-exception-monitoring"
  },"55": {
    "doc": "Error/Exception Assert",
    "title": "Key Differences Between GdScript and CSharp",
    "content": "| Feature | GdScript | C# | . | Basic Error Testing | assert_error() function | [ThrowsException] attribute | . | Exception Type Verification | ✅ | ✅ | . | Message Verification | ✅ | ✅ | . | Location Verification | ❌ | ✅ | . | Godot Exception Monitoring | Limited | Advanced with [GodotExceptionMonitor] | . | Multiple Exception Types | ❌ | ✅ | . | Timeout Exception Testing | ❌ | ✅ | . ⚠️ Important: Godot Exception Monitoring with [GodotExceptionMonitor] is only available in the C# API and provides capabilities not available in GdScript testing. ",
    "url": "/gdUnit4/latest/testing/assert-error/#key-differences-between-gdscript-and-csharp",
    
    "relUrl": "/testing/assert-error/#key-differences-between-gdscript-and-csharp"
  },"56": {
    "doc": "Error/Exception Assert",
    "title": "Conclusion",
    "content": "Error assertion capabilities in GdUnit4 provide comprehensive testing for both expected and unexpected error conditions. While GdScript offers fundamental error testing through assert_error, the C# API provides advanced exception handling with precise control over exception verification and Godot runtime exception monitoring. ",
    "url": "/gdUnit4/latest/testing/assert-error/#conclusion",
    
    "relUrl": "/testing/assert-error/#conclusion"
  },"57": {
    "doc": "Error/Exception Assert",
    "title": "Error/Exception Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-error/",
    
    "relUrl": "/testing/assert-error/"
  },"58": {
    "doc": "File Assert",
    "title": "File Assertions",
    "content": "An assertion tool to verify file resources and their properties. | GdScript | C# | . | GdUnitFileAssert . | Function | Description | . | is_file | Verifies the given resource is a file | . | exists | Verifies the given resource exists | . | is_script | Verifies the given resource is a gd script | . | contains_exactly | Verifies the given resource contains the content | . | Not yet implemented! . | . ",
    "url": "/gdUnit4/latest/testing/assert-file/#file-assertions",
    
    "relUrl": "/testing/assert-file/#file-assertions"
  },"59": {
    "doc": "File Assert",
    "title": "File Assert Examples",
    "content": "is_file . Verifies the given resource is a file that can be opened for reading. | GdScript | C# | . | func assert_file(&lt;current&gt;).is_file() -&gt; GdUnitFileAssert . # this assertion succeeds if the file exists and can be opened assert_file(\"res://test.gd\").is_file() # this assertion fails if the file doesn't exist or can't be opened assert_file(\"res://nonexistent.gd\").is_file() assert_file(\"res://some_directory/\").is_file() . | Not yet implemented! . | . exists . Verifies the given resource exists in the file system. | GdScript | C# | . | func assert_file(&lt;current&gt;).exists() -&gt; GdUnitFileAssert . # this assertion succeeds if the file exists assert_file(\"res://test.gd\").exists() # this assertion fails if the file doesn't exist assert_file(\"res://nonexistent.gd\").exists() . | Not yet implemented! . | . is_script . Verifies the given resource is a valid GDScript file. | GdScript | C# | . | func assert_file(&lt;current&gt;).is_script() -&gt; GdUnitFileAssert . # this assertion succeeds if the file is a valid GDScript assert_file(\"res://test.gd\").is_script() # this assertion fails if the file is not a GDScript assert_file(\"res://image.png\").is_script() assert_file(\"res://data.json\").is_script() # this assertion also fails if the file doesn't exist assert_file(\"res://nonexistent.gd\").is_script() . | Not yet implemented! . | . contains_exactly . Verifies the given GDScript resource contains exactly the specified content as an array of lines. | GdScript | C# | . | func assert_file(&lt;current&gt;).contains_exactly(&lt;expected_rows&gt; :Array) -&gt; GdUnitFileAssert . # this assertion succeeds if the script contains exactly these lines assert_file(\"res://test.gd\").contains_exactly([ \"extends Node\", \"\", \"func _ready():\", \"\\tprint(\\\"Hello World\\\")\" ]) # this assertion fails if the content doesn't match exactly assert_file(\"res://test.gd\").contains_exactly([ \"extends Node\", \"func _ready():\", \"\\tprint(\\\"Hello World\\\")\" ]) # missing empty line # this assertion also fails if the file is not a GDScript assert_file(\"res://data.json\").contains_exactly([\"some content\"]) . | Not yet implemented! . | . ",
    "url": "/gdUnit4/latest/testing/assert-file/#file-assert-examples",
    
    "relUrl": "/testing/assert-file/#file-assert-examples"
  },"60": {
    "doc": "File Assert",
    "title": "File Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-file/",
    
    "relUrl": "/testing/assert-file/"
  },"61": {
    "doc": "Float/Double Assert",
    "title": "Float/Double Assertions",
    "content": "An assertion tool to verify float values. | GdScript | C# | . | GdUnitFloatAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | is_equal_approx | Verifies that the current and expected value are approximately equal. | . | is_less | Verifies that the current value is less than the given one. | . | is_less_equal | Verifies that the current value is less than or equal the given one. | . | is_greater | Verifies that the current value is greater than the given one. | . | is_greater_equal | Verifies that the current value is greater than or equal the given one. | . | is_negative | Verifies that the current value is negative. | . | is_not_negative | Verifies that the current value is not negative. | . | is_zero | Verifies that the current value is equal to zero. | . | is_not_zero | Verifies that the current value is not equal to zero. | . | is_in | Verifies that the current value is in the given set of values. | . | is_not_in | Verifies that the current value is not in the given set of values. | . | is_between | Verifies that the current value is between the given boundaries (inclusive). | . | INumberAssert&lt;float&gt; . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsEqualApprox | Verifies that the current and expected value are approximately equal. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsNegative | Verifies that the current value is negative. | . | IsNotNegative | Verifies that the current value is not negative. | . | IsZero | Verifies that the current value is equal to zero. | . | IsNotZero | Verifies that the current value is not equal to zero. | . | IsIn | Verifies that the current value is in the given set of values. | . | IsNotIn | Verifies that the current value is not in the given set of values. | . | IsNetween | Verifies that the current value is between the given boundaries (inclusive). | . | . ",
    "url": "/gdUnit4/latest/testing/assert-float/#floatdouble-assertions",
    
    "relUrl": "/testing/assert-float/#floatdouble-assertions"
  },"62": {
    "doc": "Float/Double Assert",
    "title": "Float Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_equal(23.2) # this assertion fails because 23.2 are not equal to 23.4 assert_float(23.2).is_equal(23.4) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23.2).IsEqual(23.2); // this assertion fails because 23.2 are not equal to 23.4 AssertThat(23.2).IsEqual(23.4); . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_not_equal(23.4) # this assertion fails because 23.2 are equal to 23.2 assert_float(23.2).is_not_equal(23.2) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23.2).IsNotEqual(23.4); // this assertion fails because 23.2 are equal to 23.2 AssertThat(23.2).IsNotEqual(23.2); . | . is_equal_approx . Verifies that the current and expected value are approximately equal. | GdScript | C# | . | func is_equal_approx(&lt;expected&gt;, &lt;approx&gt;) -&gt; GdUnitFloatAssert: . # this assertion succeeds assert_float(23.19).is_equal_approx(23.2, 0.01) assert_float(23.20).is_equal_approx(23.2, 0.01) assert_float(23.21).is_equal_approx(23.2, 0.01) # this assertion fails because 23.18 and 23.22 are not equal approximately to 23.2 +/- 0.01 assert_float(23.18).is_equal_approx(23.2, 0.01) assert_float(23.22).is_equal_approx(23.2, 0.01) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsEqualApprox(&lt;expected&gt;, &lt;approx&gt;) . // this assertion succeeds AssertThat(23.19).IsEqualApprox(23.2, 0.01); AssertThat(23.20).IsEqualApprox(23.2, 0.01); AssertThat(23.21).IsEqualApprox(23.2, 0.01); // this assertion fails because 23.18 and 23.22 are not equal approximately to 23.2 +/- 0.01 AssertThat(23.18).IsEqualApprox(23.2, 0.01); AssertThat(23.22).IsEqualApprox(23.2, 0.01); . | . is_less . Verifies that the current value is less than the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_less(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_less(23.4) assert_float(23.2).is_less(26.0) # this assertion fails because 23.2 is not less than 23.2 assert_float(23.2).is_less(23.2) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsLess(&lt;expected&gt;) . // this assertion succeeds AssertThat(23.2).IsLess(23.4); AssertThat(23.2).IsLess(26.0); // this assertion fails because 23.2 is not less than 23.2 AssertThat(23.2).IsLess(23.2); . | . is_less_equal . Verifies that the current value is less than or equal the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_less_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_less_equal(23.4) assert_float(23.2).is_less_equal(23.2) # this assertion fails because 23.2 is not less than or equal to 23.1 assert_float(23.2).is_less_equal(23.1) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsLessEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23.2).IsLessEqual(23.4); AssertThat(23.2).IsLessEqual(23.2); // this assertion fails because 23.2 is not less than or equal to 23.1 AssertThat(23.2).IsLessEqual(23.1); . | . is_greater . Verifies that the current value is greater than the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_greater(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_greater(23.0) assert_float(23.4).is_greater(22.1) # this assertion fails because 23.2 is not greater than 23.2 assert_float(23.2).is_greater(23.2) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsGreater(&lt;expected&gt;) . // this assertion succeeds AssertThat(23.2).IsGreater(23.0) AssertThat(23.4).IsGreater(22.1) // this assertion fails because 23.2 is not greater than 23.2 AssertThat(23.2).IsGreater(23.2) . | . is_greater_equal . Verifies that the current value is greater than or equal the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_greater_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_greater_equal(20.2) assert_float(23.2).is_greater_equal(23.2) # this assertion fails because 23.2 is not greater than 23.3 assert_float(23.2).is_greater_equal(23.3) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsGreaterEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23.2).IsGreaterEqual(20.2); AssertThat(23.2).IsGreaterEqual(23.2); // this assertion fails because 23.2 is not greater than 23.3 AssertThat(23.2).IsGreaterEqual(23.3); . | . is_negative . Verifies that the current value is negative. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_negative() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(-13.2).is_negative() # this assertion fails because is not negative assert_float(13.2).is_negative() . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsNegative() . // this assertion succeeds AssertThat(-13.2).IsNegative(); // this assertion fails because is not negative AssertThat(13.2).IsNegative(); . | . is_not_negative . Verifies that the current value is not negative. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_negative() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(13.2).is_not_negative() # this assertion fails because is negative assert_float(-13.2).is_not_negative() . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsNotNegative() . // this assertion succeeds AssertThat(13.2).IsNotNegative(); // this assertion fails because is negative AssertThat(-13.2).IsNotNegative(); . | . is_zero . Verifies that the current value is equal to zero. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_zero() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(0.0).is_zero() # this assertion fail because the value is not zero assert_float(0.00001).is_zero() . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsZero() . // this assertion succeeds AssertThat(0.0).IsZero(); // this assertion fail because the value is not zero AssertThat(0.00001).IsZero(); . | . is_not_zero . Verifies that the current value is not equal to zero. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_zero() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(0.00001).is_not_zero() # this assertion fail because the value is not zero assert_float(0.000001).is_not_zero() . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsNotZero() . // this assertion succeeds AssertThat(0.00001).IsNotZero(); // this assertion fail because the value is not zero AssertThat(0.000001).IsNotZero(); . | . is_in . Verifies that the current value is in the given set of values. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_in(&lt;expected&gt; :Array) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(5.2).is_in([5.1, 5.2, 5.3, 5.4]) # this assertion fail because 5.5 is not in [5.1, 5.2, 5.3, 5.4] assert_float(5.5).is_in([5.1, 5.2, 5.3, 5.4]) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsIn([]&lt;expected&gt;) . // this assertion succeeds AssertThat(5.2).IsIn(5.1, 5.2, 5.3, 5.4); // this assertion fail because 5.5 is not in [5.1, 5.2, 5.3, 5.4] AssertThat(5.5).IsIn(5.1, 5.2, 5.3, 5.4); . | . is_not_in . Verifies that the current value is not in the given set of values. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_in(&lt;expected&gt; :Array) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(5.2).is_not_in([5.1, 5.3, 5.4]) # this assertion fail because 5.2 is not in [5.1, 5.2, 5.3, 5.4] assert_float(5.2).is_not_in([5.1, 5.2, 5.3, 5.4]) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsNotIn([]&lt;expected&gt;) . // this assertion succeeds AssertThat(5.2).IsNotIn(5.1, 5.3, 5.4); // this assertion fail because 5.2 is not in [5.1, 5.2, 5.3, 5.4] AssertThat(5.2).IsNotIn(5.1, 5.2, 5.3, 5.4); . | . is_between . Verifies that the current value is between the given boundaries (inclusive). | GdScript | C# | . | func assert_float(&lt;current&gt;).is_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(-20.0).is_between(-20.0, 20.9) assert_float(10.0).is_between(-20.0, 20.9) assert_float(20.9).is_between(-20.0, 20.9) # this assertion fail because the value is -10.0 and not between -9 and 0 assert_float(-10.0).is_between(-9.0, 0.0) . | public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsBetween(&lt;from&gt;, &lt;to&gt;) . // this assertion succeeds AssertThat(-20.0).IsBetween(-20.0, 20.9); AssertThat(10.0).IsBetween(-20.0, 20.9); AssertThat(20.9).IsBetween(-20.0, 20.9); // this assertion fail because the value is -10.0 and not between -9 and 0 AssertThat(-10.0).IsBetween(-9.0, 0.0); . | . ",
    "url": "/gdUnit4/latest/testing/assert-float/#float-assert-examples",
    
    "relUrl": "/testing/assert-float/#float-assert-examples"
  },"63": {
    "doc": "Float/Double Assert",
    "title": "Float/Double Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-float/",
    
    "relUrl": "/testing/assert-float/"
  },"64": {
    "doc": "Function/Method Assert",
    "title": "Function/Method Assertions",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-function/#functionmethod-assertions",
    
    "relUrl": "/testing/assert-function/#functionmethod-assertions"
  },"65": {
    "doc": "Function/Method Assert",
    "title": "!Deprecated!",
    "content": "An assertion tool that waits until a certain time for an expected function return value. When the timeout is reached, the assertion fails with a timeout error. The default timeout of 2s can be overridden by wait_until() . | GdScript | C# | . | GdUnitFuncAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to expected one. | . | is_not_equal | Verifies that the current value is not equal to expected one. | . | is_true | Verifies that the current value is true. | . | is_false | Verifies that the current value is false. | . | wait_until | Sets the timeout in ms to wait the function returnd the expected value. | . | Not supported! . | . ",
    "url": "/gdUnit4/latest/testing/assert-function/#deprecated",
    
    "relUrl": "/testing/assert-function/#deprecated"
  },"66": {
    "doc": "Function/Method Assert",
    "title": "Function/Method Assert Examples",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-function/#functionmethod-assert-examples",
    
    "relUrl": "/testing/assert-function/#functionmethod-assert-examples"
  },"67": {
    "doc": "Function/Method Assert",
    "title": "is_equal",
    "content": "Waits until the return value of the function is equal to the expected value until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_equal(&lt;expected&gt;) -&gt; GdUnitAssert . # waits until get_count() returns 9 or fails after default timeout of 2s await assert_func(self, \"get_count\").is_equal(9.0) . ",
    "url": "/gdUnit4/latest/testing/assert-function/#is_equal",
    
    "relUrl": "/testing/assert-function/#is_equal"
  },"68": {
    "doc": "Function/Method Assert",
    "title": "is_not_equal",
    "content": "Waits until the return value of the function is NOT equal to the expected value until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_not_equal(&lt;expected&gt;) -&gt; GdUnitAssert . # waits until get_state() returns different value than \"idle\" or fails after default timeout of 2s await assert_func(self, \"get_state\").is_not_equal(\"idle\") . ",
    "url": "/gdUnit4/latest/testing/assert-function/#is_not_equal",
    
    "relUrl": "/testing/assert-function/#is_not_equal"
  },"69": {
    "doc": "Function/Method Assert",
    "title": "is_null",
    "content": "Waits until the return value of the function is NULL until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_null() -&gt; GdUnitAssert . # waits until get_parent() returns NULL or fails after default timeout of 2s await assert_func(self, \"get_parent\").is_null() . ",
    "url": "/gdUnit4/latest/testing/assert-function/#is_null",
    
    "relUrl": "/testing/assert-function/#is_null"
  },"70": {
    "doc": "Function/Method Assert",
    "title": "is_not_null",
    "content": "Waits until the return value of the function is NOT NULL until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_not_null() -&gt; GdUnitAssert . # waits until get_parent() returns not NULL or fails after default timeout of 2s await assert_func(self, \"get_parent\").is_not_null() . ",
    "url": "/gdUnit4/latest/testing/assert-function/#is_not_null",
    
    "relUrl": "/testing/assert-function/#is_not_null"
  },"71": {
    "doc": "Function/Method Assert",
    "title": "is_true",
    "content": "Waits until the return value of the function is true until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_true() -&gt; GdUnitAssert . # waits until has_parent() returns true or fails after default timeout of 2s await assert_func(self, \"has_parent\").is_true() . ",
    "url": "/gdUnit4/latest/testing/assert-function/#is_true",
    
    "relUrl": "/testing/assert-function/#is_true"
  },"72": {
    "doc": "Function/Method Assert",
    "title": "is_false",
    "content": "Waits until the return value of the function is false until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_false() -&gt; GdUnitAssert . # waits until has_parent() returns false or fails after default timeout of 2s await assert_func(self, \"has_parent\").is_false() . ",
    "url": "/gdUnit4/latest/testing/assert-function/#is_false",
    
    "relUrl": "/testing/assert-function/#is_false"
  },"73": {
    "doc": "Function/Method Assert",
    "title": "wait_until",
    "content": "Sets the timeout in ms to wait the function returnd the expected value, if the time over a failure is emitted . func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).wait_until(&lt;timeout&gt;) -&gt; GdUnitFuncAssert . # waits until has_parent() returns false or fails after custom timeout of 5s await assert_func(self, \"has_parent\").wait_until(5000).is_false() . ",
    "url": "/gdUnit4/latest/testing/assert-function/#wait_until",
    
    "relUrl": "/testing/assert-function/#wait_until"
  },"74": {
    "doc": "Function/Method Assert",
    "title": "Function/Method Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-function/",
    
    "relUrl": "/testing/assert-function/"
  },"75": {
    "doc": "Integer Assert",
    "title": "Integer Assertions",
    "content": "An assertion tool to verify integer values. | GdScript | C# | . | GdUnitIntAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | is_less | Verifies that the current value is less than the given one. | . | is_less_equal | Verifies that the current value is less than or equal the given one. | . | is_greater | Verifies that the current value is greater than the given one. | . | is_greater_equal | Verifies that the current value is greater than or equal the given one. | . | is_even | Verifies that the current value is even. | . | is_odd | Verifies that the current value is odd. | . | is_negative | Verifies that the current value is negative. | . | is_not_negative | Verifies that the current value is not negative. | . | is_zero | Verifies that the current value is equal to zero. | . | is_not_zero | Verifies that the current value is not equal to zero. | . | is_in | Verifies that the current value is in the given set of values. | . | is_not_in | Verifies that the current value is not in the given set of values. | . | is_between | Verifies that the current value is between the given boundaries (inclusive). | . | INumberAssert&lt;int&gt; . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsEven | Verifies that the current value is even. | . | IsOdd | Verifies that the current value is odd. | . | IsNegative | Verifies that the current value is negative. | . | IsNotNegative | Verifies that the current value is not negative. | . | IsZero | Verifies that the current value is equal to zero. | . | IsNotZero | Verifies that the current value is not equal to zero. | . | IsIn | Verifies that the current value is in the given set of values. | . | IsNotIn | Verifies that the current value is not in the given set of values. | . | IsBetween | Verifies that the current value is between the given boundaries (inclusive). | . | . ",
    "url": "/gdUnit4/latest/testing/assert-integer/#integer-assertions",
    
    "relUrl": "/testing/assert-integer/#integer-assertions"
  },"76": {
    "doc": "Integer Assert",
    "title": "Integer Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_equal(23) # this assertion fails because 23 are not equal to 42 assert_int(23).is_equal(42) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsEqual(23); // this assertion fails because 23 are not equal to 42 AssertThat(23).IsEqual(42); . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_not_equal(42) # this assertion fails because 23 are equal to 23 assert_int(23).is_not_equal(23) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsNotEqual(42); // this assertion fails because 23 are equal to 23 AssertThat(23).IsNotEqual(23); . | . is_less . Verifies that the current value is less than the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_less(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_less(42) assert_int(23).is_less(24) # this assertion fails because 23 is not less than 23 assert_int(23).is_less(23) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsLess(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsLess(42); AssertThat(23).IsLess(24); // this assertion fails because 23 is not less than 23 AssertThat(23).IsLess(23); . | . is_less_equal . Verifies that the current value is less than or equal the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_less_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_less_equal(42) assert_int(23).is_less_equal(23) # this assertion fails because 23 is not less than or equal to 22 assert_int(23).is_less_equal(22) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsLessEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsLessEqual(42); AssertThat(23).IsLessEqual(23); // this assertion fails because 23 is not less than or equal to 22 AssertThat(23).IsLessEqual(22); . | . is_greater . Verifies that the current value is greater than the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_greater(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_greater(20) assert_int(23).is_greater(22) # this assertion fails because 23 is not greater than 23 assert_int(23).is_greater(23) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsGreater(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsGreater(20); AssertThat(23).IsGreater(22); // this assertion fails because 23 is not greater than 23 AssertThat(23).IsGreater(23); . | . is_greater_equal . Verifies that the current value is greater than or equal the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_greater_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . assert_int(23).is_greater_equal(20) assert_int(23).is_greater_equal(23) # this assertion fails because 23 is not greater than 23 assert_int(23).is_greater_equal(24) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsGreaterEqual(&lt;expected&gt;) . AssertThat(23).IsGreaterEqual(20) AssertThat(23).IsGreaterEqual(23) // this assertion fails because 23 is not greater than 23 AssertThat(23).IsGreaterEqual(24) . | . is_even . Verifies that the current value is even. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_even() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(12).is_even() # this assertion fail because the value '13' is not even assert_int(13).is_even() . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsEven() . // this assertion succeeds AssertThat(12).IsEven(); // this assertion fail because the value '13' is not even AssertThat(13).IsEven(); . | . is_odd . Verifies that the current value is odd. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_odd() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(13).is_odd() # this assertion fail because the value '12' is even assert_int(12).is_odd() . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsOdd() . // this assertion succeeds AssertThat(13).IsOdd(); // this assertion fail because the value '12' is even AssertThat(12).IsOdd(); . | . is_negative . Verifies that the current value is negative. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_negative() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(-13).is_negative() # this assertion fail because the value '13' is positive assert_int(13).is_negative() . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsNegative() . // this assertion succeeds AssertThat(-13).IsNegative(); // this assertion fail because the value '13' is positive AssertThat(13).IsNegative(); . | . is_not_negative . Verifies that the current value is not negative. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_negative() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(13).is_not_negative() # this assertion fail because the value '-13' is negative assert_int(-13).is_not_negative() . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsNotNegative() . // this assertion succeeds AssertThat(13).IsNotNegative(); // this assertion fail because the value '-13' is negative AssertThat(-13).IsNotNegative(); . | . is_zero . Verifies that the current value is equal to zero. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_zero() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(0).is_zero() # this assertion fail because the value is not zero assert_int(1).is_zero() . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsZero() . // this assertion succeeds AssertThat(0).IsZero(); // this assertion fail because the value is not zero AssertThat(1).IsZero(); . | . is_not_zero . Verifies that the current value is not equal to zero. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_zero() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(1).is_not_zero() # this assertion fail because the value is zero assert_int(0).is_not_zero() . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsNotZero() . // this assertion succeeds AssertThat(1).IsNotZero(); // this assertion fail because the value is zero AssertThat(0).IsNotZero(); . | . is_in . Verifies that the current value is in the given set of values. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_in(&lt;expected&gt; :Array) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(5).is_in([3, 4, 5, 6]) # this assertion fail because 7 is not in [3, 4, 5, 6] assert_int(7).is_in([3, 4, 5, 6]) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsIn([] &lt;expected&gt;) . // this assertion succeeds AssertThat(5).IsIn(3, 4, 5, 6); // this assertion fail because 7 is not in [3, 4, 5, 6] AssertThat(7).IsIn(3, 4, 5, 6); . | . is_not_in . Verifies that the current value is not in the given set of values. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_in(&lt;expected&gt; :Array) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(5).is_not_in([3, 4, 6, 7]) # this assertion fail because 5 is in [3, 4, 5, 6] assert_int(5).is_not_in([3, 4, 5, 6]) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsNotIn([] &lt;expected&gt;) . // this assertion succeeds AssertThat(5).IsNotIn(3, 4, 6, 7); // this assertion fail because 5 is in [3, 4, 5, 6] AssertThat(5).IsNotIn(3, 4, 5, 6); . | . is_between . Verifies that the current value is between the given boundaries (inclusive). | GdScript | C# | . | func assert_int(&lt;current&gt;).is_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_between(20, 30) assert_int(23).is_between(23, 24) # this assertion fail because the value is zero and not between 1 and 9 assert_int(0).is_between(1, 9) . | INumberAssert&lt;int&gt; AssertThat(&lt;current&gt;).IsBetween(&lt;from&gt;, &lt;to&gt;) . // this assertion succeeds AssertThat(23).IsBetween(20, 30); AssertThat(23).IsBetween(23, 24); // this assertion fail because the value is zero and not between 1 and 9 AssertThat(0).IsBetween(1, 9); . | . ",
    "url": "/gdUnit4/latest/testing/assert-integer/#integer-assert-examples",
    
    "relUrl": "/testing/assert-integer/#integer-assert-examples"
  },"77": {
    "doc": "Integer Assert",
    "title": "Integer Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-integer/",
    
    "relUrl": "/testing/assert-integer/"
  },"78": {
    "doc": "Number Assert",
    "title": "Number Assertions (C# only)",
    "content": "An assertion tool to verify number values. Supported numbers are sbyte, byte, short, ushort, int, uint, long, ulong, float, double, decimal . INumberAssert&lt;V&gt; . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsEqualApprox | Verifies that the current and expected value are approximately equal. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsEven | Verifies that the current value is even. | . | IsOdd | Verifies that the current value is odd. | . | IsNegative | Verifies that the current value is negative. | . | IsNotNegative | Verifies that the current value is not negative. | . | IsZero | Verifies that the current value is equal to zero. | . | IsNotZero | Verifies that the current value is not equal to zero. | . | IsIn | Verifies that the current value is in the given set of values. | . | IsNotIn | Verifies that the current value is not in the given set of values. | . | IsBetween | Verifies that the current value is between the given boundaries (inclusive). | . ",
    "url": "/gdUnit4/latest/testing/assert-number/#number-assertions-c-only",
    
    "relUrl": "/testing/assert-number/#number-assertions-c-only"
  },"79": {
    "doc": "Number Assert",
    "title": "NumberAssert Examples",
    "content": "IsEqual . Verifies that the current value is equal to the given one. INumberAssert AssertThat(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsEqual(23); // this assertion fails because 23 are not equal to 42 AssertThat(23).IsEqual(42); . IsNotEqual . Verifies that the current value is not equal to the given one. INumberAssert AssertThat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsNotEqual(42); // this assertion fails because 23 are equal to 23 AssertThat(23).IsNotEqual(23); . IsEqualApprox . Verifies that the current and expected value are approximately equal. public static INumberAssert&lt;double&gt; AssertThat(&lt;current&gt;).IsEqualApprox(&lt;expected&gt;, &lt;approx&gt;) . // this assertion succeeds AssertThat(23.19).IsEqualApprox(23.2, 0.01); AssertThat(23.20).IsEqualApprox(23.2, 0.01); AssertThat(23.21).IsEqualApprox(23.2, 0.01); // this assertion fails because 23.18 and 23.22 are not equal approximately to 23.2 +/- 0.01 AssertThat(23.18).IsEqualApprox(23.2, 0.01); AssertThat(23.22).IsEqualApprox(23.2, 0.01); . IsLess . Verifies that the current value is less than the given one. INumberAssert AssertThat(&lt;current&gt;).IsLess(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsLess(42); AssertThat(23).IsLess(24); // this assertion fails because 23 is not less than 23 AssertThat(23).IsLess(23); . IsLessEqual . Verifies that the current value is less than or equal the given one. INumberAssert AssertThat(&lt;current&gt;).IsLessEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsLessEqual(42); AssertThat(23).IsLessEqual(23); // this assertion fails because 23 is not less than or equal to 22 AssertThat(23).IsLessEqual(22); . IsGreater . Verifies that the current value is greater than the given one. INumberAssert AssertThat(&lt;current&gt;).IsGreater(&lt;expected&gt;) . // this assertion succeeds AssertThat(23).IsGreater(20); AssertThat(23).IsGreater(22); // this assertion fails because 23 is not greater than 23 AssertThat(23).IsGreater(23); . IsGreaterEqual . Verifies that the current value is greater than or equal the given one. INumberAssert AssertThat(&lt;current&gt;).IsGreaterEqual(&lt;expected&gt;) . AssertThat(23).IsGreaterEqual(20) AssertThat(23).IsGreaterEqual(23) // this assertion fails because 23 is not greater than 23 AssertThat(23).IsGreaterEqual(24) . IsEven . Verifies that the current value is even. INumberAssert AssertThat(&lt;current&gt;).IsEven() . // this assertion succeeds AssertThat(12).IsEven(); // this assertion fail because the value '13' is not even AssertThat(13).IsEven(); . IsOdd . Verifies that the current value is odd. INumberAssert AssertThat(&lt;current&gt;).IsOdd() . // this assertion succeeds AssertThat(13).IsOdd(); // this assertion fail because the value '12' is even AssertThat(12).IsOdd(); . IsNegative . Verifies that the current value is negative. INumberAssert AssertThat(&lt;current&gt;).IsNegative() . // this assertion succeeds AssertThat(-13).IsNegative(); // this assertion fail because the value '13' is positive AssertThat(13).IsNegative(); . IsNotNegative . Verifies that the current value is not negative. INumberAssert AssertThat(&lt;current&gt;).IsNotNegative() . // this assertion succeeds AssertThat(13).IsNotNegative(); // this assertion fail because the value '-13' is negative AssertThat(-13).IsNotNegative(); . IsZero . Verifies that the current value is equal to zero. INumberAssert AssertThat(&lt;current&gt;).IsZero() . // this assertion succeeds AssertThat(0).IsZero(); // this assertion fail because the value is not zero AssertThat(1).IsZero(); . IsNotZero . Verifies that the current value is not equal to zero. INumberAssert AssertThat(&lt;current&gt;).IsNotZero() . // this assertion succeeds AssertThat(1).IsNotZero(); // this assertion fail because the value is zero AssertThat(0).IsNotZero(); . IsIn . Verifies that the current value is in the given set of values. INumberAssert AssertThat(&lt;current&gt;).IsIn([] &lt;expected&gt;) . // this assertion succeeds AssertThat(5).IsIn(3, 4, 5, 6); // this assertion fail because 7 is not in [3, 4, 5, 6] AssertThat(7).IsIn(3, 4, 5, 6); . IsNotIn . Verifies that the current value is not in the given set of values. INumberAssert AssertThat(&lt;current&gt;).IsNotIn([] &lt;expected&gt;) . // this assertion succeeds AssertThat(5).IsNotIn(3, 4, 6, 7); // this assertion fail because 5 is in [3, 4, 5, 6] AssertThat(5).IsNotIn(3, 4, 5, 6); . IsBetween . Verifies that the current value is between the given boundaries (inclusive). INumberAssert AssertThat(&lt;current&gt;).IsBetween(&lt;from&gt;, &lt;to&gt;) . // this assertion succeeds AssertThat(23).IsBetween(20, 30); AssertThat(23).IsBetween(23, 24); // this assertion fail because the value is zero and not between 1 and 9 AssertThat(0).IsBetween(1, 9); . ",
    "url": "/gdUnit4/latest/testing/assert-number/#numberassert-examples",
    
    "relUrl": "/testing/assert-number/#numberassert-examples"
  },"80": {
    "doc": "Number Assert",
    "title": "Number Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-number/",
    
    "relUrl": "/testing/assert-number/"
  },"81": {
    "doc": "Object Assert",
    "title": "Object Assertions",
    "content": "An assertion tool to verify Objects. | GdScript | C# | . | GdUnitObjectAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to expected one. | . | is_not_equal | Verifies that the current value is not equal to expected one. | . | is_same | Verifies that the current value is the same as the given one. | . | is_not_same | Verifies that the current value is not the same as the given one. | . | is_instanceof | Verifies that the current value is an instance of the given type. | . | is_not_instanceof | Verifies that the current value is not an instance of the given type. | . | IObjectAssert . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to expected one. | . | IsNotRqual | Verifies that the current value is not equal to expected one. | . | IsSame | Verifies that the current value is the same as the given one. | . | IsNotSame | Verifies that the current value is not the same as the given one. | . | IsInstanceOf | Verifies that the current value is an instance of the given type. | . | IsNotInstanceOf | Verifies that the current value is not an instance of the given type. | . | . ",
    "url": "/gdUnit4/latest/testing/assert-object/#object-assertions",
    
    "relUrl": "/testing/assert-object/#object-assertions"
  },"82": {
    "doc": "Object Assert",
    "title": "Object Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to expected one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Mesh.new()).is_equal(Mesh.new()) # should fail because the current is an Mesh and we expect equal to a Skin assert_object(Mesh.new()).is_equal(Skin.new()) . | public static IObjectAssert AssertThat(&lt;current&gt;).IsEqual(&lt;expected&gt;); . // this assertion succeeds AssertThat(new Godot.Mesh()).IsEqual(new Godot.Mesh()); // should fail because the current is an Mesh and we expect equal to a Skin AssertThat(new Godot.Mesh()).IsEqual(new Godot.Skin()); . | . is_not_equal . Verifies that the current value is not equal to expected one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Mesh.new()).is_not_equal(Skin.new()) # should fail because the current is an Mesh and we expect not equal to a Mesh assert_object(Mesh.new()).is_not_equal(Mesh.new()) . | public static IObjectAssert AssertThat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;); . // this assertion succeeds AssertThat(new Godot.Mesh()).IsNotEqual(new Godot.Skin()); // should fail because the current is an Mesh and we expect not equal to a Mesh AssertThat(new Godot.Mesh()).IsNotEqual(new Godot.Mesh()); . | . is_null . Verifies that the current value is null. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_null() -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(null).is_null() # should fail because it the current value is an Mesh and not null assert_object(Mesh.new()).is_null() . | public static IObjectAssert AssertThat(&lt;current&gt;).IsNull(); . // this assertion succeeds AssertThat(null).IsNull(); // should fail because it the current value is an Mesh and not null AssertThat(new Godot.Mesh()).IsNull(); . | . is_not_null . Verifies that the current value is not null. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_null() -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Mesh.new()).is_not_null() # should fail because the current value is null assert_object(null).is_not_null() . | public static IObjectAssert AssertThat(&lt;current&gt;).IsNotNull(); . // this assertion succeeds AssertThat(new Godot.Mesh()).IsNotNull(); // should fail because the current value is null AssertThat(null).IsNotNull(); . | . is_same . Verifies that the current value is the same as the given one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_same(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds var obj1 = Node.new() var obj2 = obj1 var obj3 = obj1.duplicate() assert_object(obj1).is_same(obj1) assert_object(obj1).is_same(obj2) assert_object(obj2).is_same(obj1) # should fail because because the current is not same instance as expected value assert_object(null).is_same(obj1) assert_object(obj1).is_same(obj3) assert_object(obj3).is_same(obj1) assert_object(obj3).is_same(obj2) . | public static IObjectAssert AssertThat(&lt;current&gt;).IsSame(); . // this assertion succeeds var obj1 = new Godot.Node(); var obj2 = obj1; var obj3 = obj1.Duplicate(); AssertThat(obj1).IsSame(obj1); AssertThat(obj1).IsSame(obj2); AssertThat(obj2).IsSame(obj1); // should fail because because the current is not same instance as expected value AssertThat(null).IsSame(obj1); AssertThat(obj1).IsSame(obj3); AssertThat(obj3).IsSame(obj1); AssertThat(obj3).IsSame(obj2); . | . is_not_same . Verifies that the current value is not the same as the given one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_same(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds var obj1 = Node.new() var obj2 = obj1 var obj3 = obj1.duplicate() assert_object(null).is_not_same(obj1) assert_object(obj1).is_not_same(obj3) assert_object(obj3).is_not_same(obj1) assert_object(obj3).is_not_same(obj2) # should fail because because the current is the same instance as expected value assert_object(obj1).is_not_same(obj1) assert_object(obj1).is_not_same(obj2) assert_object(obj2).is_not_same(obj1) . | public static IObjectAssert AssertThat(&lt;current&gt;).IsNotSame(); . // this assertion succeeds var obj1 = new Godot.Node(); var obj2 = obj1; var obj3 = obj1.Duplicate(); AssertThat(null).IsNotSame(obj1); AssertThat(obj1).IsNotSame(obj3); AssertThat(obj3).IsNotSame(obj1); AssertThat(obj3).IsNotSame(obj2); // should fail because because the current is the same instance as expected value AssertThat(obj1).IsNotSame(obj1) AssertThat(obj1).IsNotSame(obj2) AssertThat(obj2).IsNotSame(obj1) . | . is_instanceof . Verifies that the current value is an instance of the given type. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_instanceof(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Path.new()).is_instanceof(Node) # should fail because the current is not a instance of class Tree assert_object(Path.new()).is_instanceof(Tree) . | public static IObjectAssert AssertThat(&lt;current&gt;).IsInstanceOf&lt;Type&gt;(); . // this assertion succeeds AssertThat(new Godot.Path()).IsInstanceOf&lt;Node&gt;(); // should fail because the current is not a instance of class Tree AssertThat(new Godot.Path()).IsInstanceOf&lt;Tree&gt;(); . | . is_not_instanceof . Verifies that the current value is not an instance of the given type. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_instanceof(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Path.new()).is_not_instanceof(Tree) # should fail because Path is a instance of class Node (Path &lt; Spatial &lt; Node &lt; Object) assert_object(Path.new()).is_not_instanceof(Node) . | public static IObjectAssert AssertThat(&lt;current&gt;).IsNotInstanceOf&lt;Type&gt;(); . // this assertion succeeds AssertThat(new Godot.Path()).IsNotInstanceOf&lt;Tree&gt;(); // should fail because Path is a instance of class Node (Path &lt; Spatial &lt; Node &lt; Object) AssertThat(new Godot.Path()).IsNotInstanceOf&lt;Node&gt;(); . | . ",
    "url": "/gdUnit4/latest/testing/assert-object/#object-assert-examples",
    
    "relUrl": "/testing/assert-object/#object-assert-examples"
  },"83": {
    "doc": "Object Assert",
    "title": "Object Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-object/",
    
    "relUrl": "/testing/assert-object/"
  },"84": {
    "doc": "Signal Assert",
    "title": "Signal Assertions",
    "content": "An Assertion Tool to verify for emitted signals until a certain time. When the timeout is reached, the assertion fails with a timeout error. The default timeout of 2s can be overridden by wait_until(&lt;time in ms&gt;) To watch for signals emitted during the test execution you have to use in addition the monitor_signal tool. | GdScript | C# | . | GdUnitSignalAssert . | Function | Description | . | is_emitted | Verifies that given signal is emitted until waiting time. | . | is_not_emitted | Verifies that given signal is NOT emitted until waiting time. | . | is_signal_exists | Verifies if the signal exists on the emitter. | . | wait_until | Sets the assert signal timeout in ms. | . | ISignalAssert . | Function | Description | . | IsEmitted | Verifies that given signal is emitted until waiting time. | . | IsNotEmitted | Verifies that given signal is NOT emitted until waiting time. | . | IsSignalExists | Verifies if the signal exists on the emitter. | . | . ",
    "url": "/gdUnit4/latest/testing/assert-signal/#signal-assertions",
    
    "relUrl": "/testing/assert-signal/#signal-assertions"
  },"85": {
    "doc": "Signal Assert",
    "title": "Signal Assert Examples",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-signal/#signal-assert-examples",
    
    "relUrl": "/testing/assert-signal/#signal-assert-examples"
  },"86": {
    "doc": "Signal Assert",
    "title": "is_emitted",
    "content": "Waits until the given signal is emitted or the timeout occures and fails . | GdScript | C# | . | func assert_signal(&lt;instance :Object&gt;).is_emitted(&lt;signal_name&gt;, [args :Array]) -&gt; GdUnitSignalAssert . # waits until the signal \"door_opened\" is emitted by the instance or fails after default timeout of 2s await assert_signal(instance).is_emitted(\"door_opened\") . | public Task&lt;ISignalAssert&gt; IsEmitted(string signal, params object[] args); . // waits until the signal \"door_opened\" is emitted by the instance or fails after default timeout of 2s await AssertSignal(instance).IsEmitted(\"door_opened\"); // waits until the signal \"door_opened\" is emitted by the instance or fails after given timeout of 200ms await AssertSignal(instance).IsEmitted(\"door_opened\").WithTimeout(200); . | . ",
    "url": "/gdUnit4/latest/testing/assert-signal/#is_emitted",
    
    "relUrl": "/testing/assert-signal/#is_emitted"
  },"87": {
    "doc": "Signal Assert",
    "title": "is_not_emitted",
    "content": "Waits until the specified timeout to check if the signal was NOT emitted . | GdScript | C# | . | func assert_signal(&lt;instance :Object&gt;).is_not_emitted(&lt;signal_name&gt;, [args :Array]) -&gt; GdUnitSignalAssert . # waits until 2s and verifies the signal \"door_locked\" is not emitted await assert_signal(instance).is_not_emitted(\"door_locked\") . | public Task&lt;ISignalAssert&gt; IsNotEmitted(string signal, params object[] args); . // waits until 2s and verifies the signal \"door_locked\" is not emitted await AssertSignal(instance).IsNotEmitted(\"door_locked\"); // waits until 200ms and verifies the signal \"door_locked\" is not emitted await AssertSignal(instance).IsNotEmitted(\"door_locked\").WithTimeout(200); . | . ",
    "url": "/gdUnit4/latest/testing/assert-signal/#is_not_emitted",
    
    "relUrl": "/testing/assert-signal/#is_not_emitted"
  },"88": {
    "doc": "Signal Assert",
    "title": "is_signal_exists",
    "content": "Verifies if the signal exists on the emitter. | GdScript | C# | . | func assert_signal(&lt;instance :Object&gt;).wait_until(&lt;timeout&gt;) -&gt; GdUnitSignalAssert . # verify the signal 'visibility_changed' exists in the node assert_signal(node).is_signal_exists(\"visibility_changed\"); . | public ISignalAssert IsSignalExists(string signal); . // verify the signal 'visibility_changed' exists in the node AssertSignal(node).IsSignalExists(\"visibility_changed\"); . | . ",
    "url": "/gdUnit4/latest/testing/assert-signal/#is_signal_exists",
    
    "relUrl": "/testing/assert-signal/#is_signal_exists"
  },"89": {
    "doc": "Signal Assert",
    "title": "wait_until",
    "content": "Sets the timeout in ms to wait. | GdScript | C# | . | func assert_signal(&lt;instance :Object&gt;).wait_until(&lt;timeout&gt;) -&gt; GdUnitSignalAssert . # waits until 5s the signal \"door_closed\" is emitted or fail await assert_signal(instance).wait_until(5000).is_emitted(\"door_closed\") . | public static async Task&lt;ISignalAssert&gt; WithTimeout(this Task&lt;ISignalAssert&gt; task, int timeoutMillis); . // waits until 5s and verifies the signal \"door_locked\" is not emitted or fail await AssertSignal(instance).IsEmitted(\"door_closed\").WithTimeout(5000); . | . For more advanced examples show Testing Signals. ",
    "url": "/gdUnit4/latest/testing/assert-signal/#wait_until",
    
    "relUrl": "/testing/assert-signal/#wait_until"
  },"90": {
    "doc": "Signal Assert",
    "title": "Signal Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-signal/",
    
    "relUrl": "/testing/assert-signal/"
  },"91": {
    "doc": "String Assert",
    "title": "String Assertions",
    "content": "An assertion tool to verify String and StringName values. | GdScript | C# | . | GdUnitStringAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current String is equal to the given one. | . | is_equal_ignoring_case | Verifies that the current String is equal to the given one, ignoring case considerations. | . | is_not_equal | Verifies that the current String is not equal to the given one. | . | is_not_equal_ignoring_case | Verifies that the current String is not equal to the given one, ignoring case considerations. | . | is_empty | Verifies that the current String is empty, it has a length of 0. | . | is_not_empty | Verifies that the current String is not empty, it has a length of minimum 1. | . | contains | Verifies that the current String contains the given String. | . | contains_ignoring_case | Verifies that the current String does not contain the given String, ignoring case considerations. | . | not_contains | Verifies that the current String does not contain the given String. | . | not_contains_ignoring_case | Verifies that the current String does not contain the given String, ignoring case considerations. | . | starts_with | Verifies that the current String starts with the given prefix. | . | ends_with | Verifies that the current String ends with the given suffix. | . | has_length | Verifies that the current String has the expected length by used comparator. | . | IStringAssert . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current String is equal to the given one. | . | IsEqualIgnoringCase | Verifies that the current String is equal to the given one, ignoring case considerations. | . | IsNotEqual | Verifies that the current String is not equal to the given one. | . | IsNotEqualIgnoringCase | Verifies that the current String is not equal to the given one, ignoring case considerations. | . | IsEmpty | Verifies that the current String is empty, it has a length of 0. | . | IsNotEmpty | Verifies that the current String is not empty, it has a length of minimum 1. | . | Contains | Verifies that the current String contains the given String. | . | ContainsIgnoringCase | Verifies that the current String does not contain the given String, ignoring case considerations. | . | NotContains | Verifies that the current String does not contain the given String. | . | NotContainsIgnoringCase | Verifies that the current String does not contain the given String, ignoring case considerations. | . | StartsWith | Verifies that the current String starts with the given prefix. | . | EndsWith | Verifies that the current String ends with the given suffix. | . | HasLength | Verifies that the current String has the expected length by used comparator. | . | . ",
    "url": "/gdUnit4/latest/testing/assert-string/#string-assertions",
    
    "relUrl": "/testing/assert-string/#string-assertions"
  },"92": {
    "doc": "String Assert",
    "title": "String Assert Examples",
    "content": "is_equal . Verifies that the current String or StringName is equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_equal(\"This is a test message\") # this assertion fails because the 'Message' is writen camel case assert_str(\"This is a test message\").is_equal(\"This is a test Message\") . | public static IStringAssert AssertThat(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a test message\").IsEqual(\"This is a test message\"); // this assertion fails because the 'Message' is writen camel case AssertThat(\"This is a test message\").IsEqual(\"This is a test Message\"); . | . is_equal_ignoring_case . Verifies that the current String or StringName is equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_equal_ignoring_case(\"This is a test Message\") # this assertion fails because 'test' is missing assert_str(\"This is a test message\").is_equal_ignoring_case(\"This is a Message\") . | public static IStringAssert AssertThat(&lt;current&gt;).IsEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a test message\").IsEqualIgnoringCase(\"This is a test Message\") // this assertion fails because 'test' is missing AssertThat(\"This is a test message\").IsEqualIgnoringCase(\"This is a Message\") . | . is_not_equal . Verifies that the current String or StringName is not equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_not_equal(\"This is a test Message\") # this assertion fails because the values are equal assert_str(\"This is a test message\").is_not_equal(\"This is a test message\") . | public static IStringAssert AssertThat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a test message\").IsNotEqual(\"This is a test Message\"); // this assertion fails because the values are equal AssertThat(\"This is a test message\").IsNotEqual(\"This is a test message\"); . | . is_not_equal_ignoring_case . Verifies that the current String or StringName is not equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_not_equal_ignoring_case(\"This is a Message\") # this assertion fails because the values are equal ignoring camel case assert_str(\"This is a test message\").is_not_equal_ignoring_case(\"This is a test Message\") . | public static IStringAssert AssertThat(&lt;current&gt;).IsNotEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a test message\").IsNotEqualIgnoringCase(\"This is a Message\"); // this assertion fails because the values are equal ignoring camel case AssertThat(\"This is a test message\").IsNotEqualIgnoringCase(\"This is a test Message\"); . | . is_empty . Verifies that the current String or StringName is empty, it has a length of 0. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_empty() -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"\").is_empty() # this assertion fails because the values contains a single space assert_str(\" \").is_empty() . | public static IStringAssert AssertThat(&lt;current&gt;).IsEmpty() . // this assertion succeeds AssertThat(\"\").IsEmpty(); // this assertion fails because the values contains a single space AssertThat(\" \").IsEmpty(); . | . is_not_empty . Verifies that the current String or StringName is not empty, it has a length of minimum 1. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_empty() -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\" \").is_not_empty() # this assertion fails because the values empty (has size of 0 lenght) assert_str(\"\").is_not_empty() . | public static IStringAssert AssertThat(&lt;current&gt;).IsNotEmpty() . // this assertion succeeds AssertThat(\" \").IsNotEmpty(); // this assertion fails because the values empty (has size of 0 lenght) AssertThat(\"\").IsNotEmpty(); . | . contains . Verifies that the current String or StringName contains the given String. | GdScript | C# | . | func assert_str(&lt;current&gt;).contains(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").contains(\"is\") # this assertion fails assert_str(\"This is a String\").contains(\"not\") . | public static IStringAssert AssertThat(&lt;current&gt;).Contains(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a String\").Contains(\"is\"); // this assertion fails AssertThat(\"This is a String\").Contains(\"not\"); . | . contains_ignoring_case . Verifies that the current String or StringName does not contain the given String, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).contains_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").contains_ignoring_case(\"IS\") # this assertion fails assert_str(\"This is a String\").contains_ignoring_case(\"not\") . | public static IStringAssert AssertThat(&lt;current&gt;).ContainsIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a String\").ContainsIgnoringCase(\"IS\"); // this assertion fails AssertThat(\"This is a String\").ContainsIgnoringCase(\"not\"); . | . not_contains . Verifies that the current String or StringName does not contain the given String. | GdScript | C# | . | func assert_str(&lt;current&gt;).not_contains(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").not_contains(\"not\") # this assertion fails assert_str(\"This is a String\").not_contains(\"is\") . | public static IStringAssert AssertThat(&lt;current&gt;).NotContains(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a String\").NotContains(\"not\"); // this assertion fails AssertThat(\"This is a String\").NotContains(\"is\"); . | . not_contains_ignoring_case . Verifies that the current String or StringName does not contain the given String, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).not_contains_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").not_contains_ignoring_case(\"Not\") # this assertion fails assert_str(\"This is a String\").not_contains_ignoring_case(\"IS\") . | public static IStringAssert AssertThat(&lt;current&gt;).NotContainsIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a String\").NotContainsIgnoringCase(\"Not\"); // this assertion fails AssertThat(\"This is a String\").NotContainsIgnoringCase(\"IS\"); . | . starts_with . Verifies that the current String or StringName starts with the given prefix. | GdScript | C# | . | func assert_str(&lt;current&gt;).starts_with(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").starts_with(\"This is\") # this assertion fails assert_str(\"This is a String\").starts_with(\"a String\") . | public static IStringAssert AssertThat(&lt;current&gt;).StartsWith(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a String\").StartsWith(\"This is\"); // this assertion fails AssertThat(\"This is a String\").StartsWith(\"a String\"); . | . ends_with . Verifies that the current String or StringName ends with the given suffix. | GdScript | C# | . | func assert_str(&lt;current&gt;).ends_with(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").ends_with(\"a String\") # this assertion fails assert_str(\"This is a String\").ends_with(\"a Str\") . | public static IStringAssert AssertThat(&lt;current&gt;).EndsWith(&lt;expected&gt;) . // this assertion succeeds AssertThat(\"This is a String\").EndsWith(\"a String\"); // this assertion fails AssertThat(\"This is a String\").EndsWith(\"a Str\"); . | . has_length . Verifies that the current String or StringName has the expected length by used [[comparator|Asserts#GdUnit Comparator]]. | GdScript | C# | . | func assert_str(&lt;current&gt;).has_length(&lt;expected&gt;, &lt;comparator&gt; (EXACTLY)) -&gt; GdUnitStringAssert . # this assertion succeeds because the current String has 22 characters assert_str(\"This is a test message\").has_length(22) assert_str(\"This is a test message\").has_length(23, Comparator.LESS_THAN) assert_str(\"This is a test message\").has_length(22, Comparator.LESS_EQUAL) assert_str(\"This is a test message\").has_length(21, Comparator.GREATER_THAN) assert_str(\"This is a test message\").has_length(21, Comparator.GREATER_EQUAL) # this assertion fails because the current String has 22 characters and not 23 assert_str(\"This is a test message\").has_length(23) assert_str(\"This is a test message\").has_length(22, Comparator.LESS_THAN) assert_str(\"This is a test message\").has_length(21, Comparator.LESS_EQUAL) assert_str(\"This is a test message\").has_length(22, Comparator.GREATER_THAN) assert_str(\"This is a test message\").has_length(23, Comparator.GREATER_EQUAL) . | public static IStringAssert AssertThat(&lt;current&gt;).HasLength(&lt;expected&gt;, &lt;comparator&gt; (// EQUAL is default)) . // this assertion succeeds because the current String has 22 characters AssertThat(\"This is a test message\").HasLength(22); AssertThat(\"This is a test message\").HasLength(23, Compare.LESS_THAN); AssertThat(\"This is a test message\").HasLength(22, Compare.LESS_EQUAL); AssertThat(\"This is a test message\").HasLength(21, Compare.GREATER_THAN); AssertThat(\"This is a test message\").HasLength(21, Compare.GREATER_EQUAL); // this assertion fails because the current String has 22 characters and not 23 AssertThat(\"This is a test message\").HasLength(23); AssertThat(\"This is a test message\").HasLength(22, Compare.LESS_THAN); AssertThat(\"This is a test message\").HasLength(21, Compare.LESS_EQUAL); AssertThat(\"This is a test message\").HasLength(22, Compare.GREATER_THAN); AssertThat(\"This is a test message\").HasLength(23, Compare.GREATER_EQUAL); . | . ",
    "url": "/gdUnit4/latest/testing/assert-string/#string-assert-examples",
    
    "relUrl": "/testing/assert-string/#string-assert-examples"
  },"93": {
    "doc": "String Assert",
    "title": "String Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-string/",
    
    "relUrl": "/testing/assert-string/"
  },"94": {
    "doc": "AssertThat",
    "title": "AssertThat Assertions",
    "content": "The assert_that is useful when you don’t know the type of the value you want to test. You can use this assertion on all types you want, but for better readability of the test (GdScript) I prefer to use type store asserts. For C# you should prefer to use AssertThat, under C# the type of a variable is always known therefore it allows to find the right assert. ",
    "url": "/gdUnit4/latest/testing/assert-that/#assertthat-assertions",
    
    "relUrl": "/testing/assert-that/#assertthat-assertions"
  },"95": {
    "doc": "AssertThat",
    "title": "AssertThat Example",
    "content": ". | GdScript | C# | . | Asserts are restricted by GdScript behavior and therefore do not fully support generics, i.e. you should prefer to use assert by type. func assert_that(&lt;current&gt;) . assert_that(\"This is a test message\").is_equal(\"This is a test message\") assert_that(23).is_greater(20) . | The C# assert are smart and switch to the equivalent assert implementation by auto-typing and should also be used preferentially. // auto type assertion public static IAssertBase&lt;Type&gt; AssertThat(&lt;current&gt;); . AssertThat(\"This is a test message\").is_equal(\"This is a test message\"); AssertThat(23).IsGreater(20); . | . ",
    "url": "/gdUnit4/latest/testing/assert-that/#assertthat-example",
    
    "relUrl": "/testing/assert-that/#assertthat-example"
  },"96": {
    "doc": "AssertThat",
    "title": "AssertThat",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-that/",
    
    "relUrl": "/testing/assert-that/"
  },"97": {
    "doc": "Vector Assert",
    "title": "Vector Assertions",
    "content": "An assertion tool to verify Vector values, supports all Godot Vector types. | GdScript | C# | . | GdUnitVectorAssert . | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | is_equal_approx | Verifies that the current and expected value are approximately equal. | . | is_less | Verifies that the current value is less than the given one. | . | is_less_equal | Verifies that the current value is less than or equal the given one. | . | is_greater | Verifies that the current value is greater than the given one. | . | is_greater_equal | Verifies that the current value is greater than or equal the given one. | . | is_between | Verifies that the current value is between the given boundaries (inclusive). | . | is_not_between | Verifies that the current value is not between the given boundaries (inclusive). | . | IVector2Assert . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsEqualApprox | Verifies that the current and expected value are approximately equal. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsBetween | Verifies that the current value is between the given boundaries (inclusive). | . | IsNotBetween | Verifies that the current value is not between the given boundaries (inclusive). | . | . ",
    "url": "/gdUnit4/latest/testing/assert-vector/#vector-assertions",
    
    "relUrl": "/testing/assert-vector/#vector-assertions"
  },"98": {
    "doc": "Vector Assert",
    "title": "Vector Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(1.1, 1.2)).is_equal(Vector2(1.1, 1.2)) # this assertion fails because part y of the vector 1.2 are not equal to 1.3 assert_vector(Vector2(1.1, 1.2)).is_equal(Vector2(1.1, 1.3)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsEqual(&lt;expected&gt;); . // this assertion succeeds AssertThat(Vector2.One).IsEqual(Vector2.One); // should fail because is NOT equal AssertThat(Vector2.One).IsEqual(new Vector2(1.2f, 1.000001f)); . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(1.1, 1.2)).is_not_equal(Vector2(1.1, 1.3)) # this assertion fails because both vectors are equal assert_vector(Vector2(1.1, 1.2)).is_not_equal(Vector2(1.1, 1.2)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsNotEqual(&lt;expected&gt;); . // this assertion succeeds AssertThat(Vector2.One).IsNotEqual(new Vector2(1.2f, 1.000001f)); // should fail because is equal AssertThat(Vector2.One).IsNotEqual(Vector2.One); . | . is_equal_approx . Verifies that the current and expected value are approximately equal. | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_equal_approx(expected, approx) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(0.996, 0.996)).is_equal_approx(Vector2.ONE, Vector2(0.004, 0.004)) # this will fail because the vector is out of approximated range assert_vector(Vector2(1.005, 1)).is_equal_approx(Vector2.ONE, Vector2(0.004, 0.004)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsEqualApprox(&lt;expected&gt;, &lt;approx&gt;); . // this assertion succeeds AssertVec2(Vector2.One).IsEqualApprox(Vector2.One, new Vector2(0.004f, 0.004f)); // should fail because is NOT equal approximated AssertVec2(new Vector2(1.005f, 1f)).IsEqualApprox(Vector2.One, new Vector2(0.004f, 0.004f)); . | . is_less . Verifies that the current value is less than the given one. | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_less(&lt;expected&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2.ZERO.is_less(Vector2.ONE) assert_vector(Vector2(1.1, 1.2)).is_less(Vector2(1.1, 1.3)) # this assertion fails because both vectors are equal assert_vector(Vector2(1.1, 1.2)).is_less(Vector2(1.1, 1.2)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsLess(&lt;expected&gt;); . // this assertion succeeds AssertVec2(new Vector2(1.2f, 1.000001f)).IsLess(new Vector2(1.2f, 1.000002f)); // should fail because is NOT less is equal AssertVec2(Vector2.One).IsLess(Vector2.One); . | . is_less_equal . Verifies that the current value is less than or equal the given one. | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_less_equal(&lt;expected&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(1.1, 1.2)).is_less_equal(Vector2(1.1, 1.3)) assert_vector(Vector2(1.1, 1.2)).is_less_equal(Vector2(1.1, 1.2)) # this assertion fails because part y 1.3 is not less or equal to 1.2 assert_vector(Vector2(1.1, 1.3)).is_less_equal(Vector2(1.1, 1.2)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsLessEqual(&lt;expected&gt;); . // this assertion succeeds AssertVec2(new Vector2(1.2f, 1.000001f)).IsLessEqual(new Vector2(1.2f, 1.000001f)); AssertVec2(new Vector2(1.2f, 1.000001f)).IsLessEqual(new Vector2(1.2f, 1.000002f)); // should fail because is NOT less or equal AssertVec2(Vector2.One).IsLessEqual(Vector2.Zero); . | . is_greater . Verifies that the current value is greater than the given one. | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_greater(&lt;expected&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(1.1, 1.3)).is_greater(Vector2(1.1, 1.2)) # this assertion fails because both vectors are equal assert_vector(Vector2(1.1, 1.2)).is_greater(Vector2(1.1, 1.2)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsGreater(&lt;expected&gt;); . // this assertion succeeds AssertVec2(new Vector2(1.2f, 1.000002f)).IsGreater(new Vector2(1.2f, 1.000001f)); // should fail because zero is NOT greater than one AssertVec2(Vector2.Zero).IsGreater(Vector2.One); . | . is_greater_equal . Verifies that the current value is greater than or equal the given one. | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_greater_equal(&lt;expected&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(1.1, 1.3)).is_greater_equal(Vector2(1.1, 1.2)) assert_vector(Vector2(1.1, 1.2)).is_greater_equal(Vector2(1.1, 1.2)) # this assertion fails because part y1.2 is less than 1.3 assert_vector(Vector2(1.1, 1.2)).is_greater_equal(Vector2(1.1, 1.3)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsGreaterEqual(&lt;expected&gt;); . // this assertion succeeds AssertVec2(new Vector2(1.2f, 1.000001f)).IsGreaterEqual(new Vector2(1.2f, 1.000001f)); AssertVec2(new Vector2(1.2f, 1.000002f)).IsGreaterEqual(new Vector2(1.2f, 1.000001f)); // should fail because it is NOT greater or equal AssertVec2(new Vector2(1.2f, 1.000002f)).IsGreaterEqual(new Vector2(1.2f, 1.000003f); . | . is_between . Verifies that the current value is between the given boundaries (inclusive). | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(1.1, 1.2)).is_between(Vector2(1.1, 1.2), Vector2(1.1, 1.3)) assert_vector(Vector2(1.1, 1.2)).is_between(Vector2(1.1, 1.1), Vector2(1.1, 1.3)) # this assertion fail because the part y 1.2 is not between 1.0 and 1.1 assert_vector(Vector2(1.1, 1.2)).is_between (Vector2(1.1, 1.0), Vector2(1.1, 1.1)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsBetween(&lt;from&gt;, &lt;to&gt;); . // this assertion succeeds AssertVec2(Vector2.Zero).IsBetween(Vector2.Zero, Vector2.One); AssertVec2(Vector2.One).IsBetween(Vector2.Zero, Vector2.One); // should fail because it is NOT between zero and one AssertVec2(new Vector2(0, -.1f)).IsBetween(Vector2.Zero, Vector2.One); . | . is_not_between . Verifies that the current value is not between the given boundaries (inclusive). | GdScript | C# | . | func assert_vector(&lt;current&gt;).is_not_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitVectorAssert . # this assertion succeeds assert_vector(Vector2(1.0, 1.0)).is_not_between(Vector2(1.1, 1.0), Vector2(2.0, 1.0)) # this assertion fail because the vector is between assert_vector(Vector2(1.0, 1.0)).is_not_between(Vector2(1.0, 1.0), Vector2(2.0, 1.0)) . | public static IVector2Assert AssertThat(Godot.Vector2 current).IsNotBetween(&lt;from&gt;, &lt;to&gt;); . // this assertion succeeds AssertVec2(new Vector2(1f, 1.0002f)).IsNotBetween(Vector2.Zero, Vector2.One); // should fail because it is between zero and one AssertVec2(Vector2.One).IsNotBetween(Vector2.Zero, Vector2.One); . | . ",
    "url": "/gdUnit4/latest/testing/assert-vector/#vector-assert-examples",
    
    "relUrl": "/testing/assert-vector/#vector-assert-examples"
  },"99": {
    "doc": "Vector Assert",
    "title": "Vector Assert",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert-vector/",
    
    "relUrl": "/testing/assert-vector/"
  },"100": {
    "doc": "Asserts",
    "title": "Assertions",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert/#assertions",
    
    "relUrl": "/testing/assert/#assertions"
  },"101": {
    "doc": "Asserts",
    "title": "Definition",
    "content": "Test assertions are conditions used in automated tests to check whether an expected result or behavior in a software application has been achieved. They are used to validate that the output of a test matches the expected result, and to identify any discrepancies or bugs in the application. Test assertions can be used for a variety of purposes, such as verifying the correctness of calculations, checking the behavior of user interfaces, or ensuring that data is properly stored and retrieved. Test assertions typically involve comparing actual results with expected results using comparison operators, such as equal to, greater than, less than, etc. If the assertion fails, it means that the test has identified a problem or bug in the application, and further investigation is needed to determine the cause and fix the issue. ",
    "url": "/gdUnit4/latest/testing/assert/#definition",
    
    "relUrl": "/testing/assert/#definition"
  },"102": {
    "doc": "Asserts",
    "title": "How GdUnit Asserts compares Objects",
    "content": "In GdUnit, asserts generally compare objects based on parameter equality. This means that two objects of different instances are considered equal if they are of the same type and have the same parameter values. For object reference comparison, GdUnit provides separate validation functions such as is_same and is_not_same, as well as assert-specific functions that handle reference comparison, such as contains_same or not_contains_same. These functions allow you to specifically check if two objects refer to the same instance or not. Here is an example of using assert to compare objects: . extends GdUnitTestSuite class TestClass: var _value :int func _init(value :int): _value = value func test_typ_and_parameter_comparison(): var obj1 = TestClass.new(1) var obj2 = TestClass.new(1) var obj3 = TestClass.new(2) # Using is_equal to check if obj1 and obj2 are equal but not same assert_object(obj1).is_equal(obj2) # Using is_not_equal to check if obj1 and obj3 do not equal, the value are different assert_object(obj1).is_not_equal(obj3) func test_object_reference_comparison(): var obj1 = TestClass.new(1) var obj2 = obj1 var obj3 = TestClass.new(2) # Using is_same to check if obj1 and obj2 refer to the same instance assert_object(obj1).is_same(obj2) # Using is_not_same to check if obj1 and obj3 do not refer to the same instance assert_object(obj1).is_not_same(obj3) . ",
    "url": "/gdUnit4/latest/testing/assert/#how-gdunit-asserts-compares-objects",
    
    "relUrl": "/testing/assert/#how-gdunit-asserts-compares-objects"
  },"103": {
    "doc": "Asserts",
    "title": "How to use GdUnit assets to verify things",
    "content": "GdUnit4 provides a set of assertions that give you helpful error messages and improve the readability of your test code. Assertions are organized by type and support fluent syntax writing. The pattern for using asserts is defined as assert_&lt;type&gt;(&lt;current&gt;).&lt;comparison function&gt;([expected]). If you don’t know the type of the current value, use the generic assert_that(&lt;current&gt;) instead. Here is an example: . | GdScript | C# | . | Asserts are restricted by GdScript behavior and therefore do not fully support generics. Therefore, you should prefer to use assert by type. For example, use assert_str for string. class_name GdUnitExampleTest extends GdUnitTestSuite func test_hello_world() -&gt; void: # Using type save assert assert_str(\"Hello world\").is_equal(\"Hello world\") # Using the generic assert assert_that(\"Hello world\").is_equal(\"Hello world\") . | The C# assert is smart and switches to the equivalent assert implementation by auto-typing and should also be used preferentially. Alternatively, you can use the typed asserts if you want to. To use the assert, you have to import it via static GdUnit4.Assertions. using GdUnit4; using static GdUnit4.Assertions; namespace ExampleProject.Tests { [TestSuite] public class ExampleTest { [TestCase] public void HelloWorld() { AssertThat(\"Hello world\").IsEqual(\"Hello world\"); // Using explicit the typed version AssertString(\"Hello world\").IsEqual(\"Hello world\"); } } } . | . Advice You should use the fluent syntax to keep your tests clearer. | GdScript | C# | . | class_name GdUnitExampleTest extends GdUnitTestSuite # A bad example for the multiple use of `assert_str`. func test_hello_world() -&gt; void: var current := \"Hello World\" assert_str(current).is_equal(\"Hello World\") assert_str(current).contains(\"World\") assert_str(current).not_contains(\"Green\") # A good example of using fluent syntax to write more readable tests func test_hello_world_fluent() -&gt; void: assert_str(\"Hello World\")\\ .is_equal(\"Hello World\")\\ .contains(\"World\")\\ .not_contains(\"Green\") . | using GdUnit4; using static GdUnit4.Assertions; namespace ExampleProject.Tests { [TestSuite] public class ExampleTest { // A bad example for the multiple use of `AssertThat`. [TestCase] public void HelloWorld() { string current = \"Hello World\"; AssertThat(current).IsEqual(\"Hello World\"); AssertThat(current).Contains(\"World\"); AssertThat(current).NotContains(\"Green\"); } // A good example of using fluent syntax to write more readable tests [TestCase] public void HelloWorldFluent() { AssertThat(\"Hello World\") .IsEqual(\"Hello World\") .Contains(\"World\") .NotContains(\"Green\"); } } } . | . ",
    "url": "/gdUnit4/latest/testing/assert/#how-to-use-gdunit-assets-to-verify-things",
    
    "relUrl": "/testing/assert/#how-to-use-gdunit-assets-to-verify-things"
  },"104": {
    "doc": "Asserts",
    "title": "Use Fail Fast with Multiple Assertions",
    "content": "When you have multiple assertions in a single test case, it’s important to consider using fail fast techniques to avoid unnecessary test execution and get clearer failure reports. In debug mode, accessing properties on null objects will cause the debugger to break with runtime errors, stopping test execution unexpectedly. For more detailed information about fail fast techniques, see How to fail fast. ",
    "url": "/gdUnit4/latest/testing/assert/#use-fail-fast-with-multiple-assertions",
    
    "relUrl": "/testing/assert/#use-fail-fast-with-multiple-assertions"
  },"105": {
    "doc": "Asserts",
    "title": "How to Override the Failure Message",
    "content": "By default, GdUnit generates a failure report based on the used assert, according to the expected vs. current value scheme. However, in some cases, the default failure message may not be specific enough or helpful to the reader. In those cases, you can override or append to the default failure message using specialized functions. Using override_failure_message() . The override_failure_message() function completely replaces the default failure message with your custom message: . | GdScript | C# | . | func test_custom_failure_message() -&gt; void: assert_str(\"Hello World\")\\ # Override the default failure message with a custom one .override_failure_message(\"Player name should not be empty after character creation!\")\\ # Let the test fail .is_empty() . | [TestCase] public void CustomFailureMessage() { AssertString(\"Hello World\") // Override the default failure message with a custom one .OverrideFailureMessage(\"Player name should not be empty after character creation!\") // Let the test fail .IsEmpty(); } . | . Using append_failure_message() . The append_failure_message() function adds additional context to the existing failure message while keeping the original assertion details: . | GdScript | C# | . | func test_player_health_with_context() -&gt; void: var player = create_player() var last_damage_source = \"Fire Spell\" assert_int(player.health)\\ # Add context information to help debugging .append_failure_message(\"Player was damaged by: %s\" % last_damage_source)\\ .is_greater(0) . | [TestCase] public void PlayerHealthWithContext() { var player = CreatePlayer(); var lastDamageSource = \"Fire Spell\"; AssertThat(player.Health) // Add context information to help debugging .AppendFailureMessage($\"Player was damaged by: {lastDamageSource}\") .IsGreater(0); } . | . When to Use Each Approach . | Use override_failure_message() when the default message isn’t clear or you need a completely different explanation | Use append_failure_message() when you want to keep the assertion details but add helpful debugging context | . Both functions support fluent syntax and can be chained with other assertion methods. ",
    "url": "/gdUnit4/latest/testing/assert/#how-to-override-the-failure-message",
    
    "relUrl": "/testing/assert/#how-to-override-the-failure-message"
  },"106": {
    "doc": "Asserts",
    "title": "The Generic Assert",
    "content": "The generic assert, assert_that (in GdScript) and AssertThat (in C#), can be used for all types and gives you access to the basic test functions of GdUnit Assert. However, it is recommended to use the type-safe asserts whenever possible to ensure type safety in your tests. | Assert | Type | . | assert_that | auto typing (not type-safe) | . | AssertThat | auto typing (type-safe) | . ",
    "url": "/gdUnit4/latest/testing/assert/#the-generic-assert",
    
    "relUrl": "/testing/assert/#the-generic-assert"
  },"107": {
    "doc": "Asserts",
    "title": "The Basic Build-In Type Asserts",
    "content": ". | GdScript | C# | . | | Assert | Type | . | assert_str | string | . | assert_bool | bool | . | assert_int | int | . | assert_float | float | . | | Assert | Type | . | IStringAssert | string | . | IBoolAssert | bool | . | INumberAssert | number (sbyte,byte,short,ushort,int,uint,long,ulong,float,double,decimal) | . | . For more details about Build-In types click here Godot Build-In Types . ",
    "url": "/gdUnit4/latest/testing/assert/#the-basic-build-in-type-asserts",
    
    "relUrl": "/testing/assert/#the-basic-build-in-type-asserts"
  },"108": {
    "doc": "Asserts",
    "title": "Container Built-In Type Asserts",
    "content": ". | GdScript | C# | . | | Assert | Type | . | assert_array | All Godot Array Types | . | assert_dict | Dictionary | . | | Assert | Type | . | IEnumerableAssert | IEnumerable | . | IDictionaryAssert | IDictionary | . | . For more details about Build-In types click here Container built-in types . ",
    "url": "/gdUnit4/latest/testing/assert/#container-built-in-type-asserts",
    
    "relUrl": "/testing/assert/#container-built-in-type-asserts"
  },"109": {
    "doc": "Asserts",
    "title": "Engine Build-In Type Asserts",
    "content": ". | GdScript | C# | . | | Type | Assert | . | assert_object | Object | . | assert_vector | All Godot Vector Types | . | assert_file | File | . | | Type | Assert | . | IObjectAssert | Godot.Object, System.object | . | IVectorAssert | Godot.Vector2 | . | . ",
    "url": "/gdUnit4/latest/testing/assert/#engine-build-in-type-asserts",
    
    "relUrl": "/testing/assert/#engine-build-in-type-asserts"
  },"110": {
    "doc": "Asserts",
    "title": "Engine Tool Asserts",
    "content": ". | GdScript | C# | . | | Type | Assert | . | assert_signal | Signals | . | assert_error | Godot Errors | . | | Type | Assert | . | ISignalAssert | Signals | . | IErrorAssert | Godot Errors | . | . ",
    "url": "/gdUnit4/latest/testing/assert/#engine-tool-asserts",
    
    "relUrl": "/testing/assert/#engine-tool-asserts"
  },"111": {
    "doc": "Asserts",
    "title": "Asserts",
    "content": " ",
    "url": "/gdUnit4/latest/testing/assert/",
    
    "relUrl": "/testing/assert/"
  },"112": {
    "doc": "Hooks",
    "title": "GdUnit Hooks",
    "content": " ",
    "url": "/gdUnit4/latest/testing/hooks/#gdunit-hooks",
    
    "relUrl": "/testing/hooks/#gdunit-hooks"
  },"113": {
    "doc": "Hooks",
    "title": "Overview",
    "content": "GdUnit4 provides multiple levels of hooks to control test execution and manage test resources. Understanding the hierarchy and execution order of these hooks is essential for writing efficient and maintainable tests. Hook Types and Hierarchy . GdUnit4 offers three distinct levels of hooks, each serving a specific purpose: . | Hooks | Scope | Frequency | Primary Use Case | . | Session | Entire test session | Once per test run | External services, global resources, custom reporting | . | TestSuite | Single test suite | Once per suite | Suite-level shared resources, expensive setup | . | TestCase | Individual tests | Before/after each test | Test isolation, fresh state per test | . Key Differences: . | Session Hooks are optional and configured globally in GdUnit settings. They wrap the entire test execution. | TestSuite Hooks (before/after) run once for all tests in a suite. | TestCase Hooks (before_test/after_test) run for each individual test, ensuring test isolation. | . For information about Session Hooks, see Testing with Hooks. Test Execution Graph Overview . | GdScript | C# | . | . | . | . ",
    "url": "/gdUnit4/latest/testing/hooks/#overview",
    
    "relUrl": "/testing/hooks/#overview"
  },"114": {
    "doc": "Hooks",
    "title": "When to Use Each Hook",
    "content": "Choosing the right hook level is crucial for test performance and maintainability: . Use before() / [Before] when: . | Setting up expensive resources that can be shared across all tests (read-only) | Creating database schemas or test data that won’t be modified | Initializing external services or connections | Loading large test fixtures or configuration files | . Use before_test() / [BeforeTest] when: . | Each test needs a fresh, isolated state | Creating mutable test data that tests will modify | Setting up mock objects or stubs specific to a test | Ensuring complete test independence | . Common Anti-patterns to Avoid: . | ❌ Using before() for mutable state that tests modify (causes test interdependence) | ❌ Using before_test() for expensive operations repeated unnecessarily | ❌ Forgetting to clean up resources in corresponding after hooks | . ",
    "url": "/gdUnit4/latest/testing/hooks/#when-to-use-each-hook",
    
    "relUrl": "/testing/hooks/#when-to-use-each-hook"
  },"115": {
    "doc": "Hooks",
    "title": "TestSuite Hooks",
    "content": "GdUnit provide the following suite hooks that allow you to control the test environment. GdUnit4 allows you to use asserts within these stages, and any errors that occur will be reported. | GdScript | C# | . | | Stage | Description | . | before | executed only once at the start of the TestSuite run | . | after | executed only once at the end of the TestSuite run | . | | Stage | Description | . | [Before] | executed only once at the start of the TestSuite run | . | [After] | executed only once at the end of the TestSuite run | . | . ",
    "url": "/gdUnit4/latest/testing/hooks/#testsuite-hooks",
    
    "relUrl": "/testing/hooks/#testsuite-hooks"
  },"116": {
    "doc": "Hooks",
    "title": "Hook before",
    "content": "This function is executed once at the beginning of the TestSuite and is used to set up any resources or data that will be required by all of the test cases in the suite. For example, if you need to create a database connection or initialize a global configuration object, you would do so in this function. | GdScript | C# | . | func before() Use this function inside your TestSuite to define a pre-hook and prepare your TestSuite data. class_name GdUnitExampleTest extends GdUnitTestSuite var _test_data :Node var _config :Dictionary # create some test data here func before(): _test_data = Node.new() _config = load_test_configuration() . | [Before] Use this attribute inside your TestSuite to define a method as pre hook to prepare your TestSuite data. using GdUnit4; using static GdUnit4.Assertions; namespace ExampleProject.Tests { [TestSuite] public class ExampleTest { private Godot.Node _testData; private Dictionary _config; [Before] public void Setup() { // create some test data here _testData = new Godot.Node(); _config = LoadTestConfiguration(); } } } . | . ",
    "url": "/gdUnit4/latest/testing/hooks/#hook-before",
    
    "relUrl": "/testing/hooks/#hook-before"
  },"117": {
    "doc": "Hooks",
    "title": "Hook after",
    "content": "This function is executed once at the end of the TestSuite and is used to clean up any resources or data that was created or modified during the test run. For example, if you need to close a database connection or delete temporary files, you would do so in this function. | GdScript | C# | . | func after(): Use this function inside your TestSuite to define a shutdown hook and release your TestSuite data. class_name GdUnitExampleTest extends GdUnitTestSuite var _test_data :Node var _db_connection func after(): # Clean up resources created in before() if _test_data: _test_data.free() if _db_connection: _db_connection.close() . | [After] Use this attribute inside your TestSuite to define a method as shutdown hook to release your TestSuite data. [TestSuite] public class ExampleTest { private Godot.Node _testData; private DatabaseConnection _dbConnection; [After] public void TearDownSuite() { // Clean up resources created in Before() _testData?.Free(); _dbConnection?.Close(); } } . | . ",
    "url": "/gdUnit4/latest/testing/hooks/#hook-after",
    
    "relUrl": "/testing/hooks/#hook-after"
  },"118": {
    "doc": "Hooks",
    "title": "TestCase Hooks",
    "content": "GdUnit provide the following test hooks that allow you to control the test environment. GdUnit4 allows you to use asserts within these stages, and any errors that occur will be reported. | GdScript | C# | . | | Stage | Description | . | before_test | executed before each test is started | . | after_test | executed after each test has finished | . | | Stage | Description | . | [BeforeTest] | executed before each test is started | . | [AfterTest] | executed after each test has finished | . | . ",
    "url": "/gdUnit4/latest/testing/hooks/#testcase-hooks",
    
    "relUrl": "/testing/hooks/#testcase-hooks"
  },"119": {
    "doc": "Hooks",
    "title": "Hook before_test",
    "content": "This function is executed before each test case and is used to set up any resources or data that are required by the test case. For example, if you need to create a temporary file or initialize a class instance, you would do so in this function. | GdScript | C# | . | func before_test(): Use this function inside your TestSuite to define a pre hook to initialize your TestCase data. class_name GdUnitExampleTest extends GdUnitTestSuite var _test_instance :Node func before_test(): # Each test gets a fresh instance _test_instance = auto_free(Node.new()) _test_instance.name = \"TestNode\" . | [BeforeTest] Use this attribute inside your TestSuite to define a method as pre hook to initialize your TestCase data. [TestSuite] public class ExampleTest { private Godot.Node _testInstance; [BeforeTest] public void SetupTest() { // Each test gets a fresh instance _testInstance = AutoFree(new Godot.Node()); _testInstance.Name = \"TestNode\"; } } . | . ",
    "url": "/gdUnit4/latest/testing/hooks/#hook-before_test",
    
    "relUrl": "/testing/hooks/#hook-before_test"
  },"120": {
    "doc": "Hooks",
    "title": "Hook after_test",
    "content": "This function is executed after each test case and is used to clean up any resources or data that were created or modified during the test case. For example, if you need to delete a temporary file or close a network connection, you would do so in this function. | GdScript | C# | . | func after_test(): Use this function inside your TestSuite to define a test cleanup hook to release your TestCase data if needed. class_name GdUnitExampleTest extends GdUnitTestSuite var _temp_file_path :String func after_test(): # Clean up test-specific resources if _temp_file_path and FileAccess.file_exists(_temp_file_path): DirAccess.remove_absolute(_temp_file_path) # Reset any modified global state reset_test_environment() . | [AfterTest] Use this attribute inside your TestSuite to define a method as cleanup hook to release your TestCase data if needed. [TestSuite] public class ExampleTest { private string _tempFilePath; [AfterTest] public void TearDownTest() { // Clean up test-specific resources if (!string.IsNullOrEmpty(_tempFilePath) &amp;&amp; FileAccess.FileExists(_tempFilePath)) { DirAccess.RemoveAbsolute(_tempFilePath); } // Reset any modified global state ResetTestEnvironment(); } } . | . ",
    "url": "/gdUnit4/latest/testing/hooks/#hook-after_test",
    
    "relUrl": "/testing/hooks/#hook-after_test"
  },"121": {
    "doc": "Hooks",
    "title": "Common Pitfalls and Solutions",
    "content": "1. Orphan Nodes . Problem: Forgetting to free nodes creates orphan warnings. Solution: Always use auto_free() or manually free in cleanup hooks. 2. Test Interdependence . Problem: Tests fail when run individually but pass when run together. Solution: Use before_test() instead of before() for mutable state. 3. Resource Leaks . Problem: File handles, network connections, or timers not cleaned up. Solution: Always implement corresponding cleanup in after hooks: . func before_test(): _file = FileAccess.open(\"test.txt\", FileAccess.WRITE) _timer = auto_free(Timer.new()) func after_test(): if _file: _file.close() # Timer is auto-freed . 4. Signal Connection Leaks . Problem: Signals remain connected after tests. Solution: Disconnect signals in cleanup or use auto_free() for the connected objects. 5. Incorrect Hook Choice . Problem: Using before() for data that each test modifies. Solution: Follow the “When to Use Each Hook” guide above. ",
    "url": "/gdUnit4/latest/testing/hooks/#common-pitfalls-and-solutions",
    
    "relUrl": "/testing/hooks/#common-pitfalls-and-solutions"
  },"122": {
    "doc": "Hooks",
    "title": "See Also",
    "content": ". | Testing with Hooks - Learn about Session-level hooks | Settings - Hooks Configuration - Configure session hooks | . ",
    "url": "/gdUnit4/latest/testing/hooks/#see-also",
    
    "relUrl": "/testing/hooks/#see-also"
  },"123": {
    "doc": "Hooks",
    "title": "Hooks",
    "content": " ",
    "url": "/gdUnit4/latest/testing/hooks/",
    
    "relUrl": "/testing/hooks/"
  },"124": {
    "doc": "Integration Testing",
    "title": "Integration Tests",
    "content": "Integration testing is a critical process in game development that ensures different parts of your game work together seamlessly. Unlike unit testing, which focuses on individual components, integration testing verifies the interaction between multiple components and systems within your scene. ",
    "url": "/gdUnit4/latest/testing/integration-testing/#integration-tests",
    
    "relUrl": "/testing/integration-testing/#integration-tests"
  },"125": {
    "doc": "Integration Testing",
    "title": "What is Integration Testing?",
    "content": "Integration testing involves testing the combination of different modules, scenes, or features of your game to ensure they work together as intended. This type of testing helps identify issues that may not surface during unit testing, such as: . | Interaction Bugs: Conflicts between different input actions, such as keyboard shortcuts and mouse events. | Scene Transitions: Ensuring smooth transitions between scenes or UI states. | Gameplay Logic: Verifying that gameplay mechanics function correctly when various elements interact, such as player actions, enemy behavior, and environment changes. | . Benefits of Integration Testing . | Early Bug Detection: Catch issues early in the development cycle by testing how different parts of your game interact. | Improved Stability: Ensure that updates or changes to one part of your game don’t unintentionally break other parts. | Automated Testing: With tools like SceneRunner, you can automate complex interactions, making it easier to run tests regularly and consistently. | . Integration Tests: Using the SceneRunner to Test Your Scene . The SceneRunner tool in GdUnit4 is specifically designed to facilitate integration testing by simulating interactions and processing within your scene. Scene Runner: How to use the SceneRunner. ",
    "url": "/gdUnit4/latest/testing/integration-testing/#what-is-integration-testing",
    
    "relUrl": "/testing/integration-testing/#what-is-integration-testing"
  },"126": {
    "doc": "Integration Testing",
    "title": "Integration Testing",
    "content": " ",
    "url": "/gdUnit4/latest/testing/integration-testing/",
    
    "relUrl": "/testing/integration-testing/"
  },"127": {
    "doc": "Test Case",
    "title": "GdUnit Test Case",
    "content": " ",
    "url": "/gdUnit4/latest/testing/test-case/#gdunit-test-case",
    
    "relUrl": "/testing/test-case/#gdunit-test-case"
  },"128": {
    "doc": "Test Case",
    "title": "TestCase Definition",
    "content": "Test cases are essential in software testing because they provide a way to ensure that the software is working as intended and meets the requirements and specifications of the project. By executing a set of test cases, testers can identify and report any defects or issues in the software, which can then be addressed by the development team. A test is defined as a function that follows the pattern test_name([arguments]) -&gt; void. The function name must start with the prefix test_ to be identified as a test. You can choose any name for the name part, but it should correspond to the function being tested. Test [arguments] are optional and will be explained later in the advanced testing section. When naming your tests, use a descriptive name that accurately represents what the test does. In addition to containing multiple test cases, a TestSuite can also contain test setup and teardown (hooks) that are executed before and after each test case, as well as before and after the entire TestSuite. This allows you to control the test environment and ensure that tests are executed in a consistent and repeatable manner. | TestCase Hooks | . ",
    "url": "/gdUnit4/latest/testing/test-case/#testcase-definition",
    
    "relUrl": "/testing/test-case/#testcase-definition"
  },"129": {
    "doc": "Test Case",
    "title": "Single TestCase",
    "content": ". | GdScript | C# | . | To define a TestCase you have to use the prefix test_ e.g. test_verify_is_string . extends GdUnitTestSuite func before_test(): # Setup test data here func after_test(): # Cleanup test data here func test_string_to_lower() -&gt; void: assert_str(\"AbcD\".to_lower()).is_equal(\"abcd\") . We named it test_string_to_lower() because we test the to_lower function on a string. | Use the [TestCase] attribute to define a method as a TestCase. namespace Examples; using GdUnit4; using static GdUnit4.Assertions; [TestSuite] public class GdUnitExampleTest { [TestCase] public void StringToLower() { AssertString(\"AbcD\".ToLower()).IsEqual(\"abcd\"); } } . We named it StringToLower() because we test the ToLower function on a string. | . ",
    "url": "/gdUnit4/latest/testing/test-case/#single-testcase",
    
    "relUrl": "/testing/test-case/#single-testcase"
  },"130": {
    "doc": "Test Case",
    "title": "Using Parameterized TestCases",
    "content": "See Testing with Parameterized TestCases . ",
    "url": "/gdUnit4/latest/testing/test-case/#using-parameterized-testcases",
    
    "relUrl": "/testing/test-case/#using-parameterized-testcases"
  },"131": {
    "doc": "Test Case",
    "title": "Using Fuzzers on Tests",
    "content": "See Testing with Fuzzers . ",
    "url": "/gdUnit4/latest/testing/test-case/#using-fuzzers-on-tests",
    
    "relUrl": "/testing/test-case/#using-fuzzers-on-tests"
  },"132": {
    "doc": "Test Case",
    "title": "TestCase Parameters",
    "content": "GdUnit allows you to define additional test parameters to have more control over the test execution. | GdScript | C# | . | | Parameter | Description | . | timeout | Defines a custom timeout in milliseconds. By default, a TestCase will be interrupted after 5 minutes if the tests are not finished. | . | do_skip | Set to ‘true’ to skip the test. Conditional expressions are supported. | . | skip_reason | Adds a comment why you want to skip this test. | . | fuzzer | Defines a fuzzer to provide test data. | . | fuzzer_iterations | Defines the number of times a TestCase will be run using the fuzzer. | . | fuzzer_seed | Defines a seed used by the fuzzer. | . | test_parameters | Defines the TestCase dataset for parameterized tests. | . Advice To avoid warnings about unused arguments, use the underscore prefix `_` or use `@warning_ignore(“unused_parameter”)`.. | | Parameter | Description | . | Timeout | Defines a custom timeout in milliseconds. By default, a TestCase will be interrupted after 5 minutes if the tests are not finished. | . | TestName | Defines a custom TestCase name. | . | Seed | Defines a seed to provide test data. | . | . timeout . The timeout paramater sets the duration in milliseconds before a test case is interrupted. By default, a test case will be interrupted after 5 minutes if it has not finished executing. You can customize the default timeout value in the GdUnit Settings. A test case that is interrupted by a timeout is marked and reported as a failure. | GdScript | C# | . | Sets the test execution timeout to 2s. func test_with_timeout(_timeout := 2000): ... 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | Sets the test execution timeout to 2s. [TestCase(Timeout = 2000)] public async Task ATestWithTimeout() { ... | . fuzzer parameters . To learn how to use the fuzzer parameter, please refer to the Using Fuzzers section . test_parameters . To learn how to use parameterized tests, please refer to the Parameterized TestCases section . ",
    "url": "/gdUnit4/latest/testing/test-case/#testcase-parameters",
    
    "relUrl": "/testing/test-case/#testcase-parameters"
  },"133": {
    "doc": "Test Case",
    "title": "When to Use Fail Fast with Multiple Assertions",
    "content": "Advice Since GdScript does not have exceptions, we need to manually define an exit strategy to fail fast and avoid unnecessary test execution. When you have multiple assertions in a single test case, it’s important to consider using fail fast techniques to avoid unnecessary test execution and get clearer failure reports. Why Use Fail Fast? . By default, GdUnit4 will continue executing all assertions in a test case even after one fails. While this can provide comprehensive feedback about all failing conditions, it can also lead to: . | Cascading failures: Later assertions may fail because earlier ones didn’t establish the expected state | Misleading error messages: Subsequent failures might not represent real issues but rather consequences of the first failure | Debugger interruptions: In debug mode, accessing properties on null objects will cause the debugger to break with runtime errors, stopping test execution unexpectedly | Longer execution time: Unnecessary processing when the test has already failed | Cluttered output: Multiple failure messages when only the first one is relevant | . Example Without Fail Fast . func test_player_setup(): var player = create_player() # If this fails, the following assertions may not make sense assert_object(player).is_not_null() # In debug mode: debugger will break here with null reference error if player is null # In release mode: will continue and show confusing assertion failure messages assert_str(player.name)\\ .is_equal(\"Hero\")\\ .starts_with(\"H\") assert_int(player.health).is_equal(100) assert_bool(player.is_alive()).is_true() . Example With Fail Fast . func test_player_setup(): var player = create_player() # Check critical precondition first assert_object(player).is_not_null() if is_failure(): return # Now we can safely test player properties using fluent syntax assert_str(player.name)\\ .is_equal(\"Hero\")\\ .starts_with(\"H\") if is_failure(): return assert_int(player.health)\\ .is_equal(100)\\ .is_greater(0) if is_failure(): return assert_bool(player.is_alive()).is_true() . Using fail() for Complex Conditions . Sometimes you need to fail based on complex logic that can’t be expressed with standard assertions: . func test_game_state_validation(): var game_state = get_current_game_state() # Complex validation that requires custom logic if game_state.level &gt; 10 and game_state.player_health &lt;= 0 and not game_state.has_revival_item: fail(\"Invalid game state: Player cannot survive level 10+ with 0 health and no revival items\") return # Continue with standard assertions using fluent syntax assert_that(game_state.is_valid()).is_true() if is_failure(): return assert_int(game_state.score)\\ .is_greater_equal(0)\\ .is_less(1000000) . Best Practices . | Use fail fast for dependent assertions: When later assertions depend on earlier ones being true | Check critical preconditions first: Validate that objects exist and are in the expected state before testing their properties | Use fail() for complex conditions: When standard assertions can’t express the validation logic you need | Keep tests focused: Consider splitting complex test cases with many assertions into smaller, more focused tests | . ",
    "url": "/gdUnit4/latest/testing/test-case/#multiple-assertions-fail-fast",
    
    "relUrl": "/testing/test-case/#multiple-assertions-fail-fast"
  },"134": {
    "doc": "Test Case",
    "title": "Test Case",
    "content": " ",
    "url": "/gdUnit4/latest/testing/test-case/",
    
    "relUrl": "/testing/test-case/"
  },"135": {
    "doc": "Test Suite",
    "title": "GdUnit Test Suite",
    "content": " ",
    "url": "/gdUnit4/latest/testing/test-suite/#gdunit-test-suite",
    
    "relUrl": "/testing/test-suite/#gdunit-test-suite"
  },"136": {
    "doc": "Test Suite",
    "title": "TestSuite Definition",
    "content": "A TestSuite is a collection of tests that are aligned to a specific class or module that you want to test. When writing tests, it is common to find that several tests require similar test data to be created before and cleaned up after the test run. GdUnit TestSuites allow you to define pre-initialized test data and cleanup (hooks) that will be executed at specific points during test execution. In addition to containing multiple test cases, a TestSuite can also contain test setup and teardown hooks that are executed before and after each test case, as well as before and after the entire TestSuite. This allows you to control the test environment and ensure that tests are executed in a consistent and repeatable manner. | TestSuite Hooks | . ",
    "url": "/gdUnit4/latest/testing/test-suite/#testsuite-definition",
    
    "relUrl": "/testing/test-suite/#testsuite-definition"
  },"137": {
    "doc": "Test Suite",
    "title": "TestSuite Example",
    "content": ". | GdScript | C# | . | Defines a TestSuite with two TestCases . extends GdUnitTestSuite func before() -&gt; void: # Setup suite-level shared resources, expensive setup func after() -&gt; void: # Cleanup suite-level shared resources, expensive setup func test_string_to_lower() -&gt; void: assert_str(\"AbcD\".to_lower()).is_equal(\"abcd\") func test_string_to_upper() -&gt; void: assert_str(\"AbcD\".to_upper()).is_equal(\"ABCD\") . | Use the [TestSuite] attribute to define TestSuite. namespace Examples; using GdUnit4; using static GdUnit4.Assertions; [TestSuite] public class GdUnitExampleTest { [Before] public void Setup() { // Setup suite-level shared resources, expensive setup } [After] public void Setup() { // Cleanup suite-level shared resources, expensive setup } [TestCase] public void StringToLower() { AssertString(\"AbcD\".ToLower()).IsEqual(\"abcd\"); } [TestCase] public void StringToUpper() { AssertString(\"AbcD\".ToUpper()).IsEqual(\"ABCD\"); } } . | . ",
    "url": "/gdUnit4/latest/testing/test-suite/#testsuite-example",
    
    "relUrl": "/testing/test-suite/#testsuite-example"
  },"138": {
    "doc": "Test Suite",
    "title": "The TestSuite Execution Graph",
    "content": ". | GdScript | C# | . | . | . | . ",
    "url": "/gdUnit4/latest/testing/test-suite/#the-testsuite-execution-graph",
    
    "relUrl": "/testing/test-suite/#the-testsuite-execution-graph"
  },"139": {
    "doc": "Test Suite",
    "title": "Test Suite",
    "content": " ",
    "url": "/gdUnit4/latest/testing/test-suite/",
    
    "relUrl": "/testing/test-suite/"
  },"140": {
    "doc": "Unit Testing",
    "title": "Unit Tests",
    "content": "What is Unit Testing? Unit testing is a fundamental practice in software development that involves testing individual components or “units” of your code to ensure they work as expected in isolation. In game development, a unit typically refers to a small piece of functionality, such as a single function, method, or class. The goal of unit testing is to verify that each unit of your code performs its intended task correctly and to catch bugs early in the development process. ",
    "url": "/gdUnit4/latest/testing/unit-testing/#unit-tests",
    
    "relUrl": "/testing/unit-testing/#unit-tests"
  },"141": {
    "doc": "Unit Testing",
    "title": "Key Characteristics of Unit Testing",
    "content": ". | Isolation: Each test targets a specific piece of code, independent of other parts of the system. This isolation helps identify which component is responsible for any given issue. | Automated: Unit tests are usually automated, allowing developers to run them frequently, quickly, and consistently. This automation is especially useful for catching regressions after changes are made to the codebase. | Fast and Focused: Unit tests should be small and fast to execute, focusing on a single “unit” of functionality. This makes them ideal for verifying specific behaviors, such as a character’s movement logic or a function that calculates in-game scores. | . ",
    "url": "/gdUnit4/latest/testing/unit-testing/#key-characteristics-of-unit-testing",
    
    "relUrl": "/testing/unit-testing/#key-characteristics-of-unit-testing"
  },"142": {
    "doc": "Unit Testing",
    "title": "Benefits of Unit Testing",
    "content": ". | Early Bug Detection: By testing individual components, you can detect and fix bugs early in the development cycle before they affect other parts of your game. Improved Code Quality:** Writing unit tests encourages developers to write modular, maintainable, and well-documented code. It also helps ensure that each unit of functionality behaves as intended. | Refactoring Confidence: Unit tests act as a safety net when refactoring or optimizing code. If all tests pass after changes are made, you can be confident that your updates haven’t introduced new bugs. | Documentation: Unit tests serve as a form of documentation by demonstrating how specific functions or classes are intended to be used, making it easier for other developers to understand the codebase. | . ",
    "url": "/gdUnit4/latest/testing/unit-testing/#benefits-of-unit-testing",
    
    "relUrl": "/testing/unit-testing/#benefits-of-unit-testing"
  },"143": {
    "doc": "Unit Testing",
    "title": "Writing Unit Tests in Game Development",
    "content": "In the context of game development, unit tests can be used to verify: . | Game Logic: Testing rules and mechanics, such as character health calculations, score updates, or level progression. | Math Functions: Verifying mathematical calculations, such as physics equations or vector operations. | Utility Functions: Testing helper functions that perform operations like data parsing, string manipulation, or AI decision-making. | State Management: Ensuring that game states (e.g., paused, active, game-over) transition correctly and behave as expected. | . ",
    "url": "/gdUnit4/latest/testing/unit-testing/#writing-unit-tests-in-game-development",
    
    "relUrl": "/testing/unit-testing/#writing-unit-tests-in-game-development"
  },"144": {
    "doc": "Unit Testing",
    "title": "Unit Testing",
    "content": " ",
    "url": "/gdUnit4/latest/testing/unit-testing/",
    
    "relUrl": "/testing/unit-testing/"
  },"145": {
    "doc": "Argument Matchers",
    "title": "Argument Matchers",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/argument_matchers/",
    
    "relUrl": "/advanced_testing/argument_matchers/"
  },"146": {
    "doc": "Argument Matchers",
    "title": "Definition",
    "content": "GdUnit4 provides a set of argument matchers designed to facilitate testing of function calls with specific argument types. Argument matchers allow you to verify the behavior of a function call without needing to specify the exact argument value(s). This is particularly useful when you’re interested in verifying the type of argument passed to a function rather than its exact value. Using argument matchers enhances the flexibility and expressiveness of your tests by allowing you to focus on the relevant aspects of function behavior. Advice Argument Matchers are currently only supported for GdScripts. Usage . Argument matchers can be employed in various scenarios, such as: . | Assert Functions: When verifying assertions and not interested in the exact value: # Verifies that the value is a variant integer assert_that(100).is_equal(any_int()) # This check will fail as the value is not a boolean assert_that(100).is_equal(any_bool()) . | Assert Signal: When you’re only interested in whether a signal is emitted, regardless of its arguments: # Waits until signal 'test_signal_counted' is emitted with signal arguments as an integer await assert_signal(signal_emitter).is_emitted(\"test_signal_counted\", [any_int()]) . | Mock Verification: When verifying function calls with specific argument types: # Verifies that the function `set_message` is called twice with any string argument verify(mock, 2).set_message(any_string()) . | Any Matcher: In this example using the any() matcher allows you to focus on the number of function calls without concerning yourself with the specific value of the argument is passed. # Verifies that the function `set_message` is called twice with any argument verify(mock, 2).set_message(any()) . | . Argument Matcher Overview . The following matchers are available: . | Argument Matcher | Description | . | any | Argument matcher to match any argument | . | any_aabb | Argument matcher to match any AABB value | . | any_array | Argument matcher to match any Array value | . | any_basis | Argument matcher to match any Basis value | . | any_bool | Argument matcher to match any boolean value | . | any_class | Argument matcher to match any instance of given class | . | any_color | Argument matcher to match any Color value | . | any_dictionary | Argument matcher to match any Dictionary value | . | any_float | Argument matcher to match any float value | . | any_int | Argument matcher to match any integer value | . | any_node_path | Argument matcher to match any NodePath value | . | any_object | Argument matcher to match any Object value | . | any_packed_byte_array | Argument matcher to match any PackedByteArray value | . | any_packed_color_array | Argument matcher to match any PackedColorArray value | . | any_packed_float32_array | Argument matcher to match any PackedFloat32Array value | . | any_packed_float64_array | Argument matcher to match any PackedFloat64Array value | . | any_packed_int32_array | Argument matcher to match any PackedInt32Array value | . | any_packed_int64_array | Argument matcher to match any PackedInt64Array value | . | any_packed_string_array | Argument matcher to match any PackedStringArray value | . | any_packed_vector2_array | Argument matcher to match any PackedVector2Array value | . | any_packed_vector3_array | Argument matcher to match any PackedVector3Array value | . | any_plane | Argument matcher to match any Plane value | . | any_quat | Argument matcher to match any Quaternion value | . | any_rect2 | Argument matcher to match any Rect2 value | . | any_rid | Argument matcher to match any RID value | . | any_string | Argument matcher to match any string value | . | any_transform_2d | Argument matcher to match any Transform2D value | . | any_transform_3d | Argument matcher to match any Transform3D value | . | any_vector | Argument matcher to match any Vector typed value | . | any_vector2 | Argument matcher to match any Vector2 value | . | any_vector2i | Argument matcher to match any Vector2i value | . | any_vector3 | Argument matcher to match any Vector3 value | . | any_vector3i | Argument matcher to match any Vector3i value | . | any_vector4 | Argument matcher to match any Vector4 value | . | any_vector4i | Argument matcher to match any Vector3i valu | . ",
    "url": "/gdUnit4/latest/advanced_testing/argument_matchers/#definition",
    
    "relUrl": "/advanced_testing/argument_matchers/#definition"
  },"147": {
    "doc": "Argument Matchers",
    "title": "Build your own custom Argument Matcher",
    "content": "You can write your own argument matcher if necessary. You can do this by extend from class GdUnitArgumentMatcher and implement the is_match function. # base class of all argument matchers class_name GdUnitArgumentMatcher extends Reference # the fuction you have to override in your custom matcher func is_match(value) -&gt; bool: return true . Here is a simple example of how to write your own argument matcher. # a simple class we want to test class_name MyClass extends Reference var _value:int func set_value(value :int): _value = value . The custom argument matcher: . class PeekMatcher extends GdUnitArgumentMatcher: var _peek :int func _init(peek :int): _peek = peek func is_match(value) -&gt; bool: return value &gt; _peek . Just to clarify, the PeekMatcher class is an implementation of the GdUnitArgumentMatcher abstract class, which provides the is_match() function. In this example, the is_match method checks if the argument is greater than the _peek value passed in the constructor. The test: . func test_custom_matcher(): # we mock the custom class here var mocked_test_class :MyClass = mock(MyClass) mocked_test_class.set_value(1000) mocked_test_class.set_value(1001) mocked_test_class.set_value(1002) mocked_test_class.set_value(2002) # counts 1001, 1002, 2002 = 3 times verify(mocked_test_class, 3).set_value(PeekMatcher.new(1000)) # counts 2002 = 1 times verify(mocked_test_class, 1).set_value(PeekMatcher.new(2000)) . Then in the test, we create a mocked_test_class object and call its set_value method with different arguments. Finally, we use verify to check if the method was called with arguments that meet the condition of the PeekMatcher. ",
    "url": "/gdUnit4/latest/advanced_testing/argument_matchers/#build-your-own-custom-argument-matcher",
    
    "relUrl": "/advanced_testing/argument_matchers/#build-your-own-custom-argument-matcher"
  },"148": {
    "doc": "Command Line Tool",
    "title": "Command Line Tool",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/",
    
    "relUrl": "/advanced_testing/cmd/"
  },"149": {
    "doc": "Command Line Tool",
    "title": "The GdUnit Command Line Tool",
    "content": "GdUnit4 provides a command line tool named res://addons/gdUnit4/bin/GdUnitCmdTool.gd that allows you to run a specific set of test suites and tests from the command line. The tool provides a set of commands that can be used to control the execution of tests. You can use the provided scripts addons/gdunit4/runtest.sh for linux/macos and addons/gdunit4/runtest.cmd for windows to execute the tool. To get an overview of the available commands, execute it with the command -help. ---------------------------------------------------------------------------------------------- GdUnit4 Commandline Tool Usage: runtest -a &lt;directory|path of testsiute&gt; runtest -a &lt;directory&gt; -i &lt;path of testsuite|testsuite_name|testsuite_name:test_name&gt; -- Options --------------------------------------------------------------------------------------- [-help] Shows this help message. [--help-advanced] Shows advanced options. [-a, --add] Adds the given test suite or directory to the execution pipeline. -a &lt;directory|path of testsuite&gt; [-i, --ignore] Adds the given test suite or test case to the ignore list. -i &lt;testsuite_name|testsuite_name:test-name&gt; [-c, --continue] By default GdUnit will abort on first test failure to be fail fast, instead of stop after first failure you can use this option to run the complete test set. [-conf, --config] Run all tests by given test configuration. Default is 'GdUnitRunner.cfg' -conf [testconfiguration.cfg] . ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#the-gdunit-command-line-tool",
    
    "relUrl": "/advanced_testing/cmd/#the-gdunit-command-line-tool"
  },"150": {
    "doc": "Command Line Tool",
    "title": "Preconditions to run on Windows 10/11",
    "content": ". | Setup test environment as follow . Add the environment variable GODOT_BIN by opening a termial and entering the command below. Replace the path D:\\develop\\Godot.exe with your own location where you have Godot installed. setx GODOT_BIN D:\\develop\\Godot.exe . | The GdUnit tool uses colored console output and needs to be enabled manually under Windows 10. Do it manually by open regedit: . The registry key at HKEY_CURRENT_USER\\Console\\VirtualTerminalLevel sets the global default behavior for processing ANSI escape sequences. Create a DWORD key (if necessary) and set its value to 1 to globally enable (or 0 to disable`) ANSI processing by default. Do this with the following command and open the terminal again: . REG ADD HKCU\\CONSOLE /f /v VirtualTerminalLevel /t REG_DWORD /d 1 . Now you can run your tests by ./addons/gdUnit4/runtest . | . ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#preconditions-to-run-on-windows-1011",
    
    "relUrl": "/advanced_testing/cmd/#preconditions-to-run-on-windows-1011"
  },"151": {
    "doc": "Command Line Tool",
    "title": "Preconditions to run on MacOS and Linux",
    "content": ". | Setup test environment as follow . Add the environment variable GODOT_BIN by opening a termial and entering the command below. Replace the path /Applications/Godot.app/Contents/MacOS/Godot with your own location where you have Godot installed. And make the tool script executable. export GODOT_BIN=/Applications/Godot.app/Contents/MacOS/Godot chmod +x ./addons/gdUnit4/runtest.sh . Now you can run your tests by ./addons/gdUnit4/runtest.sh . | . How to use . Please note the requirements described above! . You can use the tool to run a complete test package or only a specific set of execution definitions or tests. | Unix/Linix | Windows | . | # runs all testsuites located under the directory '/myProject/test' ./addons/gdUnit4/runtest.sh -a /myProject/test . | # runs all testsuites located under the directory '/myProject/test' ./addons/gdUnit4/runtest -a /myProject/test . | . You can specify one ore more directories for execution . | Unix/Linix | Windows | . | # runs all testsuites located under the directory /myProject/test/foo/bar1' and '/myProject/test/foo/bar3' ./addons/gdUnit4/runtest.sh -a /myProject/test/foo/bar1 -a /myProject/test/foo/bar3 . | # runs all testsuites located under the directory /myProject/test/foo/bar1' and '/myProject/test/foo/bar3' ./addons/gdUnit4/runtest -a /myProject/test/foo/bar1 -a /myProject/test/foo/bar3 . | . Sometimes it may be necessary to skip (ignore) some test suites or tests from test execution. You can do this easily with the command ‘-i’. | Unix/Linix | Windows | . | # runs all testsuites located under the directory /myProject/test' exclusive all tests located under '/myProject/test/foo/bar3' ./addons/gdUnit4/runtest.sh -a /myProject/test -i /myProject/test/foo/bar3 . | # runs all testsuites located under the directory /myProject/test' exclusive all tests located under '/myProject/test/foo/bar3' ./addons/gdUnit4/runtest -a /myProject/test -i /myProject/test/foo/bar3 . | . You can also specify skipping by testsuite name and/or testcase name. | Unix/Linix | Windows | . | # runs all testsuites located under the directory /myProject/test' exclusive testsuite 'ClassATest' and 'ClassBTest:test_abc' ./addons/gdUnit4/runtest.sh -a /myProject/test -i ClassATest -i ClassBTest:test_abc . | # runs all testsuites located under the directory /myProject/test' exclusive testsuite 'ClassATest' and 'ClassBTest:test_abc' ./addons/gdUnit4/runtest -a /myProject/test -i ClassATest -i ClassBTest:test_abc . | . You can also rerun the latest test execution (executed over the UI GdUnit-inspector) . | Unix/Linix | Windows | . | # loads latest GdUnitRunner.cfg and runs the configured tests ./addons/gdUnit4/runtest.sh -conf # loads a specific test configuration and runs the configured tests (since v1.0.6) ./addons/gdUnit4/runtest.sh -conf &lt;test_config.cfg&gt; . | # loads latest GdUnitRunner.cfg and runs the configured tests ./addons/gdUnit4/runtest -conf # loads a specific test configuration and runs the configured tests (since v1.0.6) ./addons/gdUnit4/runtest -conf &lt;test_config.cfg&gt; . | . The report is stored by default under /reports. You can also set the default directory for reports with the option -rd [directory]. By default, the last 20 reports are saved, older reports are automatically deleted. You can change the number with -rc [number]. See next section. ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#preconditions-to-run-on-macos-and-linux",
    
    "relUrl": "/advanced_testing/cmd/#preconditions-to-run-on-macos-and-linux"
  },"152": {
    "doc": "Command Line Tool",
    "title": "Advanced Options",
    "content": "You can control the created reports by advanced options. [-rd, --report-directory] Specifies the output directory in which the reports are to be written. The default is res://reports/. -rd &lt;directory&gt; [-rc, --report-count] Specifies how many reports are saved before they are deleted. The default is 20. -rc &lt;count&gt; . To get an overview of all advanced options use --help-advanced. ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#advanced-options",
    
    "relUrl": "/advanced_testing/cmd/#advanced-options"
  },"153": {
    "doc": "Command Line Tool",
    "title": "Return Codes",
    "content": "The tool ends with a certain return code, where you can check if the tests were completed successfully. 0 = all tests success 100 = ends with test failures 101 = ends with test warnings . ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#return-codes",
    
    "relUrl": "/advanced_testing/cmd/#return-codes"
  },"154": {
    "doc": "Command Line Tool",
    "title": "The Report",
    "content": "The GdUnit command line tool generates a modern HTML and JUnit report with which you can quickly get an overview of the executed tests. You can find the reports in the report folder as: . | index.htm - the HTML report | results.xml - the JUnit report | . The HTML report . ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#the-report",
    
    "relUrl": "/advanced_testing/cmd/#the-report"
  },"155": {
    "doc": "Command Line Tool",
    "title": "Report by Path",
    "content": "You can switch between the full list of executed test-suites or the view collected by paths. If you click on a test-suite you can view the report for a specific test-suite. ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#report-by-path",
    
    "relUrl": "/advanced_testing/cmd/#report-by-path"
  },"156": {
    "doc": "Command Line Tool",
    "title": "Select a Testsuite Report",
    "content": "By further selecting the test cases, the test errors can be viewed in the “Failure Report” window. ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#select-a-testsuite-report",
    
    "relUrl": "/advanced_testing/cmd/#select-a-testsuite-report"
  },"157": {
    "doc": "Command Line Tool",
    "title": "Logging",
    "content": "If logging is enabled in your project, the report saves the current log and can be viewed by clicking Logging. ",
    "url": "/gdUnit4/latest/advanced_testing/cmd/#logging",
    
    "relUrl": "/advanced_testing/cmd/#logging"
  },"158": {
    "doc": "Flaky Tests",
    "title": "Flaky Tests",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/flaky-tests/",
    
    "relUrl": "/advanced_testing/flaky-tests/"
  },"159": {
    "doc": "Flaky Tests",
    "title": "Definition",
    "content": "Flaky tests are tests that may pass or fail inconsistently, even when run against the same code. This can happen due to various reasons such as timing issues, race conditions, or external dependencies that can cause unexpected behaviors during test execution. How to handle flaky tests in GdUnit4 . GdUnit4 provides built-in support for handling flaky tests to help improve the reliability of your test suite. This feature allows tests that fail intermittently to be re-executed automatically, reducing the chance of reporting false negatives. Flaky Test Settings . | Flaky Test The Flaky Test setting allows you to enable or disable the detection and handling of flaky tests. When enabled, GdUnit4 will automatically retry tests that fail, helping to distinguish between actual test failures and sporadic issues caused by flaky tests. Enabled: GdUnit4 will monitor test failures and automatically rerun tests that fail to determine if they are truly faulty or just flaky. Disabled: No additional handling for flaky tests. All test failures will be reported immediately. | Flaky Max Retries The Flaky Max Retries setting determines the number of times a flaky test should be retried before it is considered a failure. This helps to confirm whether a test is truly failing or just encountering a temporary issue. Default Value: 3 retries Range: Any positive integer . | . Best Practices for Handling Flaky Tests . | Identify the Cause: Before relying on flaky test handling, try to identify and fix the underlying cause of flaky behavior. Common causes include race conditions, external dependencies, or timing issues. | Use Retries Sparingly: While flaky test retries can help reduce noise in your test reports, excessive retries can mask legitimate issues. Use them judiciously. | Monitor Test Stability: Keep track of test stability over time. If a test consistently fails even with retries, it may need to be rewritten or reviewed. | . Conclusion . Handling flaky tests effectively can significantly improve the stability and reliability of your test suite. By using GdUnit4’s built-in settings for flaky tests, you can automatically manage intermittent test failures and focus on addressing real issues in your codebase. ",
    "url": "/gdUnit4/latest/advanced_testing/flaky-tests/#definition",
    
    "relUrl": "/advanced_testing/flaky-tests/#definition"
  },"160": {
    "doc": "Fuzzing",
    "title": "Testing with Fuzzers",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/fuzzing/#testing-with-fuzzers",
    
    "relUrl": "/advanced_testing/fuzzing/#testing-with-fuzzers"
  },"161": {
    "doc": "Fuzzing",
    "title": "Definition",
    "content": "Fuzz Testing or Fuzzing is a software testing technique of putting invalid or random data called FUZZ into software system to discover coding errors and security loopholes. The purpose of fuzz testing is inserting data using automated or semi-automated techniques and testing the system for various exceptions like system crashing or failure of built-in code, etc. | GdScript | C# | . | func test_my_test(fuzzer := &lt;Fuzzer&gt;, &lt;fuzzer_iterations&gt;, &lt;fuzzer_seed&gt;): . | . | . Advice Fuzzing is current only supported for GdScripts. ",
    "url": "/gdUnit4/latest/advanced_testing/fuzzing/#definition",
    
    "relUrl": "/advanced_testing/fuzzing/#definition"
  },"162": {
    "doc": "Fuzzing",
    "title": "Fuzzers Overview",
    "content": "For now GdUnit provides only this very small set of Fuzzer implementations and will be extend later! . | Fuzzer | Description | . | rangei(from, to) | Generates a random integer in the range from from to to, inclusive. | . | eveni(from, to) | Generates an even integer in the range from from to to, inclusive. | . | oddi(from, to) | Generates an odd integer in the range from from to to, inclusive. | . | rangev2(from, to) | Generates a random 2D vector with each component in the range from from to to, inclusive. | . | rangev3(from, to) | Generates a random 3D vector with each component in the range from from to to, inclusive. | . | rand_str(min_length, max_length, charset) | Generates a random string with a length between min_length and max_length, inclusive, using characters from the specified charset. | . ",
    "url": "/gdUnit4/latest/advanced_testing/fuzzing/#fuzzers-overview",
    
    "relUrl": "/advanced_testing/fuzzing/#fuzzers-overview"
  },"163": {
    "doc": "Fuzzing",
    "title": "Using Fuzzers",
    "content": "To use a fuzzer, you only need to add the argument ‘fuzzer = ' to your test. The name of the fuzzer argument must always start with the prefix `fuzzer`, followed by characters such as '_' and alphanumeric characters. If your test is configured with a fuzzer argument, it will iterate multiple times with a new value generated by the fuzzer implementation. The default number of iterations is set to 1000 and can be configured with the optional argument fuzzer_iterations. If you want to have the same fuzzer results, you can set a seed with the optional argument fuzzer_seed. | GdScript | C# | . | func test_name(fuzzer := &lt;Fuzzer&gt;, &lt;fuzzer_iterations&gt;, &lt;fuzzer_seed&gt;): . | .. | . | Example . Here is an example of using a fuzzer that generates random values in the range from -23 to 22 and iterates 100 times: . func test_fuzzer_inject_value(fuzzer := Fuzzers.rangei(-23, 22), _fuzzer_iterations := 100) assert_int(fuzzer.next_value()).is_between(-23, 22) # using multiple fuzzers in test are allowed func test_fuzzer_inject_value(fuzzer_a := Fuzzers.rangei(-23, 22), fuzzer_b := Fuzzers.rangei(0, 42), _fuzzer_iterations := 100): assert_int(fuzzer_a.next_value()).is_between(-23, 22) assert_int(fuzzer_b.next_value()).is_between(-23, 22) . 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | fuzzer_iterations . If you want to iterate more or less than the default of 1000 iterations, you can set the number of iterations using the fuzzer_iterations argument. # execute this test 5000 times func test_fuzzer_inject_value(fuzzer := Fuzzers.rangei(-100000, 100000), _fuzzer_iterations := 5000): . 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | fuzzer_seed . If you want to ensure consistent test results for a random generating fuzzer, you can specify a seed using the fuzzer_seed argument. # execute this test with a seed value of 123456 func test_fuzzer_inject_value(fuzzer := Fuzzers.rangei(-100000, 100000), _fuzzer_seed := 123456): . 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | . ",
    "url": "/gdUnit4/latest/advanced_testing/fuzzing/#using-fuzzers",
    
    "relUrl": "/advanced_testing/fuzzing/#using-fuzzers"
  },"164": {
    "doc": "Fuzzing",
    "title": "Create a Custom Fuzzer",
    "content": "If you need a custom fuzzer you do this by extend from class Fuzzer and implement the function next_value() . # Base interface for fuzz testing class_name Fuzzer extends Resource # generates the next fuzz value # needs to be implement func next_value(): push_error(\"Invalid vall. Fuzzer not implemented 'next_value()'\") return null . Here a small example custom fuzzer implementation: . # A simple test fuzzer where a random value of a hard coded set of values is provided class TestFuzzer extends Fuzzer: var _data := [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] func next_value(): return _data[randi_range(0, _data.size())] . ",
    "url": "/gdUnit4/latest/advanced_testing/fuzzing/#create-a-custom-fuzzer",
    
    "relUrl": "/advanced_testing/fuzzing/#create-a-custom-fuzzer"
  },"165": {
    "doc": "Fuzzing",
    "title": "Fuzzing",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/fuzzing/",
    
    "relUrl": "/advanced_testing/fuzzing/"
  },"166": {
    "doc": "Session Hooks",
    "title": "Testing with Hooks",
    "content": "Test hooks provide powerful extension points in GdUnit4 that allow you to execute custom logic at specific moments during the test lifecycle. They enable sophisticated test environment management, custom reporting, and integration with external systems. ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#testing-with-hooks",
    
    "relUrl": "/advanced_testing/hooks/#testing-with-hooks"
  },"167": {
    "doc": "Session Hooks",
    "title": "What are Test Hooks?",
    "content": "Test hooks are classes that extend GdUnitTestSessionHook and implement methods that run at the beginning and end of test sessions. Unlike test fixtures (before and after methods) that run for individual tests, hooks operate at the session level, making them ideal for: . | Setting up and tearing down shared test environments | Managing database connections or external services | Generating custom test reports | Implementing test metrics and monitoring | Integrating with CI/CD pipelines | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#what-are-test-hooks",
    
    "relUrl": "/advanced_testing/hooks/#what-are-test-hooks"
  },"168": {
    "doc": "Session Hooks",
    "title": "Hook Lifecycle",
    "content": "Understanding when hooks execute is crucial for proper implementation: . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#hook-lifecycle",
    
    "relUrl": "/advanced_testing/hooks/#hook-lifecycle"
  },"169": {
    "doc": "Session Hooks",
    "title": "GdUnitTestSessionHook API",
    "content": "Every custom hook must extend GdUnitTestSessionHook and implement two key methods: . | GdScript | C# | . | class_name MyCustomHook extends GdUnitTestSessionHook func _init(): super(\"MyCustomHook\", \"Description of what this hook does\") func startup(session: GdUnitTestSession) -&gt; GdUnitResult: # Initialize resources before tests run ... # Send status messages through GdUnit messaging system session.send_message(\"Custom hook initialized\") # Return success or error return GdUnitResult.success() func shutdown(session: GdUnitTestSession) -&gt; GdUnitResult: # Clean up resources after tests complete ... # Send cleanup status session.send_message(\"Custom hook cleanup completed\") return GdUnitResult.success() . | Advice The GdUnitTestSessionHook is current not implemented and will be released with gdUnit4.api v5.1.0 using GdUnit4; using Godot; public class MyCustomHook : GdUnitTestSessionHook { public MyCustomHook() : base(\"MyCustomHook\", \"Description of what this hook does\") { } public override GdUnitResult Startup(GdUnitTestSession session) { // Initialize resources before tests run ... // Send status messages through GdUnit messaging system session.SendMessage(\"Custom hook initialized\"); // Return success or error return GdUnitResult.Success(); } public override GdUnitResult Shutdown(GdUnitTestSession session) { // Clean up resources after tests complete ... // Send cleanup status session.SendMessage(\"Custom hook cleanup completed\"); return GdUnitResult.Success(); } } . | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#gdunittestsessionhook-api",
    
    "relUrl": "/advanced_testing/hooks/#gdunittestsessionhook-api"
  },"170": {
    "doc": "Session Hooks",
    "title": "GdUnitTestSession API",
    "content": "The GdUnitTestSession object passed to your hooks provides several useful properties and methods: . Properties . | Property | Type | Description | . | _test_cases | Array[GdUnitTestCase] | Collection of test cases to be executed (read-only) | . | report_path | String | File system path where test reports will be generated | . Methods . | Method | Description | . | send_message(message: String) | Sends a message through the GdUnit messaging system | . | find_test_by_id(id: GdUnitGUID) | Finds a test case by its unique identifier | . Signals . | Signal | Description | . | test_event(event: GdUnitEvent) | Emitted when test execution events occur | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#gdunittestsession-api",
    
    "relUrl": "/advanced_testing/hooks/#gdunittestsession-api"
  },"171": {
    "doc": "Session Hooks",
    "title": "Practical Examples",
    "content": "Example 1: Database Test Hook . This example shows how to set up and tear down a test database for integration testing: . | GdScript | . | class_name DatabaseTestHook extends GdUnitTestSessionHook var db_connection func _init(): super(\"DatabaseTestHook\", \"Manages test database lifecycle\") func startup(session: GdUnitTestSession) -&gt; GdUnitResult: session.send_message(\"Creating test database: %s\" % test_db_name) # Connect to database server db_connection = DatabaseManager.connect_to_server({ \"host\": \"localhost\", \"port\": 5432, \"user\": \"test_user\", \"password\": \"test_password\" }) if not db_connection: return GdUnitResult.error(\"Failed to connect to database server\") # Create test database if not db_connection.create_database(\"test_db_name\"): return GdUnitResult.error(\"Failed to create test database\") session.send_message(\"Test database ready\") return GdUnitResult.success() func shutdown(session: GdUnitTestSession) -&gt; GdUnitResult: session.send_message(\"Cleaning up test database\") if db_connection: # Drop test database db_connection.drop_database(\"test_db_name\") db_connection.disconnect() session.send_message(\"Database cleanup completed\") return GdUnitResult.success() . | . Example 2: Performance Monitoring Hook . This example tracks test execution performance and generates a report: . | GdScript | . | class_name PerformanceMonitorHook extends GdUnitTestSessionHook var start_time: int var test_metrics: Dictionary = {} var current_suite: String = \"\" func _init(): super(\"PerformanceMonitor\", \"Tracks test execution metrics\") func startup(session: GdUnitTestSession) -&gt; GdUnitResult: start_time = Time.get_ticks_msec() # Subscribe to test events session.test_event.connect(_on_test_event) session.send_message(\"Performance monitoring started for %d test cases\" % session._test_cases.size()) return GdUnitResult.success() func shutdown(session: GdUnitTestSession) -&gt; GdUnitResult: var total_time = Time.get_ticks_msec() - start_time # Generate performance report var report = _generate_report(total_time) # Save report in the same directory as test reports var report_dir = session.report_path.get_base_dir() var perf_report_path = report_dir.path_join(\"performance_metrics.json\") var file = FileAccess.open(perf_report_path, FileAccess.WRITE) if file: file.store_string(JSON.stringify(report)) file.close() session.send_message(\"Performance report saved to: %s\" % perf_report_path) return GdUnitResult.success() func _on_test_event(event: GdUnitEvent) -&gt; void: match event.type: GdUnitEvent.TESTSUITE_BEFORE: current_suite = event.suite_name test_metrics[current_suite] = { \"start_time\": Time.get_ticks_msec(), \"tests\": {} } GdUnitEvent.TESTCASE_AFTER: if current_suite in test_metrics: test_metrics[current_suite][\"tests\"][event.test_name] = { \"duration\": event.elapsed_time, \"status\": \"passed\" if event.is_success else \"failed\" } func _generate_report(total_time: int) -&gt; Dictionary: return { \"total_duration_ms\": total_time, \"suites\": test_metrics, \"timestamp\": Time.get_datetime_string_from_system() } . | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#practical-examples",
    
    "relUrl": "/advanced_testing/hooks/#practical-examples"
  },"172": {
    "doc": "Session Hooks",
    "title": "Registering Hooks",
    "content": "To use your custom hooks, you need to register them in the GdUnit4 settings: . | Open the GdUnit4 Settings (Tools button in the GdUnit Inspector) | Navigate to the Hooks tab | Click the + (Add) button | Select your hook class file | Enable the hook using the checkbox | Adjust priority if needed using the arrow buttons | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#registering-hooks",
    
    "relUrl": "/advanced_testing/hooks/#registering-hooks"
  },"173": {
    "doc": "Session Hooks",
    "title": "Best Practices",
    "content": "Error Handling . Always return appropriate GdUnitResult values to indicate success or failure: . func startup(session: GdUnitTestSession) -&gt; GdUnitResult: if not initialize_resources(): return GdUnitResult.error(\"Failed to initialize resources: %s\" % get_last_error()) if not validate_configuration(): return GdUnitResult.error(\"Invalid configuration: missing required settings\") session.send_message(\"All systems initialized successfully\") return GdUnitResult.success() . Resource Management . Ensure proper cleanup in the shutdown method, even if startup failed: . func shutdown(session: GdUnitTestSession) -&gt; GdUnitResult: var errors = [] # Always attempt cleanup, regardless of startup success if resource_a: if not resource_a.cleanup(): errors.append(\"Failed to cleanup resource_a\") resource_a = null if errors.is_empty(): return GdUnitResult.success() else: return GdUnitResult.error(\", \".join(errors)) . Session Communication . Use the session object effectively for communication and event handling: . func startup(session: GdUnitTestSession) -&gt; GdUnitResult: # Send informational messages session.send_message(\"Initializing test environment...\") # Access test configuration var test_count = session._test_cases.size() session.send_message(\"Preparing to run %d test cases\" % test_count) # Use report path for output files var report_dir = session.report_path.get_base_dir() session.send_message(\"Reports will be saved to: %s\" % report_dir) # Subscribe to test events session.test_event.connect(_on_test_event) return GdUnitResult.success() func _on_test_event(event: GdUnitEvent) -&gt; void: # React to different event types match event.type: GdUnitEvent.INIT: print(\"Test runner initialized\") GdUnitEvent.TESTSUITE_BEFORE: print(\"Starting suite: %s\" % event.suite_name) GdUnitEvent.TESTCASE_BEFORE: print(\"Starting test: %s\" % event.test_name) GdUnitEvent.TESTCASE_AFTER: print(\"Finished test: %s (success: %s)\" % [event.test_name, event.is_success]) GdUnitEvent.TESTSUITE_AFTER: print(\"Finished suite: %s\" % event.suite_name) GdUnitEvent.STOP: print(\"Test execution stopped\") . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#best-practices",
    
    "relUrl": "/advanced_testing/hooks/#best-practices"
  },"174": {
    "doc": "Session Hooks",
    "title": "System Hooks",
    "content": "GdUnit4 includes built-in system hooks that cannot be removed: . GdUnitHtmlTestReporter . Extends GdUnitBaseReporterTestSessionHook to generate interactive HTML test reports with: . | Detailed test results and execution times | Collapsible sections for easy navigation | Visual charts and statistics | Failure details with stack traces | . GdUnitXMLTestReporter . Extends GdUnitBaseReporterTestSessionHook to generate JUnit-compatible XML reports for: . | CI/CD pipeline integration | Test result aggregation tools | Automated build systems | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#system-hooks",
    
    "relUrl": "/advanced_testing/hooks/#system-hooks"
  },"175": {
    "doc": "Session Hooks",
    "title": "Troubleshooting",
    "content": "Common Issues . | Issue | Solution | . | Hook not executing | Ensure the hook is enabled in settings and the class extends GdUnitTestSessionHook | . | Startup failures | Check console output for error messages; startup must return GdUnitResult.success() | . | Cleanup not running | Shutdown always runs; check for errors in your shutdown implementation | . | Priority conflicts | Adjust hook order in settings; hooks execute top-to-bottom | . | Missing test events | Ensure you’re connected to session.test_event signal | . | Report path issues | Use session.report_path.get_base_dir() to get the directory | . Debug Tips . | Use session.send_message() for logging hook activities | Check the Godot console for detailed error messages | Test hooks in isolation before combining multiple hooks | Start with simple implementations and gradually add complexity | Use print() statements during development, but prefer session.send_message() for production | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#troubleshooting",
    
    "relUrl": "/advanced_testing/hooks/#troubleshooting"
  },"176": {
    "doc": "Session Hooks",
    "title": "See Also",
    "content": ". | Settings - Hooks Configuration - Configure and manage hooks in the GdUnit4 settings | Test Setup/Teardown - Learn about test-level fixtures | . ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/#see-also",
    
    "relUrl": "/advanced_testing/hooks/#see-also"
  },"177": {
    "doc": "Session Hooks",
    "title": "Session Hooks",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/hooks/",
    
    "relUrl": "/advanced_testing/hooks/"
  },"178": {
    "doc": "Advanced Testing",
    "title": "GdUnit4 Advanced Testing",
    "content": "Welcome to the GdUnit4 advanced testing page! Here, we will introduce you to a set of advanced techniques that can help you write comprehensive and effective tests for your Godot game. Prerequisites Before starting to read the advanced techniques, you should have a basic understanding of the Godot engine and the GDScript language. You should also have GdUnit4 installed and set up in your Godot project. ",
    "url": "/gdUnit4/latest/advanced_testing/index/#gdunit4-advanced-testing",
    
    "relUrl": "/advanced_testing/index/#gdunit4-advanced-testing"
  },"179": {
    "doc": "Advanced Testing",
    "title": "Overview",
    "content": "Here’s a list of advanced techniques we currently have available: . | Tools and Helpers | Test Session Hooks | Testing with Fuzzers | Testing with Parameterized TestCases | Testing Signals | Using Mocks | Using Spys | Using Argument Matchers | Testing Scenes | Orphan Nodes or Leaking Memory | Command Line Tool | . ",
    "url": "/gdUnit4/latest/advanced_testing/index/#overview",
    
    "relUrl": "/advanced_testing/index/#overview"
  },"180": {
    "doc": "Advanced Testing",
    "title": "Advanced Testing",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/index/",
    
    "relUrl": "/advanced_testing/index/"
  },"181": {
    "doc": "Mocking",
    "title": "Mocking / Mocks",
    "content": "Advice This Mocking implementation is only available for GDScripts, for C# you can use already existing mocking frameworks like Moq ",
    "url": "/gdUnit4/latest/advanced_testing/mock/#mocking--mocks",
    
    "relUrl": "/advanced_testing/mock/#mocking--mocks"
  },"182": {
    "doc": "Mocking",
    "title": "Definition",
    "content": "A mocked object is a dummy implementation of a class, in which you define the expected output of certain function calls. Mocked objects are configured to perform a specific behavior during testing, and they track all function calls and their parameters to the mocked object. This type of testing is sometimes referred to as behavior testing. Behavior testing does not check the result of a function call, but instead checks that a function is called with the correct parameters. For more detailed information about mocks, read this . Here an small example to mock the class TestClass: . | Example Class | Mock (RETURN_DEFAULTS) | Mock (CALL_REAL_FUNC) | . | class_name TestClass extends Node func message() -&gt; String: return \"a message\" . | func test_mock(): # create a mock for class 'TestClass' by mock mode `RETURN_DEFAULTS` (default) var mock := mock(TestClass) as TestClass # inital the mock will return a default value, for string means an empty string assert_str(mock.message()).is_empty() # new we override the return value for `message()` to return 'custom message' do_return(\"custom message\").on(mock).message() # the next call of `message()` will now return 'custom message' assert_str(mock.message()).is_equal(\"custom message\") . | func test_mock(): # create a mock for class 'TestClass' using mode `CALL_REAL_FUNC` var mock := mock(TestClass, CALL_REAL_FUNC) as TestClass # inital the mock will return a original value (calles the real implementation) assert_str(mock.message()).is_equal(\"a message\") # new we override the return value for `message()` to return 'custom message' do_return(\"custom message\").on(mock).message() # the next call of `message()` will now return 'custom message' assert_str(mock.message()).is_equal(\"custom message\") . | . ",
    "url": "/gdUnit4/latest/advanced_testing/mock/#definition",
    
    "relUrl": "/advanced_testing/mock/#definition"
  },"183": {
    "doc": "Mocking",
    "title": "How to use a Mock",
    "content": "Advice Mocking core functions are not possible since Godot has improved the GDScript performance. According to the Godot core developers, overwriting core functions is no longer supported, so there is no way to mock or spy on core functions anymore. To mock a class, you only need to use mock(&lt;class_name&gt;) or mock(&lt;resource_path&gt;) to create a mocked object instance using the given class name or path. A mocked instance is marked for auto-free, so you don’t need to free it manually. If you want to create a mock by class name, you have to define the class_name in your class. Otherwise, the class must be mocked by resource path. # Example class class_name TestClass extends Node ... # Create a mocked instance of the class 'TestClass' var mock := mock(TestClass) # Or create it by using the full resource path if no `class_name` is defined var mock := mock(\"res://project_name/src/TestClass.gd\") . You can also mock inner classes by using mock(&lt;class_name&gt;) with some preconditions. ",
    "url": "/gdUnit4/latest/advanced_testing/mock/#how-to-use-a-mock",
    
    "relUrl": "/advanced_testing/mock/#how-to-use-a-mock"
  },"184": {
    "doc": "Mocking",
    "title": "How and Why to Overwrite Functions",
    "content": "With a mock, you can override a specific function to return custom values. This allows you to simulate a function and return an expected value without calling the actual implementation. To override a function on your mocked class, use do_return(&lt;value&gt;) to specify the return value. Syntax do_return(&lt;value&gt;) .on(&lt;mock&gt;) .&lt;function([args])&gt;) . | Mock your class. | Define the return value. | Override the function you want to mock using .on() and .function_name([args]). | . # Create the mock var node := mock(Node) as Node # Define the return value on the mock `node` for function `get_name` do_return(\"NodeX\").on(node).get_name() . Here is an example: . # Create a mock from class `Node` var mocked_node := mock(Node) as Node # It returns 0 by default mocked_node.get_child_count() # Override function `get_child_count` to return 10 do_return(10).on(mocked_node).get_child_count() # The next call of `get_child_count` will now return 10 mocked_node.get_child_count() # It returns 'null' by default var node = mocked_node.get_child(0) assert_object(node).is_null() # Override function `get_child` to return a mocked 'Camera' for child index 0 do_return(mock(Camera)).on(mocked_node).get_child(0) # And a mocked 'Area' for child index 1 do_return(mock(Area)).on(mocked_node).get_child(1) # It now returns the Camera node at index 0 var node0 = mocked_node.get_child(0) assert_object(node0).is_instanceof(Camera) # And the Area node at index 1 var node1 = mocked_node.get_child(1) assert_object(node1).is_instanceof(Area) . ",
    "url": "/gdUnit4/latest/advanced_testing/mock/#how-and-why-to-overwrite-functions",
    
    "relUrl": "/advanced_testing/mock/#how-and-why-to-overwrite-functions"
  },"185": {
    "doc": "Mocking",
    "title": "Verification of Function Calls",
    "content": "A mock keeps track of all the function calls and their arguments. Use verify() on the mock to check if a certain function is called and how often it was called. | Function | Description | . | verify | Verifies that certain behavior happened at least once or an exact number of times. | . | verify_no_interactions | Verifies that no interactions happened on the mock. | . | verify_no_more_interactions | Verifies that the given mock has no unverified interactions. | . | reset | Resets the saved function call counters on a mock. | . verify . The verify() method is used to verify that a function was called a certain number of times. It takes two arguments: the mock instance and the expected number of times the function should have been called. You can also use argument matchers to verify that specific arguments were passed to the function. verify(&lt;mock&gt;, &lt;times&gt;).function(&lt;args&gt;) . Here’s an example: . var mocked_node :Node = mock(Node) # Verify we have no interactions currently on this instance verify_no_interactions(mocked_node) # Call with different arguments mocked_node.set_process(false) # 1 times mocked_node.set_process(true) # 1 times mocked_node.set_process(true) # 2 times # Verify how often we called the function with different argument verify(mocked_node, 1).set_process(false)# in sum one time with false verify(mocked_node, 2).set_process(true) # in sum two times with true # Verify will fail because we expect the function `set_process(true)` to be called 3 times but it was only called 2 times verify(mocked_node, 3).set_process(true) . verify_no_interactions . Verifies that no interactions happened on the mock. verify_no_interactions(&lt;mock&gt;) . Here’s an example: . var mocked_node := mock(Node) as Node # Test that we have no initial interactions on this mock verify_no_interactions(mocked_node) # Interact by calling `get_name()` mocked_node.get_name() # Now this verification will fail because we have interacted on this mock by calling `get_name` verify_no_interactions(mocked_node) . verify_no_more_interactions . This method checks if the specified mock has any unverified interactions. If the mock has recorded more interactions than you verified with verify(), an error is reported. verify_no_more_interactions(&lt;mock&gt;) . Here’s an example: . var mocked_node := mock(Node) as Node # Interact on two functions mocked_node.is_a_parent_of(null) mocked_node.set_process(false) # Verify that the mock interacts as expected verify(mocked_node).is_a_parent_of(null) verify(mocked_node).set_process(false) # Check that there are no further interactions with the mock verify_no_more_interactions(mocked_node) # Simulate an unexpected interaction with `set_process` mocked_node.set_process(false) # Verify that there are no further interactions with the mock # and that the previous unexpected interaction is detected (the test will fail here) verify_no_more_interactions(mocked_node) . In this example, the verify_no_more_interactions() method is used to check that no more interactions occur after the initial two interactions. The second call to set_process(false) is not expected and thus will result in a failure of the test. reset . Resets the recorded function interactions of the given mock. Sometimes we want to reuse an already created mock for different test scenarios and have to reset the recorded interactions. reset(&lt;mock&gt;) . Here’s an example: . var mocked_node :Node = mock(Node) # First, we test by interacting with two functions mocked_node.is_a_parent_of(null) mocked_node.set_process(false) # Verify if the interactions were recorded; at this point, two interactions are recorded verify(mocked_node).is_a_parent_of(null) verify(mocked_node).set_process(false) # Now, we want to test a different scenario and we need to reset the current recorded interactions reset(mocked_node) # Verify that the previously recorded interactions have been removed verify_no_more_interactions(mocked_node) # Continue testing mocked_node.set_process(true) verify(mocked_node).set_process(true) verify_no_more_interactions(mocked_node) . ",
    "url": "/gdUnit4/latest/advanced_testing/mock/#verification-of-function-calls",
    
    "relUrl": "/advanced_testing/mock/#verification-of-function-calls"
  },"186": {
    "doc": "Mocking",
    "title": "Mock Working Modes",
    "content": "When creating a mock, you can specify the working mode that defines the return value handling of function calls for a mock. The available working modes are: . | RETURN_DEFAULTS (default) This working mode returns default values for functions that have not been stubbed. For example, it returns null for functions that return objects and 0 for functions that return integers. You can use this mode if you only want to test specific interactions with the mock and do not care about the return values of other functions. The default return values for various types are: . | Type | Default value | . | TYPE_NIL | null | . | TYPE_BOOL | false | . | TYPE_INT | 0 | . | TYPE_REAL | 0.0 | . | TYPE_STRING | ”” | . | TYPE_VECTOR2 | Vector2.ZERO | . | TYPE_RECT2 | Rect2() | . | TYPE_VECTOR3 | Vector3.ZERO | . | TYPE_TRANSFORM2D | Transform2D() | . | TYPE_PLANE | Plane() | . | TYPE_QUAT | Quat() | . | TYPE_AABB | AABB() | . | TYPE_BASIS | Basis() | . | TYPE_TRANSFORM | Transform() | . | TYPE_COLOR | Color() | . | TYPE_NODE_PATH | NodePath() | . | TYPE_RID | RID() | . | TYPE_OBJECT | null | . | TYPE_DICTIONARY | Dictionary() | . | TYPE_ARRAY | Array() | . | TYPE_RAW_ARRAY | PackedByteArray() | . | TYPE_INT_ARRAY | PackedIntArray() | . | TYPE_REAL_ARRAY | PackedRealArray() | . | TYPE_STRING_ARRAY | PackedStringArray() | . | TYPE_VECTOR2_ARRAY | PackedVector2Array() | . | TYPE_VECTOR3_ARRAY | PackedVector3Array() | . | TYPE_COLOR_ARRAY | PackedColorArray() | . You can customize these default values by configuring the mock object to return a different value for unconfigured function calls using the when(&lt;mock&gt;).&lt;function&gt;().thenReturn(&lt;value&gt;) method. | CALL_REAL_FUNC This working mode calls the real function implementation instead of returning a default value. You can use this mode if you want to test the interaction between the mock and the real function implementation. | RETURN_DEEP_STUB (not yet implemented!) This working mode creates a deep stub for the mock object. It returns another mock object for every function call, allowing you to chain function calls on the mock object. You can use this mode if you want to test complex function interactions with the mock. | . It’s important to choose the right working mode for your test scenario to ensure that you are testing the intended behavior of the system under test. Here’s an example: . | RETURN_DEFAULTS | CALL_REAL_FUNC | RETURN_DEEP_STUB | . | If RETURN_DEFAULTS is used, all functions will return default values for a mocked class. var mock := mock(TestClass) as TestClass # Returns a default value (for String an empty value) assert_str(mock.message()).is_equal(\"\") . | If CALL_REAL_FUNC is used, all functions will return the value provided by the real implementation for a mocked class. Helpful when you only want to mock partial functions of a class. # build a mock with mode CALL_REAL_FUNC var mock := mock(TestClass, CALL_REAL_FUNC) as TestClass # returns the real implementation value assert_str(mock.message()).is_equal(\"a message\") # set a the return value to 'custom message' for the function message() do_return(\"custom message\").on(mock).message() # now the function message will return 'custom message' assert_str(mock.message()).is_equal(\"custom message\") . | WORK IN PROGRESS – NOT SUPPORTED YET!!! . If RETURN_DEEP_STUB is used, all unoverridden function calls return the value provided by the real implementation for a mocked class. Use to return a default value for build-in types or a fully mocked value for Object types. # build a mock with mode RETURN_DEEP_STUB var mock := mock(TestClass, RETURN_DEEP_STUB) as TestClass # returns a default value assert_str(mock.message()).is_equal(\"\") # returns a mocked Path value assert_object(mock.path()).is_not_null() . | . ",
    "url": "/gdUnit4/latest/advanced_testing/mock/#mock-working-modes",
    
    "relUrl": "/advanced_testing/mock/#mock-working-modes"
  },"187": {
    "doc": "Mocking",
    "title": "Argument Matchers and mocks",
    "content": "Argument matchers allow you to simplify the verification of function calls by verifying function arguments based on their type or class. This is particularly useful when working with mocks because you can use argument matchers to verify function calls without specifying the exact argument values. For example, instead of verifying that a function was called with a specific boolean argument value, you can use the any_bool() argument matcher to verify that the function was called with any boolean value. Here’s an example: . var mocked_node :Node = mock(Node) # Call the function with different arguments mocked_node.set_process(false) # Called 1 time mocked_node.set_process(true) # Called 1 time mocked_node.set_process(true) # Called 2 times # Verify that the function was called with any boolean value 3 times verify(mocked_node, 3).set_process(any_bool()) . For more details on how to use argument matchers, please see the Argument Matchers section. ",
    "url": "/gdUnit4/latest/advanced_testing/mock/#argument-matchers-and-mocks",
    
    "relUrl": "/advanced_testing/mock/#argument-matchers-and-mocks"
  },"188": {
    "doc": "Mocking",
    "title": "Mocking",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/mock/",
    
    "relUrl": "/advanced_testing/mock/"
  },"189": {
    "doc": "Orphan Nodes",
    "title": "Orphan Nodes or Leaking Memory",
    "content": "When developing in Godot, it’s important to ensure that objects are properly freed, otherwise they become orphan nodes that can lead to memory leaks. This is especially important when writing tests, where you may not know if all objects created during the test have been properly freed. One helpful tool for managing objects is to use the auto_free function. ",
    "url": "/gdUnit4/latest/advanced_testing/orphan/#orphan-nodes-or-leaking-memory",
    
    "relUrl": "/advanced_testing/orphan/#orphan-nodes-or-leaking-memory"
  },"190": {
    "doc": "Orphan Nodes",
    "title": "Monitoring",
    "content": "GdUnit helps you monitor for orphan nodes by reporting any detected orphan nodes for each test run in the status bar. If no orphan nodes are detected, a green icon is displayed, but if orphan nodes are detected, a red blinking icon warns you. You can use the button to jump to the first orphan node to inspect it. Orphan nodes are reported and marked in yellow for each test step, including before(), before_test(), and the test itself. Advice If any orphan nodes are detected, I recommend reviewing your implementation to find and fix the issue. ",
    "url": "/gdUnit4/latest/advanced_testing/orphan/#monitoring",
    
    "relUrl": "/advanced_testing/orphan/#monitoring"
  },"191": {
    "doc": "Orphan Nodes",
    "title": "How to Fix Detected Orphan Nodes in Godot",
    "content": "With GdUnit, you can easily identify orphaned nodes that are marked as WARNING in the GdUnit inspector. It is important to fix any orphaned nodes that are discovered to ensure that your project does not leak memory over time. How to Recognize Orphan Nodes in Your Code . Finding the code location where the orphaned nodes are located can be a little difficult and often time-consuming. If you are not an expert and have no idea what the problem is, we recommend a step-by-step approach to find and fix orphan nodes. Here is a small example of a class with an orphan node: . class_name TestOrpahnDetection extends GdUnitTestSuite @warning_ignore('unused_parameter') @warning_ignore('return_value_discarded') class MyClass extends Node: var orphan_node = null func _init(): orphan_node = Node.new() func test_orphan_detected(): var t := MyClass.new() assert_object(t).is_not_null() . When we execute the testcase test_orphan_detected we will see no failures but it ends with warnings by detect two orphan node. The orphan_node in the class MyClass is not being used or referenced elsewhere, so it will become an orphan node when the instance of MyClass is destroyed. Also, the instance of t is referenced elsewhere and is not finally released. How to Fix Orphan Nodes Step by Step . Step One: Fix your Testcase To fix orphan nodes, it is important to ensure that all nodes used in a test case are covered by the auto_free function. When the test case is finished, auto_free will free the instance automatically. auto_free is a GdUnit function that automatically adds the object to the GdUnit object registry and calls free on the object when the test case ends. This ensures that any nodes created during the test case are cleaned up properly. Here is an example of how to fix the test case from the previous section: . class_name TestOrpahnDetection extends GdUnitTestSuite @warning_ignore('unused_parameter') @warning_ignore('return_value_discarded') class MyClass extends Node: var orphan_node = null func _init(): orphan_node = Node.new() func test_orphan_detected(): var t :MyClass = auto_free(MyClass.new()) assert_object(t).is_not_null() . We added the auto_free around the instantiation of MyClass to register the automatic release after the test execution. If we run the test_orphan_detected test case again, we will see that we have fixed an orphaned node, but there is still one present. The orphan_node in the class MyClass is not being used or referenced elsewhere, so it will become an orphan node when the instance of MyClass is destroyed. Step Two: Fix the orphan node inside of MyClass We need to fix the class MyClass now to ensure the node orphan_node will be released. The best way to fix orphan nodes is to ensure that all nodes are added as children of a parent node. When a parent node is freed, all of its child nodes are also freed. Here is an example of how to fix the MyClass example above: . class_name TestOrpahnDetection extends GdUnitTestSuite @warning_ignore('unused_parameter') @warning_ignore('return_value_discarded') class MyClass extends Node: var orphan_node = null func _init(): orphan_node = Node.new() add_child(orphan_node) func test_orphan_detected(): var t :MyClass = auto_free(MyClass.new()) assert_object(t).is_not_null() . In this fixed version of MyClass, the orphan_node is added as a child of a parent_node. When the instance of MyClass is destroyed, the parent_node and orphan_node will also be freed. Rerun your test and you see the orpahn nodes is fixed. ",
    "url": "/gdUnit4/latest/advanced_testing/orphan/#how-to-fix-detected-orphan-nodes-in-godot",
    
    "relUrl": "/advanced_testing/orphan/#how-to-fix-detected-orphan-nodes-in-godot"
  },"192": {
    "doc": "Orphan Nodes",
    "title": "Orphan Nodes",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/orphan/",
    
    "relUrl": "/advanced_testing/orphan/"
  },"193": {
    "doc": "Parameterized Tests",
    "title": "Testing with Parameterized TestCases",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/paramerized_tests/#testing-with-parameterized-testcases",
    
    "relUrl": "/advanced_testing/paramerized_tests/#testing-with-parameterized-testcases"
  },"194": {
    "doc": "Parameterized Tests",
    "title": "Parameterized TestCases",
    "content": "Parameterized tests can help keep your test suite organized by allowing you to define multiple test scenarios with different inputs using a single test function. You can define the required test parameters on the TestCase and use them in your test function to generate various test cases. This is especially useful when you have similar test setups with different inputs. | GdScript | C# | . | To define a TestCase with parameters, you need to add input parameters and a test data set with the name test_parameters. This TestCase will be executed multiple times with the test data provided by the test_parameters parameter. Here’s an example: . func test_parameterized_int_values(a: int, b: int, c: int, expected: int, _test_parameters := [ [1, 2, 3, 6], [3, 4, 5, 12], [6, 7, 8, 21] ]): assert_that(a+b+c).is_equal(expected) . 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | To define a TestCase with parameters, you can use the attribute [TestCase] and provide it with a test data set for each parameter set. This allows the TestCase to be executed multiple times, once for each set of test data provided by the attributes. For example: . [TestCase(1, 2, 3, 6)] [TestCase(3, 4, 5, 12)] [TestCase(6, 7, 8, 21)] public void TestCaseArguments(int a, int b, int c, int expect) { AssertThat(a + b + c).IsEqual(expect); } . The TestName parameter can be used to give each parameterized test case a custom name. This is especially useful when multiple test cases are being run with different sets of data, as it allows for easy identification of which test case(s) failed. Here’s an example: . [TestCase(1, 2, 3, 6, TestName = \"TestCaseA\")] [TestCase(3, 4, 5, 12, TestName = \"TestCaseB\")] [TestCase(6, 7, 8, 21, TestName = \"TestCaseC\")] public void TestCasesWithCustomTestName(int a, double b, int c, int expect) { AssertThat(a + b + c).IsEqual(expect); } . | . Advice The TestCase dataset must match the required input parameters and types. If the parameters do not match, a corresponding error is reported. ",
    "url": "/gdUnit4/latest/advanced_testing/paramerized_tests/#parameterized-testcases",
    
    "relUrl": "/advanced_testing/paramerized_tests/#parameterized-testcases"
  },"195": {
    "doc": "Parameterized Tests",
    "title": "Data-Driven Tests with Dynamic Test Data (C# Only)",
    "content": "GdUnit4Net supports advanced data-driven testing through the [DataPoint] attribute, which allows you to define dynamic test data using properties, methods, or external data sources. This feature is only available in the C# API and provides more flexibility than static TestCase attributes. Key Features of DataPoint Testing . | Dynamic Data Generation: Create test data at runtime based on conditions or external sources | Async Support: Generate test data asynchronously for complex scenarios | External Sources: Reference data from other classes or assemblies | Parameterized Factories: Pass parameters to data generation methods | Lazy Evaluation: Use yield return for memory-efficient data generation | Timeout Support: Async data generation respects test timeout settings | . 💡 Performance Tip: Use yielded or async DataPoints for large datasets to improve memory efficiency and test performance. ⚠️ C# Only Feature: Data-driven tests with dynamic test data using the [DataPoint] attribute are only available in the GdUnit4Net C# API. GdScript users should use the standard parameterized TestCase approach. Basic DataPoint Usage . You can use the [DataPoint] attribute to reference static properties or methods that provide test data: . public class DataDrivenTestSuite { // Static property providing test data public static IEnumerable&lt;object[]&gt; AdditionTestData =&gt; [ [1, 2, 3], [4, 5, 9], [10, 15, 25] ]; // Static method providing test data public static IEnumerable&lt;object[]&gt; MultiplicationTestData() =&gt; [ [2, 3, 6], [4, 5, 20], [7, 8, 56] ]; [TestCase] [DataPoint(nameof(AdditionTestData))] public void TestAddition(int a, int b, int expected) { AssertThat(a + b).IsEqual(expected); } [TestCase] [DataPoint(nameof(MultiplicationTestData))] public void TestMultiplication(int a, int b, int expected) { AssertThat(a * b).IsEqual(expected); } } . Single Value DataPoints . For tests that only need a single parameter, you can use IEnumerable&lt;T&gt;: . public static IEnumerable&lt;int&gt; SingleValues =&gt; [1, 2, 3, 4, 5]; [TestCase] [DataPoint(nameof(SingleValues))] public void TestSingleValue(int value) { AssertThat(value).IsGreater(0); } . Parameterized DataPoint Methods . DataPoint methods can accept parameters to generate dynamic test data: . public static IEnumerable&lt;object[]&gt; GenerateTestData(int multiplier) =&gt; [ [1 * multiplier, 1 * multiplier], [2 * multiplier, 2 * multiplier], [3 * multiplier, 3 * multiplier] ]; [TestCase] [DataPoint(nameof(GenerateTestData), 5)] public void TestWithMultiplier(int value, int expected) { AssertThat(value).IsEqual(expected); } . External DataPoint Sources . You can reference data from external classes: . public class ExternalDataPoints { public static IEnumerable&lt;object[]&gt; ExternalTestData =&gt; [ [100, 200, 300], [150, 250, 400] ]; } [TestCase] [DataPoint(nameof(ExternalDataPoints.ExternalTestData), typeof(ExternalDataPoints))] public void TestWithExternalData(int a, int b, int expected) { AssertThat(a + b).IsEqual(expected); } . Asynchronous DataPoints . GdUnit4Net supports asynchronous data generation using IAsyncEnumerable&lt;T&gt;: . public static async IAsyncEnumerable&lt;object[]&gt; AsyncTestData() { for (int i = 0; i &lt; 3; i++) { await Task.Delay(10); // Simulate async work yield return [i, i + 1, i + i + 1]; } } [TestCase] [DataPoint(nameof(AsyncTestData))] public void TestAsyncData(int a, int b, int expected) { AssertThat(a + b).IsEqual(expected); } . Yielded DataPoints . You can use yield return for lazy data generation: . public static IEnumerable&lt;object[]&gt; YieldedTestData() { yield return [1, 1, 2]; yield return [2, 2, 4]; yield return [3, 3, 6]; } [TestCase] [DataPoint(nameof(YieldedTestData))] public void TestYieldedData(int a, int b, int expected) { AssertThat(a * b).IsEqual(expected); } . DataPoint with Timeout . Asynchronous DataPoints respect test timeouts: . public static async IAsyncEnumerable&lt;object[]&gt; SlowAsyncData() { await Task.Delay(500); // This will exceed the timeout yield return [1, 2, 3]; } [TestCase(Timeout = 100)] [DataPoint(nameof(SlowAsyncData))] [ThrowsException(typeof(AsyncDataPointCanceledException), \"The execution has timed out after 100ms.\")] public void TestTimeoutHandling(int a, int b, int expected) { AssertThat(a + b).IsEqual(expected); } . ",
    "url": "/gdUnit4/latest/advanced_testing/paramerized_tests/#data-driven-tests-with-dynamic-test-data-c-only",
    
    "relUrl": "/advanced_testing/paramerized_tests/#data-driven-tests-with-dynamic-test-data-c-only"
  },"196": {
    "doc": "Parameterized Tests",
    "title": "Parameterized Tests",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/paramerized_tests/",
    
    "relUrl": "/advanced_testing/paramerized_tests/"
  },"197": {
    "doc": "Scene Runner",
    "title": "Scene Runner",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/sceneRunner/",
    
    "relUrl": "/advanced_testing/sceneRunner/"
  },"198": {
    "doc": "Scene Runner",
    "title": "Definition",
    "content": "The Scene Runner is a tool used for simulating interactions on a scene. With this tool, you can simulate input events such as keyboard or mouse input and/or simulate scene processing over a certain number of frames. This tool is typically used for integration testing a scene. For more advanced example, see Tutorial - Testing Scenes . ",
    "url": "/gdUnit4/latest/advanced_testing/sceneRunner/#definition",
    
    "relUrl": "/advanced_testing/sceneRunner/#definition"
  },"199": {
    "doc": "Scene Runner",
    "title": "How to Use It",
    "content": "The Scene Runner is managed by the GdUnit API and is automatically freed after use. One Scene Runner can only manage one scene. If you need to test multiple scenes, you must create a separate runner for each scene in your test suite. | GdScript | C# | . | To use the Scene Runner, load the scene to be tested with scene_runner(&lt;scene&gt;). var runner := scene_runner(\"res://my_scene.tscn\") . | To use the Scene Runner, load the scene to be tested with ISceneRunner.Load(&lt;scene&gt;). ISceneRunner runner = ISceneRunner.Load(\"res://my_scene.tscn\"); . | . Here is a short example: . | GdScript | C# | . | func test_simulate_frames(timeout = 5000) -&gt; void: # Create the scene runner for scene `test_scene.tscn` var runner := scene_runner(\"res://test_scene.tscn\") # Get access to the loaded scene node var my_scene := runner.scene() # Get access to scene property '_box1' var box1: ColorRect = runner.get_property(\"_box1\") # Verify it is initially set to white assert_object(box1.color).is_equal(Color.WHITE) # Start the color cycle by invoking the function 'start_color_cycle' and await 10 frames being processed runner.invoke(\"start_color_cycle\") await runner.simulate_frames(10) # After 10 frames, the color should have changed to black assert_object(box1.color).is_equal(Color.BLACK) . | [TestCase] public async Task simulate_frame() { // Create the scene runner for scene `test_scene.tscn` ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Get access to the loaded scene node var my_scene = runner.Scene(); // Get access to scene property '_box1' ColorRect box1 = runner.GetProperty(\"_box1\"); // Verify it is initially set to white AssertObject(box1.color).IsEqual(Color.WHITE); // Start the color cycle by invoking the function 'start_color_cycle' and await 10 frames being processed runner.Invoke(\"start_color_cycle\") await runner.SimulateFrames(10); // After 10 frames, the color should have changed to black AssertObject(box1.color).IsEqual(Color.BLACK); } . | . ",
    "url": "/gdUnit4/latest/advanced_testing/sceneRunner/#how-to-use-it",
    
    "relUrl": "/advanced_testing/sceneRunner/#how-to-use-it"
  },"200": {
    "doc": "Scene Runner",
    "title": "Function Overview",
    "content": ". | Processing your Scene | Simulate Action Inputs | Simulate Key Inputs | Simulate Mouse Inputs | Simulate Touchscreen Inputs | Synchronize Inputs Events | Wait for Function Results | Wait for Signals | Scene Accessors | . ",
    "url": "/gdUnit4/latest/advanced_testing/sceneRunner/#function-overview",
    
    "relUrl": "/advanced_testing/sceneRunner/#function-overview"
  },"201": {
    "doc": "Scene Runner",
    "title": "Processing and Rendering Your Scene",
    "content": "This section provides guidance on how to process and render your scene during tests using GdUnit4. | GdScript | C# | . | | Function | Description | . | simulate_frames | Simulates scene processing for a certain number of frames (respecting time factor). | . | set_time_factor | Sets how fast or slow the scene simulation is processed (clock ticks versus the real). | . | move_window_to_foreground | Restores the scene window to a windowed mode and brings it to the foreground. | . | | Function | Description | . | SimulateFrames | Simulates scene processing for a certain number of frames (respecting time factor). | . | SetTimeFactor | Sets how fast or slow the scene simulation is processed (clock ticks versus the real). | . | MoveWindowToForeground | Restores the scene window to a windowed mode and brings it to the foreground. | . | . simulate_frames . The simulate_frames function allows you to simulate the processing and rendering of a specified number of frames in your scene. This is particularly useful for testing and debugging, as it provides a way to advance the scene’s state over time without user input or external triggers. This function is useful when you need to validate behaviors that depend on frame updates, such as animations, physics, and scripted events. Simulate frame progression in your scene to test animations, interactions, and time-based logic under controlled conditions. | GdScript | C# | . | It takes the following arguments: . # frames: the number of frames to process # delta_ms: the time delta between each frame in milliseconds, by default no delay is set. func simulate_frames(frames: int, delta_ms := -1) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_frames: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate scene processing over 60 frames at normal speed await runner.simulate_frames(60) # Simulate 60 frames with a delay of 100ms between each frame await runner.simulate_frames(60, 100) . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates scene processing for a certain number of frames by given delta peer frame by ignoring the current time factor /// &lt;/summary&gt; /// &lt;param name=\"frames\"&gt;the number of frames to process&lt;/param&gt; /// &lt;param name=\"deltaPeerFrame\"&gt;the time delta between each frame in milliseconds, by default no delay is set.&lt;/param&gt; /// &lt;returns&gt;Task to wait&lt;/returns&gt; Task SimulateFrames(uint frames, uint deltaPeerFrame); . Here is an example of how to use SimulateFrames: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulate scene processing over 60 frames at normal speed await runner.SimulateFrames(60); // Simulate scene processing over 60 frames with a delay of 100ms between each frame await runner.SimulateFrames(60, 100); . | . set_time_factor . The set_time_factor function adjusts the speed at which the scene simulation is processed relative to real time. This is useful for testing in different gameplay speeds, debugging time-dependent interactions. | GdScript | C# | . | It takes the following arguments: . ## Sets the time factor for the scene simulation. ## [member time_factor] : A float representing the simulation speed. ## - Default is 1.0, meaning the simulation runs at normal speed. ## - A value of 2.0 means the simulation runs twice as fast as real time. ## - A value of 0.5 means the simulation runs at half the regular speed. func set_time_factor(time_factor: float = 1.0) -&gt; GdUnitSceneRunner: . Here is an example of how to use set_time_factor: . var runner := scene_runner(\"res://test_scene.tscn\") # Set the simulation speed to five times faster as the normal speed. runner.set_time_factor(5) # Simulated 60 frames ~5 times faster now await runner.simulate_frames(60) . | It takes the following arguments: . /// &lt;summary&gt; /// Sets how fast or slow the scene simulation is processed (clock ticks versus the real). /// &lt;/summary&gt; /// &lt;param name=\"timeFactor\"&gt;&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SetTimeFactor(double timeFactor = 1.0); . Here is an example of how to use SetTimeFactor: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Set the simulation speed to five times faster as the normal speed. runner.SetTimeFactor(5); // Simulated 60 frames ~5 times faster now await runner.SimulateFrames(60); . | . move_window_to_foreground . The move_window_to_foreground function restores the scene window to a windowed mode and brings it to the foreground. This ensures that the scene is visible and active during testing, making it easier to observe and interact with, as the window are minimized or moved to the background after each test. This function is essential for scenarios where the scene needs to be actively monitored or interacted with during automated tests. Without it, the scene may not be visible or accessible, which can hinder the debugging process. | GdScript | C# | . | ## Restores the scene window to a windowed mode and brings it to the foreground. ## This ensures that the scene is visible and active during testing, making it easier to observe and interact with. func move_window_to_foreground() -&gt; GdUnitSceneRunner: . Here is an example of how to use move_window_to_foreground: . var runner := scene_runner(\"res://test_scene.tscn\") # Shows the running scene and moves the window to the foreground runner.move_window_to_foreground() . | /// &lt;summary&gt; /// Shows the running scene and moves the window to the foreground. /// &lt;/summary&gt; void MoveWindowToForeground(); . Here is an example of how to use MoveWindowToForeground: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Shows the running scene and moves the window to the foreground runner.MoveWindowToForeground(); . | . ",
    "url": "/gdUnit4/latest/advanced_testing/sceneRunner/#processing-and-rendering-your-scene",
    
    "relUrl": "/advanced_testing/sceneRunner/#processing-and-rendering-your-scene"
  },"202": {
    "doc": "Accessors",
    "title": "Scene Accessors",
    "content": "In addition to simulating the scene, the SceneRunner provides functions to access the scene’s nodes. These functions are useful for debugging and testing purposes. For example, you can use find_child() to retrieve a specific node in the scene, and then call its methods or change its properties to test its behavior. By using these functions, you can gain greater control over the scene and test various scenarios, making it easier to find and fix bugs and improve the overall quality of your game or application. ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/accessors/#scene-accessors",
    
    "relUrl": "/advanced_testing/scene_runner/accessors/#scene-accessors"
  },"203": {
    "doc": "Accessors",
    "title": "Function Overview",
    "content": ". | GdScript | C# | . | | Function | Description | . | get_property | Return the current value of a property. | . | set_property | Sets the value of the property with the specified name. | . | find_child | Searches for the specified node with the name in the current scene. | . | invoke | Executes the function specified by name in the scene and returns the result. | . | scene | Gets access to the current running scene. | . | | Function | Description | . | GetProperty | Return the current value of a property. | . | SetProperty | Sets the value of the property with the specified name. | . | FindChild | Searches for the specified node with the name in the current scene. | . | Invoke | Executes the function specified by name in the scene and returns the result. | . | Scene | Gets access to the current running scene. | . | . get_property . The get_property function returns the current value of the property from the current scene. | GdScript | C# | . | It takes the following arguments: . # name: the name of the property # returns the actual value of the property func get_property(name: String) -&gt; Variant: . Here is an example of how to use get_property: . var runner := scene_runner(\"res://test_scene.tscn\") # Returns the current property `_door_color` from the scene var color: ColorRect = runner.get_property(\"_door_color\") . | It takes the following arguments: . /// &lt;summary&gt; /// Returns the property by given name. /// &lt;/summary&gt; /// &lt;typeparam name=\"T\"&gt;The type of the property&lt;/typeparam&gt; /// &lt;param name=\"name\"&gt;The parameter name&lt;/param&gt; /// &lt;returns&gt;The value of the property or throws a MissingFieldException&lt;/returns&gt; /// &lt;exception cref=\"MissingFieldException\"/&gt; public T GetProperty&lt;T&gt;(string name); . Here is an example of how to use GetProperty: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Returns the current property `_door_color` from the scene ColorRect color = runner.GetProperty(\"_door_color\"); . | . set_property . The set_property function sets the value of a property with the specified name. | GdScript | C# | . | It takes the following arguments: . # name: the name of the property. # value: the value to be assigned to the property. # returns true|false depending on valid property name. func set_property(name: String, value: Variant) -&gt; bool: . Here is an example of how to use set_property: . var runner := scene_runner(\"res://test_scene.tscn\") # Sets the property `_door_color` to Red runner.set_property(\"_door_color\", Color.RED) . | It takes the following arguments: . /// &lt;summary&gt; /// Sets the value of the property with the specified name. /// &lt;/summary&gt; /// &lt;param name=\"name\"&gt;The name of the property.&lt;/param&gt; /// &lt;param name=\"value\"&gt;The value to set for the property.&lt;/param&gt; /// &lt;exception cref=\"MissingFieldException\"/&gt; public T SetProperty&lt;T&gt;(string name, Variant value); . Here is an example of how to use SetProperty: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Sets the property `_door_color` to Red runner.SetProperty(\"_door_color\", Colors.Red); . | . find_child . The find_child function searches for a node with the specified name in the current scene and returns it. If the node is not found, it returns null. | GdScript | C# | . | ## [member name] : the name of the node to find ## [member recursive] : enables/disables seraching recursive ## [member owned] : is set to true it only finds nodes who have an assigned owner ## [member return] : the node if find otherwise null func find_child(name: String, recursive := true, owned := false) -&gt; Node: . Here is an example of how to use find_child: . var runner := scene_runner(\"res://test_scene.tscn\") # Searchs for node `Spell` inside the scene tree var spell: Node = runner.find_child(\"Spell\") . | /// &lt;summary&gt; /// Find a child located in the current scene. /// &lt;/summary&gt; /// &lt;param name=\"name\"&gt;The name of the node to find.&lt;/param&gt; /// &lt;param name=\"recursive\"&gt;Enables/disables searching recursively.&lt;/param&gt; /// &lt;param name=\"owned\"&gt;If set to true, it only finds nodes who have an assigned owner.&lt;/param&gt; /// &lt;returns&gt;The node if found, otherwise null.&lt;/returns&gt; Node FindChild(string name, bool recursive = true, bool owned = false) -&gt; Node: . var runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Searches for the node `Health` inside the scene tree var output = runner.FindChild(\"Health\", true, true) as HealthComponent; . | . invoke . The invoke function runs the function specified by given name in the scene and returns the result. | GdScript | C# | . | It takes the following arguments: . # name: the name of the function to execute # optional function args 0..9 # return: the function result func invoke(name: String, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9): . Here is an example of how to use invoke: . var runner := scene_runner(\"res://test_scene.tscn\") # Invokes the function `start_color_cycle` runner.invoke(\"start_color_cycle\") . | It takes the following arguments: . /// &lt;summary&gt; /// Invokes the method by given name and arguments. /// &lt;/summary&gt; /// &lt;param name=\"name\"&gt;The name of method to invoke&lt;/param&gt; /// &lt;param name=\"args\"&gt;The function arguments&lt;/param&gt; /// &lt;returns&gt;The return value of invoked method&lt;/returns&gt; /// &lt;exception cref=\"MissingMethodException\"/&gt; public object Invoke(string name, params object[] args); . Here is an example of how to use Invoke: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Invokes the function `start_color_cycle` runner.Invoke(\"start_color_cycle\"); . | . scene . The scene function gets access to current loaded and managed scene by the SceneRunner. | GdScript | C# | . | ## Returns the scene instance that is currently loaded and managed by this SceneRunner. ## [member return] : The node representing the current running scene func scene() -&gt; Node: . Here is an example of how to use scene(): . var runner := scene_runner(\"res://test_scene.tscn\") # Gets access to the scene instance var my_scene := runner.scene() . | /// &lt;summary&gt; /// Access to the current running scene. /// Returns the scene instance that is currently loaded and managed by this SceneRunner. /// The scene remains available for testing and interaction until the runner is disposed /// or the scene is explicitly freed.&lt;br /&gt; /// &lt;br /&gt; /// Lifecycle behavior:&lt;br /&gt; /// - Returns valid Node instance when scene is loaded and active&lt;br /&gt; /// - Returns null when the SceneRunner has been disposed&lt;br /&gt; /// - Returns null when autoFree has cleaned up the scene&lt;br /&gt; /// &lt;br /&gt; /// Usage patterns:&lt;br /&gt; /// - Check for null before accessing scene properties or methods&lt;br /&gt; /// - Use in assertions to verify scene state and availability&lt;br /&gt; /// - Access child nodes through the returned scene instance.&lt;br /&gt; /// &lt;/summary&gt; /// &lt;returns&gt; /// The current scene Node instance, or null when the SceneRunner is disposed /// or the scene has been freed. /// &lt;/returns&gt; Node? Scene(); . Here is an example of how to use Invoke: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Invokes the function `start_color_cycle` var currentScene = runner.Scene(); . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/accessors/#function-overview",
    
    "relUrl": "/advanced_testing/scene_runner/accessors/#function-overview"
  },"204": {
    "doc": "Accessors",
    "title": "Accessors",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/accessors/",
    
    "relUrl": "/advanced_testing/scene_runner/accessors/"
  },"205": {
    "doc": "Actions",
    "title": "Simulate Actions",
    "content": "This page provides guidance on how to test actions in your scene using GdUnit4. For more detailed information on Godot actions, please refer to the official Godot documentation . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/actions/#simulate-actions",
    
    "relUrl": "/advanced_testing/scene_runner/actions/#simulate-actions"
  },"206": {
    "doc": "Actions",
    "title": "Function Overview",
    "content": "All functions listed below utilize the InputEventAction class to simulate action events. | GdScript | C# | . | | Function | Description | . | simulate_action_pressed | Simulates that an action has been pressed. | . | simulate_action_press | Simulates that an action is press. | . | simulate_action_release | Simulates that an action has been released. | . | | Function | Description | . | SimulateActionPressed | Simulates that an action has been pressed. | . | SimulateActionPress | Simulates that an action is press. | . | SimulateActionRelease | Simulates that an action has been released. | . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/actions/#function-overview",
    
    "relUrl": "/advanced_testing/scene_runner/actions/#function-overview"
  },"207": {
    "doc": "Actions",
    "title": "How to Simulate Actions",
    "content": "To simulate actions interactions in your scene, you can use the provided action simulation functions. These functions allow you to mimic user key inputs as actions for testing purposes. There are two main categories of functions: . | Unfinished Functions Unfinished functions simulate the act of pressing a action without releasing it immediately. These are useful for simulating combinations, such as holding down a modifier key (e.g., Ctrl) while pressing another key (e.g., C for Ctrl+C). The interaction is completed when the action release function is called. | simulate_action_press Simulates pressing a key without releasing it. | simulate_action_release Completes a key interaction by releasing the key. | . | Finalized Functions Finalized functions simulate a complete press-and-release action in a single function call. | simulate_action_pressed Simulates a full action press-and-release interaction. | . | . Advice To ensure input events are processed correctly, you must wait at least one frame cycle after simulating inputs. Use the await runner.await_input_processed() function to accomplish this. See Synchronize Inputs Events . simulate_action_pressed . The simulate_action_pressed function is used to simulate that a input action has been pressed. | GdScript | C# | . | It takes the following arguments: . # action: the action e.g. \"ui_up\" func simulate_action_pressed(action: String) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_action_pressed: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate the UP key is pressed by using the input action \"ui_up\" runner.simulate_action_pressed(\"ui_up\") await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates that an action has been pressed. /// &lt;/summary&gt; /// &lt;param name=\"action\"&gt;The name of the action, e.g., \"ui_up\".&lt;/param&gt; /// &lt;returns&gt;The SceneRunner instance.&lt;/returns&gt; ISceneRunner SimulateActionPressed(string action); . Here is an example of how to use SimulateActionPressed: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulate the UP key is pressed by using the input action \"ui_up\" runner.SimulateActionPressed(\"ui_up\"); await runner.AwaitInputProcessed(); . | . In this example, we simulate that the action “ui-up” is pressed. We use await_input_processed() to ensure that the simulation of the action is complete before moving on to the next instruction. simulate_action_press . The simulate_action_press function is used to simulate that an input action holding down. | GdScript | C# | . | It takes the following arguments: . # action: the action e.g. \"ui_up\" func simulate_action_press(action: String) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_action_press: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate the UP key is press by using the action \"ui_up\" runner.simulate_action_press(\"ui_up\") await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates that an action is press. /// &lt;/summary&gt; /// &lt;param name=\"action\"&gt;The name of the action, e.g., \"ui_up\".&lt;/param&gt; /// &lt;returns&gt;The SceneRunner instance.&lt;/returns&gt; ISceneRunner SimulateActionPress(string action); . Here is an example of how to use SimulateActionPress: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulate the UP key is press by using the action \"ui_up\" runner.SimulateActionPress(\"ui_up\"); await runner.AwaitInputProcessed(); . | . In this example, we simulate that the action “ui_up” is press. We use await_input_processed() to ensure that the simulation of the action is complete before moving on to the next instruction. simulate_action_release . The simulate_action_release function is used to simulate that a input action been released. | GdScript | C# | . | It takes the following arguments: . # action : the action e.g. \"ui_up\" func simulate_action_release(action: String) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_action_release: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate the UP key is released by using the action \"ui_up\" runner.simulate_action_release(\"ui-up\") await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates that an action has been released. /// &lt;/summary&gt; /// &lt;param name=\"action\"&gt;The name of the action, e.g., \"ui_up\".&lt;/param&gt; /// &lt;returns&gt;The SceneRunner instance.&lt;/returns&gt; ISceneRunner SimulateActionRelease(string action); . Here is an example of how to use SimulateActionRelease: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulate the UP key is released by using the action \"ui_up\" runner.SimulateActionRelease(\"ui-up\"); await runner.AwaitInputProcessed(); . | . In this example, we simulate that the action “ui_up” is released. We use await_input_processed() to ensure that the simulation of the action is complete before moving on to the next instruction. ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/actions/#how-to-simulate-actions",
    
    "relUrl": "/advanced_testing/scene_runner/actions/#how-to-simulate-actions"
  },"208": {
    "doc": "Actions",
    "title": "Actions",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/actions/",
    
    "relUrl": "/advanced_testing/scene_runner/actions/"
  },"209": {
    "doc": "Functions",
    "title": "Functions",
    "content": "In asynchronous programming, it’s often necessary to wait for a function to complete and obtain its result before continuing with your program. The Scene Runner provides functions that allow you to wait for specific methods to return a value, with a specified timeout. This is particularly useful in scenarios where you want to test or ensure the result of a method call within a certain timeframe. ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/functions/",
    
    "relUrl": "/advanced_testing/scene_runner/functions/"
  },"210": {
    "doc": "Functions",
    "title": "Function Overview",
    "content": ". | GdScript | C# | . | | Function | Description | . | await_func | Waits for a function in the scene to return a value. Returns a GdUnitFuncAssert object, which allows you to verify the result of the function call. | . | await_func_on | Waits for a function of a specific source node to return a value. Returns a GdUnitFuncAssert object, which allows you to verify the result of the function call. | . | | Function | Description | . | AwaitMethod | Waits for a function in the scene to return a value. Returns a GdUnitFuncAssert object, which allows you to verify the result of the function call. | . | AwaitMethodOn | Waits for a function of a specific source node to return a value. Returns a GdUnitFuncAssert object, which allows you to verify the result of the function call. | . | . await_func . The await_func function pauses execution until a specified function in the scene returns a value. It returns a GdUnitFuncAssert object, which provides a suite of assertion methods to verify the returned value. | GdScript | C# | . | It takes the following arguments: . ## The await_func function pauses execution until a specified function in the scene returns a value. ## It returns a [GdUnitFuncAssert], which provides a suite of assertion methods to verify the returned value. ## [member func_name] : The name of the function to wait for. ## [member args] : Optional function arguments func await_func(func_name: String, args := []) -&gt; GdUnitFuncAssert: . Here is an example of how to use await_func: . var runner := scene_runner(\"res://test_scene.tscn\") # Waits until the function `color_cycle()` returns black or fails after an timeout of 5s await runner.await_func(\"color_cycle\").wait_until(5000).is_equal(\"black\") . | It takes the following arguments: . /// &lt;summary&gt; /// Returns a method awaiter to wait for a specific method result. /// &lt;/summary&gt; /// &lt;typeparam name=\"V\"&gt;The expected result type&lt;/typeparam&gt; /// &lt;param name=\"methodName\"&gt;The name of the method to wait&lt;/param&gt; /// &lt;returns&gt;GodotMethodAwaiter&lt;/returns&gt; GdUnitAwaiter.GodotMethodAwaiter&lt;V&gt; AwaitMethod&lt;V&gt;(string methodName); . Here is an example of how to use AwaitMethod: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Waits until the function `color_cycle()` returns black or fails after an timeout of 5s await runner.AwaitMethod&lt;bool&gt;(\"color_cycle\").IsEqual(\"black\").WithTimeout(5000); . | . await_func_on . The await_func_on function extends the functionality of await_func by allowing you to specify a source node within the scene. It waits for a specified function on that node to return a value and returns a GdUnitFuncAssert object for assertions. | GdScript | C# | . | It takes the following arguments: . ## The await_func_on function extends the functionality of await_func by allowing you to specify a source node within the scene. ## It waits for a specified function on that node to return a value and returns a [GdUnitFuncAssert] object for assertions. ## [member source] : The object where implements the function. ## [member func_name] : The name of the function to wait for. ## [member args] : optional function arguments func await_func_on(source: Object, func_name: String, args := []) -&gt; GdUnitFuncAssert: . Here is an example of how to use await_func_on: . var runner := scene_runner(\"res://test_scene.tscn\") # grab the colorRect instance from the scene var box1: ColorRect = runner.get_property(\"_box1\") # call function `start_color_cycle` how is emit the signal box1.start_color_cycle() # Waits until the function `has_parent()` on source `door` returns false or fails after an timeout of 100ms await runner.await_func_on(box1, \"panel_color_change\", [box1, Color.RED]).wait_until(100).is_false() . | It takes the following arguments: . This function is not yet supported in C#. | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/functions/#function-overview",
    
    "relUrl": "/advanced_testing/scene_runner/functions/#function-overview"
  },"211": {
    "doc": "Key Inputs",
    "title": "Simulate Key Inputs",
    "content": "This page provides guidance on how to test key inputs in your scene using GdUnit4. For more detailed information on Godot keyboard events, please refer to the official Godot documentation . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/keys/#simulate-key-inputs",
    
    "relUrl": "/advanced_testing/scene_runner/keys/#simulate-key-inputs"
  },"212": {
    "doc": "Key Inputs",
    "title": "Function Overview",
    "content": "All functions listed below utilize the InputEventKey class to simulate key input events. | GdScript | C# | . | | Function | Description | . | simulate_key_pressed | Simulates that a key has been pressed. | . | simulate_key_press | Simulates that a key is pressed. | . | simulate_key_release | Simulates that a key has been released. | . | | Function | Description | . | SimulateKeyPressed | Simulates that a key has been pressed. | . | SimulateKeyPress | Simulates that a key is pressed. | . | SimulateKeyRelease | Simulates that a key has been released. | . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/keys/#function-overview",
    
    "relUrl": "/advanced_testing/scene_runner/keys/#function-overview"
  },"213": {
    "doc": "Key Inputs",
    "title": "How to Simulate Key Interactions",
    "content": "To simulate key interactions in your scene, you can use the provided key simulation functions. These functions allow you to mimic user key inputs for testing purposes. There are two main categories of functions: . | Unfinished Functions Unfinished functions simulate the act of pressing a key without releasing it immediately. These are useful for simulating combinations, such as holding down a modifier key (e.g., Ctrl) while pressing another key (e.g., C for Ctrl+C). The interaction is completed when the key release function is called. | simulate_key_press Simulates pressing a key without releasing it. | simulate_key_release Completes a key interaction by releasing the key. | . | Finalized Functions Finalized functions simulate a complete key press-and-release action in a single function call. | simulate_key_pressed Simulates a full key press-and-release interaction. | . | . Advice To ensure input events are processed correctly, you must wait at least one frame cycle after simulating inputs. Use the await runner.await_input_processed() function to accomplish this. See Synchronize Inputs Events . simulate_key_pressed . The simulate_key_pressed function is used to simulate that a key has been pressed. | GdScript | C# | . | It takes the following arguments: . # key_code: an integer value representing the key code of the key being pressed, e.g. KEY_ENTER for the enter key. # shift: a boolean value indicating whether the shift key should be simulated as being pressed along with the main key. It is false by default. # control: a boolean value indicating whether the control key should be simulated as being pressed along with the main key. It is false by default. func simulate_key_pressed(key_code: int, shift := false, control := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_key_pressed: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate the enter key is pressed runner.simulate_key_pressed(KEY_ENTER) await runner.await_input_processed() # Simulates key combination ctrl+C is pressed runner.simulate_key_pressed(KEY_C, false, true) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates that a key has been pressed. /// &lt;/summary&gt; /// &lt;param name=\"keyCode\"&gt;an integer value representing the key code of the key being pressed, e.g. KEY_ENTER for the enter key.&lt;/param&gt; /// &lt;param name=\"shift\"&gt;a boolean value indicating whether the shift key should be simulated as being pressed along with the main key. It is false by default.&lt;/param&gt; /// &lt;param name=\"control\"&gt;a boolean value indicating whether the control key should be simulated as being pressed along with the main key. It is false by default.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateKeyPressed(KeyList keyCode, bool shift = false, bool control = false); . Here is an example of how to use SimulateKeyPressed: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulate the enter key is pressed runner.SimulateKeyPressed(KeyList.Enter); await runner.AwaitInputProcessed(); // Simulates key combination ctrl+C is pressed runner.SimulateKeyPressed(KeyList.C, false, true); await runner.AwaitInputProcessed(); . | . In this example, we simulate that the enter key is pressed and then we simulate that the key combination ctrl+C is pressed. We use await_input_processed() to ensure that the simulation of the key press is complete before moving on to the next instruction. simulate_key_press . The simulate_key_press function is used to simulate that a key holding down. | GdScript | C# | . | It takes the following arguments: . # key_code : an integer value representing the key code of the key being press e.g. KEY_ENTER for the enter key. # shift : a boolean value indicating whether the shift key should be simulated as being press along with the main key. It is false by default. # control : a boolean value indicating whether the control key should be simulated as being press along with the main key. It is false by default. func simulate_key_press(key_code: int, shift := false, control := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_key_press: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate the enter key is press runner.simulate_key_press(KEY_ENTER) await runner.await_input_processed() # Simulates key combination ctrl+C is press in one function call runner.simulate_key_press(KEY_C, false, true) await runner.await_input_processed() # Simulates multi key combination ctrl+alt+C is press runner.simulate_key_press(KEY_CTRL) runner.simulate_key_press(KEY_ALT) runner.simulate_key_press(KEY_C) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates that a key is press. /// &lt;/summary&gt; /// &lt;param name=\"keyCode\"&gt;an integer value representing the key code of the key being press, e.g. KeyList.Enter for the enter key.&lt;/param&gt; /// &lt;param name=\"shift\"&gt;a boolean value indicating whether the shift key should be simulated as being press along with the main key. It is false by default.&lt;/param&gt; /// &lt;param name=\"control\"&gt;a boolean value indicating whether the control key should be simulated as being press along with the main key. It is false by default.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateKeyPress(KeyList keyCode, bool shift = false, bool control = false); . Here is an example of how to use SimulateKeyPress: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulate the enter key is press runner.SimulateKeyPress(KeyList.Enter); await runner.AwaitInputProcessed(); // Simulates key combination ctrl+C is press in one method call runner.SimulateKeyPress(KeyList.C, false. true); await runner.AwaitInputProcessed(); // Simulates multi key combination ctrl+alt+C is press runner.SimulateKeyPress(KeyList.CTRL); runner.SimulateKeyPress(KeyList.ALT); runner.SimulateKeyPress(KeyList.C); await runner.AwaitInputProcessed(); . | . In this example, we simulate that the enter key is press and then we simulate that the key combination ctrl+C is press. We use await_input_processed() to ensure that the simulation of the key press is complete before moving on to the next instruction. simulate_key_release . The simulate_key_release function is used to simulate that a key has been released. | GdScript | C# | . | It takes the following arguments: . # key_code : an integer value representing the key code of the key being released, e.g. KEY_ENTER for the enter key. # shift : a boolean value indicating whether the shift key should be simulated as being released along with the main key. It is false by default. # control : fa boolean value indicating whether the control key should be simulated as being released along with the main key. It is false by default. func simulate_key_release(key_code: int, shift := false, control := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_key_release: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate a enter key is released runner.simulate_key_release(KEY_ENTER) await runner.await_input_processed() # Simulates key combination ctrl+C is released in one function call runner.simulate_key_release(KEY_C, false, true) await runner.await_input_processed() # Simulates multi key combination ctrl+alt+C is released runner.simulate_key_release(KEY_CTRL) runner.simulate_key_release(KEY_ALT) runner.simulate_key_release(KEY_C) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates that a key has been released. /// &lt;/summary&gt; /// &lt;param name=\"keyCode\"&gt;an integer value representing the key code of the key being released, e.g. KeyList.Enter for the enter key.&lt;/param&gt; /// &lt;param name=\"shift\"&gt;a boolean value indicating whether the shift key should be simulated as being released along with the main key. It is false by default.&lt;/param&gt; /// &lt;param name=\"control\"&gt;a boolean value indicating whether the control key should be simulated as being released along with the main key. It is false by default.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateKeyRelease(KeyList keyCode, bool shift = false, bool control = false); . Here is an example of how to use SimulateKeyRelease: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulate a enter key is released runner.SimulateKeyRelease(KeyList.Enter); await AwaitIdleFrame(); // Simulates key combination ctrl+C is released runner.SimulateKeyRelease(KeyList.C, false, true); await runner.AwaitInputProcessed(); // Simulates multi key combination ctrl+C is released runner.SimulateKeyRelease(KeyList.CTRL); runner.SimulateKeyRelease(KeyList.ALT); runner.SimulateKeyRelease(KeyList.C); await runner.AwaitInputProcessed(); . | . In this example, we simulate that the enter key is released and then we simulate that the key combination ctrl+C is released. We use await_input_processed() to ensure that the simulation of the key press is complete before moving on to the next instruction. ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/keys/#how-to-simulate-key-interactions",
    
    "relUrl": "/advanced_testing/scene_runner/keys/#how-to-simulate-key-interactions"
  },"214": {
    "doc": "Key Inputs",
    "title": "Key Inputs",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/keys/",
    
    "relUrl": "/advanced_testing/scene_runner/keys/"
  },"215": {
    "doc": "Mouse Inputs",
    "title": "Simulate Mouse Inputs",
    "content": "This page provides guidance on how to test mouse inputs in your scene using GdUnit4. For more detailed information on Godot mouse events, please refer to the official Godot documentation . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/mouse/#simulate-mouse-inputs",
    
    "relUrl": "/advanced_testing/scene_runner/mouse/#simulate-mouse-inputs"
  },"216": {
    "doc": "Mouse Inputs",
    "title": "Function Overview",
    "content": "All functions listed below utilize the listed classes to simulate mouse input events. | InputEventMouse class to simulate mouse input events. | InputEventMouseButton class to simulate mouse input events. | InputEventMouseMotion class to simulate mouse input events. | . | GdScript | C# | . | | Function | Description | . | set_mouse_position | Sets the mouse cursor position for the current Viewport. | . | get_mouse_position | Returns the mouse’s position in this Viewport using the coordinate system of this Viewport. | . | simulate_mouse_move | Simulates a mouse moved to final position. | . | simulate_mouse_move_relative | Simulates a mouse move to the relative coordinates (offset). | . | simulate_mouse_move_absolute | Simulates a mouse move to the absolute coordinates. | . | simulate_mouse_button_pressed | Simulates a mouse button pressed. | . | simulate_mouse_button_press | Simulates a mouse button press (holding). | . | simulate_mouse_button_release | Simulates a mouse button released. | . | | Function | Description | . | SetMousePos | Sets the mouse cursor to given position relative to the viewport. | . | GetMousePosition | Returns the mouse’s position in this Viewport using the coordinate system of this Viewport. | . | SimulateMouseMove | Simulates a mouse moved to final position. | . | SimulateMouseMoveRelative | Simulates a mouse move to the relative coordinates (offset). | . | SimulateMouseMoveAbsolute | Simulates a mouse move to the absolute coordinates. | . | SimulateMouseButtonPressed | Simulates a mouse button pressed. | . | SimulateMouseButtonPress | Simulates a mouse button press (holding). | . | SimulateMouseButtonRelease | Simulates a mouse button released. | . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/mouse/#function-overview",
    
    "relUrl": "/advanced_testing/scene_runner/mouse/#function-overview"
  },"217": {
    "doc": "Mouse Inputs",
    "title": "How to Simulate Mouse Interactions",
    "content": "To simulate mouse interactions in your scene, you can use the provided mouse simulation functions. These functions allow you to mimic user mouse inputs for testing purposes. There are two main categories of functions: . | Unfinished Functions Unfinished functions simulate the act of pressing a key without releasing it immediately. | These are useful for simulating combinations, such as holding down a modifier mouse button (e.g., Left-Button) while pressing another mouse button (e.g., Right-Button). The interaction is completed when mouse release function is called. | set_mouse_position Simulates moving the mouse cursor to a specified position. | simulate_mouse_button_press Simulates pressing a specific mouse button without releasing it. | simulate_mouse_button_release Simulates releasing a specific mouse button that was previously pressed. | . | Finalized Functions Finalized functions simulate a complete mouse press-and-release action in a single function call. | get_mouse_position Retrieves the current position of the mouse cursor. | simulate_mouse_button_pressed Simulates a mouse button press and release action, effectively performing a click. | simulate_mouse_move Simulates moving the mouse cursor relative to its current position. | simulate_mouse_move_relative Moves the mouse cursor by a specified offset from its current position. | simulate_mouse_move_absolute Moves the mouse cursor to an absolute position within the window or screen. | . | . Advice To ensure input events are processed correctly, you must wait at least one frame cycle after simulating inputs. Use the await runner.await_input_processed() function to accomplish this. See Synchronize Inputs Events . set_mouse_position . The set_mouse_position function is used to set the mouse cursor to given position of the viewport. | GdScript | C# | . | It takes the following arguments: . ## Sets the mouse position to the specified vector, provided in pixels and relative to an origin at the upper left corner of the currently focused Window Manager game window. ## [member position] : The absolute position in pixels as Vector2 func set_mouse_position(position: Vector2) -&gt; GdUnitSceneRunner: . Here is an example of how to use set_mouse_position: . var runner := scene_runner(\"res://test_scene.tscn\") # sets the current mouse position to 100, 100 runner.set_mouse_position(Vector2(100, 100)) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Sets the actual mouse position to the viewport. /// &lt;/summary&gt; /// &lt;param name=\"position\"&gt;The position in x/y coordinates&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; ISceneRunner SetMousePos(Vector2 position); . Here is an example of how to use SetMousePos: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // sets the current mouse position to 100, 100 runner.SetMousePos(new Vector2(100, 100)); await runner.AwaitInputProcessed(); . | . We use await_input_processed() to ensure that the simulation of the mouse input is complete before moving on to the next instruction. get_mouse_position . The get_mouse_position function is used to get the mouse cursor position from the current viewport. | GdScript | C# | . | ## Returns the mouse's position in this Viewport using the coordinate system of this Viewport. func get_mouse_position() -&gt; Vector2: . Here is an example of how to use get_mouse_position: . var runner := scene_runner(\"res://test_scene.tscn\") # gets the current mouse position var mouse_position := runner.get_mouse_position() . | /// &lt;summary&gt; /// Returns the mouse's position in this Viewport using the coordinate system of this Viewport. /// &lt;/summary&gt; /// &lt;returns&gt;Vector2&lt;/returns&gt; Vector2 GetMousePosition(); . Here is an example of how to use GetMousePosition: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // gets the current mouse position var mousePosition = runner.GetMousePosition(); . | . simulate_mouse_move . The simulate_mouse_move function is used to simulate the movement of the mouse cursor to a given position on the screen. | GdScript | C# | . | It takes the following arguments: . # position: representing the final position of the mouse cursor after the movement is completed func simulate_mouse_move(position: Vector2) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_mouse_move: . var runner := scene_runner(\"res://test_scene.tscn\") # Set mouse position to a initial position runner.set_mouse_pos(Vector2(160, 20)) await runner.await_input_processed() # Simulates a mouse move to final position 200, 40 runner.simulate_mouse_move(Vector2(200, 40)) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates a mouse moved to final position. /// &lt;/summary&gt; /// &lt;param name=\"position\"&gt;representing the final position of the mouse cursor after the movement is completed).&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseMove(Vector2 position); . Here is an example of how to use SimulateMouseMove: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); # Set the mouse position to a inital position runner.SetMousePos(new Vector2(160, 20)) await runner.AwaitInputProcessed(); # simulates a mouse move to final position 200,40 runner.SimulateMouseMove(new Vector2(200, 40)) await runner.AwaitInputProcessed(); . | . We use await_input_processed() to ensure that the simulation of the mouse input is complete before moving on to the next instruction. simulate_mouse_move_relative . The simulate_mouse_move_relative function simulates a mouse move to a relative position within a specified time. | GdScript | C# | . | It takes the following arguments: . ## Simulates a mouse move to the relative coordinates (offset). ## [member relative] : The relative position, indicating the mouse position offset. ## [member time] : The time to move the mouse by the relative position in seconds (default is 1 second). ## [member trans_type] : Sets the type of transition used (default is TRANS_LINEAR). func simulate_mouse_move_relative(relative: Vector2, time: float = 1.0, trans_type: Tween.TransitionType = Tween.TRANS_LINEAR) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_mouse_move_relative: . var runner := scene_runner(\"res://test_scene.tscn\") # Set mouse position to an initial position runner.set_mouse_pos(Vector2(10, 20)) await runner.await_input_processed() # Simulate a mouse move from the current position to the relative position within 1 second # the final position will be (410, 220) when is completed await runner.simulate_mouse_move_relative(Vector2(400, 200), 1) . | /// &lt;summary&gt; /// Simulates a mouse move to the relative coordinates (offset). /// &lt;/summary&gt; /// &lt;param name=\"relative\"&gt;The relative position, e.g. the mouse position offset&lt;/param&gt; /// &lt;param name=\"time\"&gt;The time to move the mouse by the relative position in seconds (default is 1 second).&lt;/param&gt; /// &lt;param name=\"transitionType\"&gt;Sets the type of transition used (default is Linear).&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; Task SimulateMouseMoveRelative(Vector2 relative, double time = 1.0, Tween.TransitionType transitionType = Tween.TransitionType.Linear); . Here is an example of how to use SimulateMouseMoveRelative: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Set mouse position to an initial position runner.SimulateMouseMove(Vector2(10, 20)); await runner.AwaitInputProcessed(); // Simulate a mouse move from the current position to the relative position within 1 second // the final position will be (410, 220) when is completed await runner.SimulateMouseMoveRelative(new Vector2(400, 200)); . | . simulate_mouse_move_absolute . The simulate_mouse_move_absolute function simulates a mouse move to an absolute position within a specified time. | GdScript | C# | . | It takes the following arguments: . ## Simulates a mouse move to the absolute coordinates. ## [member position] : The final position of the mouse. ## [member time] : The time to move the mouse to the final position in seconds (default is 1 second). ## [member trans_type] : Sets the type of transition used (default is TRANS_LINEAR). func simulate_mouse_move_absolute(position: Vector2, time: float = 1.0, trans_type: Tween.TransitionType = Tween.TRANS_LINEAR) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_mouse_move_absolute: . var runner := scene_runner(\"res://test_scene.tscn\") # Set mouse position to an initial position runner.set_mouse_pos(Vector2(10, 20)) await runner.await_input_processed() # Simulate a mouse move from the current position to the absolute position within 1 second # the final position will be (400, 200) when is completed await runner.simulate_mouse_move_absolute(Vector2(400, 200), 1) . | /// &lt;summary&gt; /// Simulates a mouse move to the absolute coordinates. /// &lt;/summary&gt; /// &lt;param name=\"position\"&gt;The final position of the mouse.&lt;/param&gt; /// &lt;param name=\"time\"&gt;The time to move the mouse to the final position in seconds (default is 1 second).&lt;/param&gt; /// &lt;param name=\"transitionType\"&gt;Sets the type of transition used (default is Linear).&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; Task SimulateMouseMoveAbsolute(Vector2 position, double time = 1.0, Tween.TransitionType transitionType = Tween.TransitionType.Linear); . Here is an example of how to use SimulateMouseMoveAbsolute: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Set mouse position to an initial position runner.SimulateMouseMove(Vector2(10, 20)); await runner.AwaitInputProcessed(); // Simulate a mouse move from the current position to the absolute position within 1 second // the final position will be (400, 200) when is completed await runner.SimulateMouseMoveAbsolute(new Vector2(400, 200)); . | . simulate_mouse_button_pressed . The simulate_mouse_button_pressed function is used to simulate that a mouse button is pressed. | GdScript | C# | . | It takes the following arguments: . # button_index: The mouse button identifier, one of the ButtonList button or button wheel constants. # double_click: set to true to simulate a double-click func simulate_mouse_button_pressed(button_index: MouseButton, double_click := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_mouse_button_pressed: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulates pressing the left mouse button runner.simulate_mouse_button_pressed(BUTTON_LEFT) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates a mouse button pressed. /// &lt;/summary&gt; /// &lt;param name=\"button\"&gt;The mouse button identifier, one of the ButtonList button or button wheel constants.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseButtonPressed(ButtonList button); . Here is an example of how to use SimulateMouseButtonPressed: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulates pressing the left mouse button runner.SimulateMouseButtonPressed(ButtonList.Left); await runner.AwaitInputProcessed(); . | . We use await_input_processed() to ensure that the simulation of the mouse input is complete before moving on to the next instruction. simulate_mouse_button_press . The simulate_mouse_button_press function is used to simulate holding down a mouse button. | GdScript | C# | . | It takes the following arguments: . # buttonIndex: The mouse button identifier, one of the ButtonList button or button wheel constants. # button_index: Set to true to simulate a double-click func simulate_mouse_button_press(button_index: int, double_click := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_mouse_button_press: . var runner := scene_runner(\"res://test_scene.tscn\") # simulates mouse left button is press runner.simulate_mouse_button_press(BUTTON_LEFT) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates a mouse button press. (holding) /// &lt;/summary&gt; /// &lt;param name=\"button\"&gt;The mouse button identifier, one of the ButtonList button or button wheel constants.&lt;/param&gt; /// &lt;param name=\"doubleClick\"&gt;Set to true to simulate a double-click.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseButtonPress(ButtonList button); . Here is an example of how to use SimulateMouseButtonPress: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // simulates mouse left button is press runner.SimulateMouseButtonPress(ButtonList.Left); await runner.AwaitInputProcessed(); . | . We use await_input_processed() to ensure that the simulation of the mouse input is complete before moving on to the next instruction. simulate_mouse_button_release . The simulate_mouse_button_release function is used to simulate a mouse button is released. | GdScript | C# | . | It takes the following arguments: . # button_index: The mouse button identifier, one of the ButtonList button or button wheel constants. func simulate_mouse_button_release(button_index: int) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_mouse_button_release: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulates a mouse left button is released runner.simulate_mouse_button_release(BUTTON_LEFT) await runner.await_input_processed() . | It takes the following arguments: . /// &lt;summary&gt; /// Simulates a mouse button released. /// &lt;/summary&gt; /// &lt;param name=\"button\"&gt;The mouse button identifier, one of the ButtonList button or button wheel constants.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseButtonRelease(ButtonList button); . Here is an example of how to use SimulateMouseButtonRelease: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulates a mouse left button is released runner.SimulateMouseButtonRelease(ButtonList.Left); await runner.AwaitInputProcessed(); . | . We use await_input_processed() to ensure that the simulation of the mouse input is complete before moving on to the next instruction. ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/mouse/#how-to-simulate-mouse-interactions",
    
    "relUrl": "/advanced_testing/scene_runner/mouse/#how-to-simulate-mouse-interactions"
  },"218": {
    "doc": "Mouse Inputs",
    "title": "Mouse Inputs",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/mouse/",
    
    "relUrl": "/advanced_testing/scene_runner/mouse/"
  },"219": {
    "doc": "Signals",
    "title": "Signals",
    "content": "In asynchronous programming, you often need to wait for signals to be emitted before proceeding with your program’s execution. The Scene Runner provides several functions to help you wait for these signals efficiently. These functions allow you to synchronize your tests or operations with events occurring in the scene, ensuring that your program flows as expected. ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/signals/",
    
    "relUrl": "/advanced_testing/scene_runner/signals/"
  },"220": {
    "doc": "Signals",
    "title": "Function Overview",
    "content": ". | GdScript | C# | . | | Function | Description | . | await_signal | Waits for the specified signal to be emitted by the scene. If the signal is not emitted within the given timeout, the operation fails. | . | await_signal_on | Waits for the specified signal to be emitted by a particular source node. If the signal is not emitted within the given timeout, the operation fails. | . | | Function | Description | . | AwaitSignal | Waits for the specified signal to be emitted by the scene. If the signal is not emitted within the given timeout, the operation fails. | . | AwaitSignalOn | Waits for the specified signal to be emitted by a particular source node. If the signal is not emitted within the given timeout, the operation fails. | . | . await_signal . The await_signal function is used to pause execution until a specific signal is emitted by the scene. This is particularly useful for testing or ensuring that certain conditions are met before continuing. If the signal is not emitted within the specified timeout, the function will throw an error, indicating a failure in the expected signal emission. | GdScript | C# | . | It takes the following arguments: . ## Waits for the specified signal to be emitted by the scene. If the signal is not emitted within the given timeout, the operation fails. ## [member signal_name] : The name of the signal to wait for ## [member args] : The signal arguments as an array ## [member timeout] : The maximum duration (in milliseconds) to wait for the signal to be emitted before failing func await_signal(signal_name: String, args := [], timeout := 2000 ) -&gt; void: . Here is an example of how to use await_signal: . var runner := scene_runner(\"res://test_scene.tscn\") # grab the colorRect instance from the scene var box1: ColorRect = runner.get_property(\"_box1\") var box2: ColorRect = runner.get_property(\"_box2\") var box3: ColorRect = runner.get_property(\"_box3\") # call function `start_color_cycle` to start the color cycle runner.invoke(\"start_color_cycle\") # Wait for the signals `panel_color_change` emitted by the scene by a maximum of 100ms or fails await runner.await_signal(\"panel_color_change\", [box1, Color.RED], 100) await runner.await_signal(\"panel_color_change\", [box2, Color.BLUE], 100) await runner.await_signal(\"panel_color_change\", [box3, Color.GREEN], 100) . | It takes the following arguments: . /// &lt;summary&gt; /// Waits for given signal is emited. /// &lt;/summary&gt; /// &lt;param name=\"signal\"&gt;name of the signal to wait for&lt;/param&gt; /// &lt;param name=\"args\"&gt;expected signal arguments as an array&lt;/param&gt; /// &lt;returns&gt;Task to wait&lt;/returns&gt; Task AwaitSignal(string signal, params object[] args); . Here is an example of how to use AwaitSignal: . [TestCase] public async Task ColorChangedSignals() { var sceneRunner = ISceneRunner.Load(\"res://test_scene.tscn\"); // call function `start_color_cycle` to start the color cycle sceneRunner.Invoke(\"ColorCycle\"); await AwaitSignal(TestScene.SignalName.PanelColorChange, new Color(1, 0, 0)).WithTimeout(100); await AwaitSignal(TestScene.SignalName.PanelColorChange, new Color(0, 0, 1)).WithTimeout(100); await AwaitSignal(TestScene.SignalName.PanelColorChange, new Color(0, 1, 0)).WithTimeout(100); } . | . await_signal_on . The await_signal_on function works similarly to await_signal, but it targets a specific node (source) within the scene. This is useful when you want to wait for signals from a particular node rather than the entire scene. | GdScript | C# | . | It takes the following arguments: . ## Waits for the specified signal to be emitted by a particular source node. If the signal is not emitted within the given timeout, the operation fails. ## [member source] : the object from which the signal is emitted ## [member signal_name] : The name of the signal to wait for ## [member args] : The signal arguments as an array ## [member timeout] : tThe maximum duration (in milliseconds) to wait for the signal to be emitted before failing func await_signal_on(source: Object, signal_name: String, args := [], timeout := 2000 ) -&gt; void: . Here is an example of how to use await_signal_on: . var runner := scene_runner(\"res://test_scene.tscn\") # grab the colorRect instance from the scene var box1: ColorRect = runner.get_property(\"_box1\") var box2: ColorRect = runner.get_property(\"_box2\") var box3: ColorRect = runner.get_property(\"_box3\") # call function `start_color_cycle` how is triggering the box1..box3 to emit the signal `color_change` runner.start_color_cycle() # Wait for the signals `color_change` emitted by the components `box1`, `box2` and `box3` by a maximum of 100ms or fails await runner.await_signal_on(box1, \"color_change\", [Color.RED], 100) await runner.await_signal_on(box2, \"color_change\", [Color.BLUE], 100) await runner.await_signal_on(box3, \"color_change\", [Color.GREEN], 100) . | /// &lt;summary&gt; /// Waits for the specified signal to be emitted by a particular source node. /// If the signal is not emitted within the given timeout, the operation fails. /// &lt;/summary&gt; /// &lt;param name=\"source\"&gt;The object from which the signal is emitted.&lt;/param&gt; /// &lt;param name=\"signal\"&gt;The name of the signal to wait.&lt;/param&gt; /// &lt;param name=\"args\"&gt;An optional set of signal arguments.&lt;/param&gt; /// &lt;returns&gt;Task to wait.&lt;/returns&gt; static async Task&lt;ISignalAssert&gt; AwaitSignalOn(GodotObject source, string signal, params Variant[] args) . [TestCase] public async Task ColorChangedSignals() { var sceneRunner = ISceneRunner.Load(\"res://test_scene.tscn\"); var box1 = sceneRunner.GetProperty&lt;ColorRect&gt;(\"Box1\")!; var box2 = sceneRunner.GetProperty&lt;ColorRect&gt;(\"Box2\")!; var box3 = sceneRunner.GetProperty&lt;ColorRect&gt;(\"Box3\")!; // call function `start_color_cycle` to start the color cycle sceneRunner.Invoke(\"ColorCycle\"); await AwaitSignalOn(box1, TestScene.SignalName.PanelColorChange, new Color(1, 0, 0)).WithTimeout(100); await AwaitSignalOn(box2, TestScene.SignalName.PanelColorChange, new Color(0, 0, 1)).WithTimeout(100); await AwaitSignalOn(box3, TestScene.SignalName.PanelColorChange, new Color(0, 1, 0)).WithTimeout(100); } . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/signals/#function-overview",
    
    "relUrl": "/advanced_testing/scene_runner/signals/#function-overview"
  },"221": {
    "doc": "Synchronize Inputs",
    "title": "Synchronize Inputs Events",
    "content": "Waits for all input events to be processed by flushing any buffered input events and then awaiting a full cycle of both the process and physics frames. This is typically used to ensure that any simulated or queued inputs are fully processed before proceeding with the next steps in the scene. It’s essential for reliable input simulation or when synchronizing logic based on inputs. await_input_processed . The await_input_processed function do wait until all input events are processed. | GdScript | C# | . | ### Waits for all input events are processed func await_input_processed() -&gt; void: . Here is an example of how to use simulate_frames: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulates key combination ctrl+C is pressed runner.simulate_key_pressed(KEY_C, false, true) # finalize the input event processing await runner.await_input_processed() . | /// &lt;summary&gt; /// Waits for all input events to be processed by flushing any buffered input events and then awaiting a full cycle of /// both the process and physics frames. /// This is typically used to ensure that any simulated or queued inputs are fully processed before proceeding with the /// next steps in the scene. /// It's essential for reliable input simulation or when synchronizing logic based on inputs. /// &lt;/summary&gt; public static Task AwaitInputProcessed() . Here is an example of how to use AwaitInputProcessed: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); // Simulates key combination ctrl+C is pressed runner .SimulateKeyPress(Key.Ctrl) .SimulateKeyPress(Key.C); // finalize the input event processing await runner.AwaitInputProcessed(); . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/sync_inputs/#synchronize-inputs-events",
    
    "relUrl": "/advanced_testing/scene_runner/sync_inputs/#synchronize-inputs-events"
  },"222": {
    "doc": "Synchronize Inputs",
    "title": "Synchronize Inputs",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/sync_inputs/",
    
    "relUrl": "/advanced_testing/scene_runner/sync_inputs/"
  },"223": {
    "doc": "Touchscreen Inputs",
    "title": "Simulate Touchscreen Inputs",
    "content": "This section provides an overview of how to simulate touchscreen interactions in your scene using the Scene Runner in GdUnit4. These functions allow you to test different touch events, such as taps, drags, and drops, without requiring a physical touchscreen device. For more detailed information on Godot touchscreen events, please refer to the official Godot documentation . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/touchscreen/#simulate-touchscreen-inputs",
    
    "relUrl": "/advanced_testing/scene_runner/touchscreen/#simulate-touchscreen-inputs"
  },"224": {
    "doc": "Touchscreen Inputs",
    "title": "Function Overview",
    "content": "The functions listed below use the following classes to simulate touchscreen input events: . | InputEventScreenTouch | InputEventScreenDrag | . | GdScript | C# | . | | Function | Description | . | get_screen_touch_drag_position | Returns the actual position of the touch drag position by given index. | . | simulate_screen_touch_drag | Simulates a touch screen drag event to given position. | . | simulate_screen_touch_pressed | Simulates a screen touch is pressed. | . | simulate_screen_touch_press | Simulates a screen touch is press (holding). | . | simulate_screen_touch_release | Simulates a screen touch is released. | . | simulate_screen_touch_drag_relative | Simulates a touch screen drag&amp;drop to the relative coordinates (offset). | . | simulate_screen_touch_drag_absolute | Simulates a touch screen drop to the absolute coordinates. | . | simulate_screen_touch_drag_drop | Simulates a touch screen drop&amp;drop to the absolute coordinates. | . | | Function | Description | . |   |   | . Not yet implemented . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/touchscreen/#function-overview",
    
    "relUrl": "/advanced_testing/scene_runner/touchscreen/#function-overview"
  },"225": {
    "doc": "Touchscreen Inputs",
    "title": "How to Simulate Touchscreen Interactions",
    "content": "To simulate touchscreen interactions in your scene, you can use the provided touchscreen simulation functions. These functions allow you to mimic user touchscreen inputs for testing purposes. There are two main categories of functions: . | Unfinished Functions Unfinished functions simulate ongoing touch actions without completing them immediately. They are ideal for scenarios where you need to simulate multi-touch interactions, such as holding down one finger while using another to perform gestures. The interaction is completed by calling a corresponding release function. | simulate_screen_touch_press Simulates a finger pressing down on the screen at a specified position. | simulate_screen_touch_release Simulates a finger being lifted off the screen from a previously pressed position. | . | Finalized Functions Finalized functions simulate complete touchscreen actions, encompassing both the press and release events in a single function call. These are useful for simulating single-tap actions or gestures like swipes and drags. | get_screen_touch_drag_position Retrieves the current drag position of a touchscreen input. | simulate_screen_touch_drag Simulates a drag gesture to a position. | simulate_screen_touch_pressed Simulates a full press-and-release action at a specified position, mimicking a tap. | simulate_screen_touch_drag_relative Simulates a drag gesture by moving the touch input relative to its current position. | simulate_screen_touch_drag_absolute Simulates a drag gesture by moving the touch input to an absolute position. | simulate_screen_touch_drag_drop Simulates a drag-and-drop action, where a touch input is pressed, dragged to a target position, and then released. | . | . Advice To ensure input events are processed correctly, you must wait at least one frame cycle after simulating inputs. Use the await runner.await_input_processed() function to accomplish this. See Synchronize Inputs Events . get_screen_touch_drag_position . The get_screen_touch_drag_position function returns the current position of a drag event by its index. This is useful for verifying the location of touch events during drag operations. | GdScript | C# | . | It takes the following arguments: . ## Returns the actual position of the touchscreen drag position by given index. ## [member index] : The touch index in the case of a multi-touch event. func get_screen_touch_drag_position(index: int) -&gt; Vector2: . Here is an example of how to use get_screen_touch_drag_position: . var runner := scene_runner(\"res://test_scene.tscn\") # Example usage var drag_position = runner.get_screen_touch_drag_position(0) assert_that(drag_position).is_equal(Vector2(683, 339)) . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use GetScreenTouchDragPosition: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . simulate_screen_touch_drag . The simulate_screen_touch_drag function simulates a drag event from position. You can use this to start testing simple drag and drop interactions. | GdScript | C# | . | It takes the following arguments: . ## Simulates a touch screen drag event to given position. ## [member index] : The touch index in the case of a multi-touch event. ## [member position] : The drag start position, indicating the drag position. func simulate_screen_touch_drag(index: int, position: Vector2) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_screen_touch_drag: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate has touched the screen at position 50, 50 runner.simulate_screen_touch_pressed(0, Vector2(50, 50)) await runner.simulate_screen_touch_drag() . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use SimulateScreenTouchDrag: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . We use await_input_processed() to ensure that the simulation of the touchscreen input is complete before moving on to the next instruction. simulate_screen_touch_pressed . The simulate_screen_touch_pressed function simulates a touch pressed event at a specified position. You can use this to test simple tap interactions. | GdScript | C# | . | It takes the following arguments: . ## Simulates a screen touch is pressed. ## [member index] : The touch index in the case of a multi-touch event. ## [member position] : The position to touch the screen. ## [member double_tap] : If true, the touch's state is a double tab. func simulate_screen_touch_pressed(index: int, position: Vector2, double_tap := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_screen_touch_pressed: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulate has touched the screen at position 683, 339 runner.simulate_screen_touch_pressed(0, Vector2(683, 339)) await runner.await_input_processed() # Verify the position is set assert_that(runner.get_screen_touch_drag_position(0)).is_equal(Vector2(683, 339)) . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use SimulateScreenTouchPressed: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . We use await_input_processed() to ensure that the simulation of the touchscreen input is complete before moving on to the next instruction. simulate_screen_touch_press . The simulate_screen_touch_press function simulates a screen touch press without releasing it immediately, effectively simulating a “hold” action. | GdScript | C# | . | It takes the following arguments: . ## Simulates a screen touch press without releasing it immediately, effectively simulating a \"hold\" action. ## [member index] : The touch index in the case of a multi-touch event. ## [member position] : The position to touch the screen. ## [member double_tap] : If true, the touch's state is a double tab. func simulate_screen_touch_press(index: int, position: Vector2, double_tap := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_screen_touch_press: . var runner := scene_runner(\"res://test_scene.tscn\") # Setup touch is actual press and hold at position 683, 339 runner.simulate_screen_touch_press(0, Vector2(683, 339)) await _runner.await_input_processed() # Verify the InputEventScreenTouch is emitted assert_that(runner.get_screen_touch_drag_position(0)).is_equal(Vector2(683, 339)) . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use SimulateScreenTouchPress: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . We use await_input_processed() to ensure that the simulation of the touchscreen input is complete before moving on to the next instruction. simulate_screen_touch_release . The simulate_screen_touch_release function simulates the release of a screen touch event. This can be used in combination with simulate_screen_touch_press to complete a tap or hold interaction. | GdScript | C# | . | It takes the following arguments: . ## Simulates a screen touch is released. ## [member index] : The touch index in the case of a multi-touch event. ## [member double_tap] : If true, the touch's state is a double tab. func simulate_screen_touch_release(index: int, double_tap := false) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_screen_touch_release: . var runner := scene_runner(\"res://test_scene.tscn\") # Setup touch is actual press and hold at position 683, 339 runner.simulate_screen_touch_press(0, Vector2(683, 339)) # ... # Simulate release the touche press runner.simulate_screen_touch_release(0) await _runner.await_input_processed() # continue your checks here . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use SimulateScreenTouchRelease: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . We use await_input_processed() to ensure that the simulation of the touchscreen input is complete before moving on to the next instruction. simulate_screen_touch_drag_relative . The simulate_screen_touch_drag_relative function simulates a touch drag and drop event to a relative position. Use this function to test drag-and-drop mechanics that move objects by a specified offset. | GdScript | C# | . | It takes the following arguments: . ## Simulates a touch drag and drop event to a relative position. ## [member index] : The touch index in the case of a multi-touch event. ## [member relative] : The relative position, indicating the drag&amp;drop position offset. ## [member time] : The time to move to the relative position in seconds (default is 1 second). ## [member trans_type] : Sets the type of transition used (default is TRANS_LINEAR). func simulate_screen_touch_drag_relative(index: int, relative: Vector2, time: float = 1.0, trans_type: Tween.TransitionType = Tween.TRANS_LINEAR) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_screen_touch_drag_relative: . var runner := scene_runner(\"res://test_scene.tscn\") # Set the initial touch pressing at position 50, 50 runner.simulate_screen_touch_press(0, Vector2(50, 50)) # And drop it at relative to begin position by offset (100, 0) await runner.simulate_screen_touch_drag_relative(0, Vector2(100, 0)) . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use SimulateScreenTouchDragRelative: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . simulate_screen_touch_drag_absolute . The simulate_screen_touch_drag_absolute function simulates a touch drag and drop event to an absolute position. Use this function to test scenarios where an object needs to be moved to a specific location. | GdScript | C# | . | It takes the following arguments: . ## Simulates a touch screen drop to the absolute coordinates (offset). ## [member index] : The touch index in the case of a multi-touch event. ## [member position] : The final position, indicating the drop position. ## [member time] : The time to move to the final position in seconds (default is 1 second). ## [member trans_type] : Sets the type of transition used (default is TRANS_LINEAR). func simulate_screen_touch_drag_absolute(index: int, position: Vector2, time: float = 1.0, trans_type: Tween.TransitionType = Tween.TRANS_LINEAR) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_screen_touch_drag_absolute: . var runner := scene_runner(\"res://test_scene.tscn\") # Set the initial touch pressing at position 50, 50 runner.simulate_screen_touch_press(0, Vector2(50, 50)) # Simulate a drag to absolute position 150, 50 await runner.simulate_screen_touch_drag_absolute(0, Vector2(150, 50)) . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use SimulateScreenTouchDragAbsolute: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . simulate_screen_touch_drag_drop . The simulate_screen_touch_drag_drop function simulates a complete drag and drop event from one position to another. This is ideal for testing complex drag-and-drop scenarios that require a specific start and end position. | GdScript | C# | . | It takes the following arguments: . ## Simulates a complete drag and drop event from one position to another. ## [member index] : The touch index in the case of a multi-touch event. ## [member position] : The drag start position, indicating the drag position. ## [member drop_position] : The drop position, indicating the drop position. ## [member time] : The time to move to the final position in seconds (default is 1 second). ## [member trans_type] : Sets the type of transition used (default is TRANS_LINEAR). func simulate_screen_touch_drag_drop(index: int, position: Vector2, drop_position: Vector2, time: float = 1.0, trans_type: Tween.TransitionType = Tween.TRANS_LINEAR) -&gt; GdUnitSceneRunner: . Here is an example of how to use simulate_screen_touch_drag_drop: . var runner := scene_runner(\"res://test_scene.tscn\") # Simulates a full drag and drop from position 50, 50 to 100, 50 await runner.simulate_screen_touch_drag_drop(0, Vector2(50, 50), Vector2(100,50)) . | It takes the following arguments: . // Not yet implemented! . Here is an example of how to use SimulateScreenTouchDragDrop: . ISceneRunner runner = ISceneRunner.Load(\"res://test_scene.tscn\"); . | . ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/touchscreen/#how-to-simulate-touchscreen-interactions",
    
    "relUrl": "/advanced_testing/scene_runner/touchscreen/#how-to-simulate-touchscreen-interactions"
  },"226": {
    "doc": "Touchscreen Inputs",
    "title": "Touchscreen Inputs",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/scene_runner/touchscreen/",
    
    "relUrl": "/advanced_testing/scene_runner/touchscreen/"
  },"227": {
    "doc": "Signals",
    "title": "Testing for Signals",
    "content": "With GdUnit, you can test signals in your Godot projects. GdUnit provides two tools specifically for working with signals: assert_signal() and monitor_signals(). By using these tools, you can test the emission of signals in your Godot projects and ensure that the correct signals are being sent and received. ",
    "url": "/gdUnit4/latest/advanced_testing/signals/#testing-for-signals",
    
    "relUrl": "/advanced_testing/signals/#testing-for-signals"
  },"228": {
    "doc": "Signals",
    "title": "Verify Signals",
    "content": "The assert_signal() an Assertion Tool to verify for emitted signals until a certain time. When the timeout is reached, the assertion fails with a timeout error. For more details show assert_signal . Here’s an example of using assert_signal(): . | GdScript | C# | . | extends GdUnitTestSuite class TestEmitter extends Node: signal test_signal_counted(value) signal test_signal() signal test_signal_unused() var _trigger_count :int var _count := 0 func _init(trigger_count := 10): _trigger_count = trigger_count func _process(_delta): if _count &gt;= _trigger_count: test_signal_counted.emit(_count) if _count == 20: test_signal.emit() _count += 1 var signal_emitter :TestEmitter func before_test(): signal_emitter = auto_free(TestEmitter.new()) add_child(signal_emitter) func test_signal_emitted() -&gt; void: # wait until signal 'test_signal' without args is emitted await assert_signal(signal_emitter).is_emitted(\"test_signal\") func test_signal_is_emitted_with_args() -&gt; void: # wait until signal 'test_signal_counted' is emitted with value 20 await assert_signal(signal_emitter).is_emitted(\"test_signal_counted\", [20]) func test_signal_is_not_emitted() -&gt; void: # wait to verify signal 'test_signal_counted()' is not emitted until the first 50ms await assert_signal(signal_emitter).wait_until(50).is_not_emitted(\"test_signal_counted\") func test_is_signal_exists() -&gt; void: var node :Node2D = auto_free(Node2D.new()) assert_signal(node).is_signal_exists(\"visibility_changed\")\\ .is_signal_exists(\"draw\")\\ .is_signal_exists(\"visibility_changed\")\\ .is_signal_exists(\"tree_entered\")\\ .is_signal_exists(\"tree_exiting\")\\ .is_signal_exists(\"tree_exited\") . | using System.Threading.Tasks; using GdUnit4.Asserts; using GdUnit4.Core.Signals; using static Assertions; [TestSuite] public partial class SignalAssertTest { private sealed partial class TestEmitter : Godot.Node { [Godot.Signal] public delegate void SignalAEventHandler(); [Godot.Signal] public delegate void SignalBEventHandler(string value); [Godot.Signal] public delegate void SignalCEventHandler(string value, int count); private int frame; public override void _Process(double delta) { switch (frame) { case 5: EmitSignal(SignalName.SignalA); break; case 10: EmitSignal(SignalName.SignalB, \"abc\"); break; case 15: EmitSignal(SignalName.SignalC, \"abc\", 100); break; } frame++; } } [TestCase] public async Task IsEmitted() { var node = AutoFree(new TestEmitter())!; await AssertSignal(node).IsEmitted(\"SignalA\").WithTimeout(200); await AssertSignal(node).IsEmitted(\"SignalB\", \"abc\").WithTimeout(200); await AssertSignal(node).IsEmitted(\"SignalC\", \"abc\", 100).WithTimeout(200); } [TestCase] public async Task IsNoEmitted() { var node = AddNode(new Godot.Node2D()); await AssertSignal(node).IsNotEmitted(\"visibility_changed\", 10).WithTimeout(100); } [TestCase] public void IsSignalExists() { var node = AutoFree(new Godot.Node2D())!; AssertSignal(node).IsSignalExists(\"visibility_changed\") .IsSignalExists(\"draw\") .IsSignalExists(\"visibility_changed\") .IsSignalExists(\"tree_entered\") .IsSignalExists(\"tree_exiting\") .IsSignalExists(\"tree_exited\"); } } . | . ",
    "url": "/gdUnit4/latest/advanced_testing/signals/#verify-signals",
    
    "relUrl": "/advanced_testing/signals/#verify-signals"
  },"229": {
    "doc": "Signals",
    "title": "Monitor Signals",
    "content": "The monitor_signals() tool allows you to monitor the emission of signals from a specific object. It sets up a signal monitoring system for the specified object, which enables you to capture and analyze the signals emitted during the execution of your test. | GdScript | C# | . | func monitor_signals(source :Object, _auto_free := true) -&gt; Object: . | In C#, the monitor is integrated into the AssertSignal and is generated implicitly the first time an assertion is used on an emitter. To visualize this better, you can use StartMonitoring. From this point on, all emitted signals are recorded. /// &lt;summary&gt; /// Starts the monitoring of emitted signals during the test runtime. /// It should be called first if you want to collect all emitted signals after the emitter has been created. /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public ISignalAssert StartMonitoring(); . | . Here’s an example of using signal monitors. | GdScript | C# | . | extends GdUnitTestSuite class MyEmitter extends Node: signal my_signal_a signal my_signal_b(value :String) func do_emit_a() -&gt; void: my_signal_a.emit() func do_emit_b() -&gt; void: my_signal_b.emit(\"foo\") func test_monitor_signals() -&gt; void: # start monitoring on the emitter to collect all emitted signals var emitter_a := monitor_signals(MyEmitter.new()) var emitter_b := monitor_signals(MyEmitter.new()) # verify the signals are not emitted initial await assert_signal(emitter_a).wait_until(50).is_not_emitted('my_signal_a') await assert_signal(emitter_a).wait_until(50).is_not_emitted('my_signal_b') await assert_signal(emitter_b).wait_until(50).is_not_emitted('my_signal_a') await assert_signal(emitter_b).wait_until(50).is_not_emitted('my_signal_b') # emit signal `my_signal_a` on emitter_a emitter_a.do_emit_a() await assert_signal(emitter_a).is_emitted('my_signal_a') # emit signal `my_signal_b` on emitter_a emitter_a.do_emit_b() await assert_signal(emitter_a).is_emitted('my_signal_b', [\"foo\"]) # verify emitter_b still has nothing emitted await assert_signal(emitter_b).wait_until(50).is_not_emitted('my_signal_a') await assert_signal(emitter_b).wait_until(50).is_not_emitted('my_signal_b') # now verify emitter b emitter_b.do_emit_a() await assert_signal(emitter_b).wait_until(50).is_emitted('my_signal_a') . | using System.Threading.Tasks; using GdUnit4.Asserts; using GdUnit4.Core.Signals; using static Assertions; [TestSuite] public partial class SignalAssertTest { public sealed partial class MyEmitter : Godot.Node { [Godot.Signal] public delegate void SignalAEventHandler(); [Godot.Signal] public delegate void SignalBEventHandler(string value); public void DoEmitSignalA() =&gt; EmitSignal(SignalName.SignalA); public void DoEmitSignalB() =&gt; EmitSignal(SignalName.SignalB, \"foo\"); } [TestCase(Timeout = 1000)] public async Task MonitorOnSignal() { var emitterA = AutoFree(new MyEmitter())!; var emitterB = AutoFree(new MyEmitter())!; // verify initial the emitters are not monitored AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterA, MyEmitter.SignalName.SignalA)).IsFalse(); AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterA, MyEmitter.SignalName.SignalB)).IsFalse(); AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterB, MyEmitter.SignalName.SignalA)).IsFalse(); AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterB, MyEmitter.SignalName.SignalB)).IsFalse(); // start monitoring on the emitter A AssertSignal(emitterA).StartMonitoring(); // verify the emitters are now monitored AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterA, MyEmitter.SignalName.SignalA)).IsTrue(); AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterA, MyEmitter.SignalName.SignalB)).IsTrue(); AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterB, MyEmitter.SignalName.SignalA)).IsFalse(); AssertThat(GodotSignalCollector.Instance.IsSignalCollecting(emitterB, MyEmitter.SignalName.SignalB)).IsFalse(); // verify the signals are not emitted initial await AssertSignal(emitterA).IsNotEmitted(MyEmitter.SignalName.SignalA).WithTimeout(50); await AssertSignal(emitterA).IsNotEmitted(MyEmitter.SignalName.SignalB).WithTimeout(50); await AssertSignal(emitterB).IsNotEmitted(MyEmitter.SignalName.SignalA).WithTimeout(50); await AssertSignal(emitterB).IsNotEmitted(MyEmitter.SignalName.SignalB).WithTimeout(50); // emit signal `signal_a` on emitter_a emitterA.DoEmitSignalA(); await AssertSignal(emitterA).IsEmitted(MyEmitter.SignalName.SignalA).WithTimeout(50); // emit signal `my_signal_b` on emitter_a emitterA.DoEmitSignalB(); await AssertSignal(emitterA).IsEmitted(MyEmitter.SignalName.SignalB, \"foo\").WithTimeout(50); // verify emitter_b still has nothing emitted await AssertSignal(emitterB).IsNotEmitted(MyEmitter.SignalName.SignalA).WithTimeout(50); await AssertSignal(emitterB).IsNotEmitted(MyEmitter.SignalName.SignalB).WithTimeout(50); // now verify emitter b emitterB.DoEmitSignalA(); await AssertSignal(emitterB).IsEmitted(MyEmitter.SignalName.SignalA).WithTimeout(50); } } . | . ",
    "url": "/gdUnit4/latest/advanced_testing/signals/#monitor-signals",
    
    "relUrl": "/advanced_testing/signals/#monitor-signals"
  },"230": {
    "doc": "Signals",
    "title": "Signals",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/signals/",
    
    "relUrl": "/advanced_testing/signals/"
  },"231": {
    "doc": "Skip Tests",
    "title": "How to Skip Tests in GdUnit4",
    "content": "In GdUnit4, you can skip individual test cases or entire test suites using the do_skip parameter. This parameter allows you to specify conditions under which a test should be skipped during execution. By default, tests are not skipped unless specified. ",
    "url": "/gdUnit4/latest/advanced_testing/skip-tests/#how-to-skip-tests-in-gdunit4",
    
    "relUrl": "/advanced_testing/skip-tests/#how-to-skip-tests-in-gdunit4"
  },"232": {
    "doc": "Skip Tests",
    "title": "Skipping Individual Test Cases",
    "content": "To skip an individual test case, you can use the do_skip parameter when defining the test case function. Set the parameter to true to skip the test case. Here’s an example of skipping an individual test case: . | GdScript | C# | . | func test_case1(_do_skip := true): ... 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | [TestCase(DoSkip = true)] public void Case1() { ... | . In this example, the test test_case1 will be skipped because the do_skip parameter is set to true. ",
    "url": "/gdUnit4/latest/advanced_testing/skip-tests/#skipping-individual-test-cases",
    
    "relUrl": "/advanced_testing/skip-tests/#skipping-individual-test-cases"
  },"233": {
    "doc": "Skip Tests",
    "title": "Skipping Entire Test Suites",
    "content": "You can skip entire test suites using the do_skip parameter on the before hook. Set the parameter to true to skip the test suite. Here’s an example of skipping an entire test suite: . | GdScript | C# | . | func before(_do_skip := true): # Test hook code here . 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | [Before(DoSkip = true)] public void Before() { . | . In this example, all tests within this test-suite will be skipped because the do_skip parameter is set to true. ",
    "url": "/gdUnit4/latest/advanced_testing/skip-tests/#skipping-entire-test-suites",
    
    "relUrl": "/advanced_testing/skip-tests/#skipping-entire-test-suites"
  },"234": {
    "doc": "Skip Tests",
    "title": "Customizing Skip Reasons",
    "content": "You can provide a custom skip reason using the skip_reason parameter. This reason will be displayed when the test is skipped. It helps provide context for why the test is being skipped. | GdScript | C# | . | func test_case1(_do_skip := true, _skip_reason := \"Test case under development\"): # Test case code here . 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | [TestCase(DoSkip = true, SkipReason=\"Test case under development\")] public void Case1() { ... | . In this example, the test test_case1 will be skipped with the reason “Test case under development.” . ",
    "url": "/gdUnit4/latest/advanced_testing/skip-tests/#customizing-skip-reasons",
    
    "relUrl": "/advanced_testing/skip-tests/#customizing-skip-reasons"
  },"235": {
    "doc": "Skip Tests",
    "title": "Skipping with Conditional Expressions",
    "content": "You can also use conditional expressions for the do_skip parameter to skip tests or a test-suite based on runtime evaluations. For example, you can use an expression to dynamically decide whether a test should be skipped or not. Here’s an example of using a conditional expression to skip a test case: . | GdScript | C# | . | func test_case1(_do_skip := Engine.get_version_info().hex &lt; 0x40100): # Test case code here . 💡 To avoid warnings about unused arguments, use the underscore prefix _ or use @warning_ignore(“unused_parameter”). | [TestCase(DoSkip = Engine.get_version_info().hex &lt; 0x40100)] public void Case1() { ... | . In this example, the test test_case1 will be skipped for all Godot version before 4.1.x the expression is evaluates at runtime. ",
    "url": "/gdUnit4/latest/advanced_testing/skip-tests/#skipping-with-conditional-expressions",
    
    "relUrl": "/advanced_testing/skip-tests/#skipping-with-conditional-expressions"
  },"236": {
    "doc": "Skip Tests",
    "title": "Conclusion",
    "content": "Skipping tests using the do_skip parameter allows you to control which tests are executed based on specific conditions. This can be useful when you want to temporarily exclude tests that are not ready or relevant for the current state of your project. ",
    "url": "/gdUnit4/latest/advanced_testing/skip-tests/#conclusion",
    
    "relUrl": "/advanced_testing/skip-tests/#conclusion"
  },"237": {
    "doc": "Skip Tests",
    "title": "Skip Tests",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/skip-tests/",
    
    "relUrl": "/advanced_testing/skip-tests/"
  },"238": {
    "doc": "Spying",
    "title": "Spy",
    "content": "Advice This Spy implementation is only available for GDScripts, for C# you can use already existing mocking frameworks like Moq ",
    "url": "/gdUnit4/latest/advanced_testing/spy/#spy",
    
    "relUrl": "/advanced_testing/spy/#spy"
  },"239": {
    "doc": "Spying",
    "title": "Definition",
    "content": "A Spy is used to verify a certain behavior during a test and tracks all function calls and their parameters of an instance. var to_spy := spy(&lt;instance&gt;) . ",
    "url": "/gdUnit4/latest/advanced_testing/spy/#definition",
    
    "relUrl": "/advanced_testing/spy/#definition"
  },"240": {
    "doc": "Spying",
    "title": "What is the difference between a spy and an mock?",
    "content": "In contrast to a mock, a spy calls the real implementation. It behaves in the same way as the normal instance. ",
    "url": "/gdUnit4/latest/advanced_testing/spy/#what-is-the-difference-between-a-spy-and-an-mock",
    
    "relUrl": "/advanced_testing/spy/#what-is-the-difference-between-a-spy-and-an-mock"
  },"241": {
    "doc": "Spying",
    "title": "How to use a Spy",
    "content": "Advice Spy on core functions are not possible since Godot has improved the GDScript performance. According to the Godot core developers, overwriting core functions is no longer supported, so there is no way to spy on core functions anymore. To spy on an object, simply use spy(&lt;instance&gt;). A spied instance is marked for auto-freeing, so you don’t need to free it manually. var spy:= spy(auto_free(Node.new())) . Here a small example to use the spy on a instance of the class ‘TestClass’: . class_name TestClass extends Node func message() -&gt; String: return \"a message\" func test_spy(): var instance = auto_free(TestClass.new()) # Build a spy on the instance var spy = spy(instance) # Call function `message` on the spy to track the interaction spy.message() # Verify the function 'message' is called one times verify(spy, 1).message() . ",
    "url": "/gdUnit4/latest/advanced_testing/spy/#how-to-use-a-spy",
    
    "relUrl": "/advanced_testing/spy/#how-to-use-a-spy"
  },"242": {
    "doc": "Spying",
    "title": "Verification of Function Calls",
    "content": "A spy keeps track of all function calls and their arguments. Use the verify() method on the spy to verify that certain behavior happened at least once or an exact number of times. This way, you can check if a particular function was called and how many times it was called. | Function | Description | . | verify | Verifies that certain behavior happened at least once or an exact number of times. | . | verify_no_interactions | Verifies that no interactions happened on the spy. | . | verify_no_more_interactions | Verifies that the given spy has no unverified interactions. | . | reset | Resets the saved function call counters on a spy. | . verify . The verify() method is used to verify that a function was called a certain number of times. It takes two arguments: the spy instance and the expected number of times the function should have been called. You can also use argument matchers to verify that specific arguments were passed to the function. verify(&lt;spy&gt;, &lt;times&gt;).function(&lt;args&gt;) . Here’s an example: . var spyed_node :Node = spy(Node.new()) # Verify we have no interactions currently on this instance verify_no_interactions(spyed_node) # Call with different arguments spyed_node.set_process(false) # 1 times spyed_node.set_process(true) # 1 times spyed_node.set_process(true) # 2 times # Verify how often we called the function with different argument verify(spyed_node, 1).set_process(false)# in sum one time with false verify(spyed_node, 2).set_process(true) # in sum two times with true # Verify will fail because we expect the function `set_process(true)` to be called 3 times but it was only called 2 times verify(spyed_node, 3).set_process(true) . verify_no_interactions . The verify_no_interactions() method verifies that no function calls were made on the spy. verify_no_interactions(&lt;spy&gt;) . Here’s an example: . var spyed_node := spy(Node.new()) as Node # Test that we have no initial interactions on this spy verify_no_interactions(spyed_node) # Interact by calling `get_name()` spyed_node.get_name() # Now this verification will fail because we have interacted on this spy by calling `get_name` verify_no_interactions(spyed_node) . verify_no_more_interactions . The verify_no_more_interactions() method verifies that all interactions on the spy have been verified. If the spy has recorded more interactions than you verified with verify(), an error is reported. verify_no_more_interactions(&lt;spy&gt;) . Here’s an example: . var spyed_node := spy(Node.new()) as Node # Interact on two functions spyed_node.is_a_parent_of(null) spyed_node.set_process(false) # Verify that the spy interacts as expected verify(spyed_node).is_a_parent_of(null) verify(spyed_node).set_process(false) # Check that there are no further interactions with the spy verify_no_more_interactions(spyed_node) # Simulate an unexpected interaction with `set_process` spyed_node.set_process(false) # Verify that there are no further interactions with the spy # and that the previous unexpected interaction is detected (the test will fail here) verify_no_more_interactions(spyed_node) . reset . Resets the recorded function interactions of the given spy. Sometimes we want to reuse an already created spy for different test scenarios and have to reset the recorded interactions. reset(&lt;spy&gt;) . Here’s an example: . var spyed_node :Node = spy(Node.new()) # First, we test by interacting with two functions spyed_node.is_a_parent_of(null) spyed_node.set_process(false) # Verify if the interactions were recorded; at this point, two interactions are recorded verify(spyed_node).is_a_parent_of(null) verify(spyed_node).set_process(false) # Now, we want to test a different scenario and we need to reset the current recorded interactions reset(spyed_node) # Verify that the previously recorded interactions have been removed verify_no_more_interactions(spyed_node) # Continue testing spyed_node.set_process(true) verify(spyed_node).set_process(true) verify_no_more_interactions(spyed_node) . ",
    "url": "/gdUnit4/latest/advanced_testing/spy/#verification-of-function-calls",
    
    "relUrl": "/advanced_testing/spy/#verification-of-function-calls"
  },"243": {
    "doc": "Spying",
    "title": "Argument Matchers and spys",
    "content": "Argument matchers allow you to simplify the verification of function calls by verifying function arguments based on their type or class. This is particularly useful when working with spys because you can use argument matchers to verify function calls without specifying the exact argument values. For example, instead of verifying that a function was called with a specific boolean argument value, you can use the any_bool() argument matcher to verify that the function was called with any boolean value. Here’s an example: . var spyed_node :Node = spy(Node.new()) # Call the function with different arguments spyed_node.set_process(false) # Called 1 time spyed_node.set_process(true) # Called 1 time spyed_node.set_process(true) # Called 2 times # Verify that the function was called with any boolean value 3 times verify(spyed_node, 3).set_process(any_bool()) . For more details on how to use argument matchers, please see the Argument Matchers section. ",
    "url": "/gdUnit4/latest/advanced_testing/spy/#argument-matchers-and-spys",
    
    "relUrl": "/advanced_testing/spy/#argument-matchers-and-spys"
  },"244": {
    "doc": "Spying",
    "title": "Spying",
    "content": " ",
    "url": "/gdUnit4/latest/advanced_testing/spy/",
    
    "relUrl": "/advanced_testing/spy/"
  },"245": {
    "doc": "Tools and Helpers",
    "title": "Tools and Helpers",
    "content": "GdUnit provides several tools to help you write tests, including managing objects to free and accessing a temporary filesystem to store your test data. ",
    "url": "/gdUnit4/latest/advanced_testing/tools/",
    
    "relUrl": "/advanced_testing/tools/"
  },"246": {
    "doc": "Tools and Helpers",
    "title": "auto_free()",
    "content": "A little helper for automatically releasing the objects you create after test execution. Note that objects do not manage memory. If a class inherits from Object, you will need to delete its instances manually. References keep an internal reference counter so that they are automatically released when no longer in use, and only then. Therefore, you do not need to free references manually with Object.free(). Use auto_free() to automatically release objects when they are no longer in use. Objects that are covered by auto_free only live in the scope where they are used. These scopes include the test suite setup, test case setup, and the tests themselves. | GdScript | C# | . | func auto_free(obj :Object) -&gt; Object: . | public static T AutoFree&lt;T&gt;(T obj); . | . Here’s an small example: . | GdScript | C# | . | # using auto_free() on Path object to register for freeing after the test is finished assert_object(auto_free(Path.new())).is_not_instanceof(Tree) . | using static Assertions; ... // using AutoFree() on Path object to register for freeing after the test is finished AssertObject(AutoFree(new Godot.Path())).IsNotInstanceOf&lt;Godot.Tree&gt;(); . | . Here’s an extended example of a test suite to demonstrate the usage of auto_free() and freeing memory: . extends GdUnitTestSuite var _obj_a; var _obj_b; var _obj_c; # Scope test suite setup func before(): _obj_a = auto_free(Node.new()) print_obj_usage(\"before\") # Scope test case setup func before_test(): _obj_b = auto_free(Node.new()) print_obj_usage(\"before_test\") # Scope test func test(): _obj_c = auto_free(Node.new()) # _obj_a still lives here # _obj_b still lives here # _obj_b still lives here print_obj_usage(\"test\") # Scope test case setup func after_test(): # _obj_a still lives here # _obj_b still lives here # _obj_c is freed print_obj_usage(\"after_test\") # Scope test suite setup func after(): # _obj_a still lives here # _obj_b is auto freed # _obj_c is freed print_obj_usage(\"after\") func _notification(what): if what == NOTIFICATION_PATH_CHANGED: print_header() else: print_obj_usage(GdObjects.notification_as_string(what)) func print_header() : prints(\"|%16s | %16s | %16s | %16s |\" % [\"\", \"_obj_a\", \"_obj_b\", \"_obj_c\"]) prints(\"----------------------------------------------------------------------------\") func print_obj_usage(name :String) : prints(\"|%16s | %16s | %16s | %16s |\" % [name, _obj_a, _obj_b, _obj_c]) . | State | _obj_a | _obj_b | _obj_c | . | PARENTED | Null | Null | Null | . | ENTER_TREE | Null | Null | Null | . | POST_ENTER_TREE | Null | Null | Null | . | READY | Null | Null | Null | . | before | [Node:1515] | Null | Null | . | before_test | [Node:1515] | [Node:1519] | Null | . | test | [Node:1515] | [Node:1519] | [Node:1521] | . | after_test | [Node:1515] | [Node:1519] | [Deleted Object] | . | after | [Node:1515] | [Deleted Object] | [Deleted Object] | . | EXIT_TREE | [Deleted Object] | [Deleted Object] | [Deleted Object] | . | UNPARENTED | [Deleted Object] | [Deleted Object] | [Deleted Object] | . | PREDELETE | [Deleted Object] | [Deleted Object] | [Deleted Object] | . ",
    "url": "/gdUnit4/latest/advanced_testing/tools/#auto_free",
    
    "relUrl": "/advanced_testing/tools/#auto_free"
  },"247": {
    "doc": "Tools and Helpers",
    "title": "create_temp_dir()",
    "content": "This helper function creates a new directory under the temporary directory user://tmp, which can be useful for storing data during test execution. The directory is automatically deleted after the test suite has finished executing. | GdScript | C# | . | func create_temp_dir(relative_path :String) -&gt; String: . | public static string CreateTempDir(string path); . | . Here’s an example: . func test_save_game_data(): # create a temporay directory to store test data var temp_dir := create_temp_dir(\"examples/game/save\") var file_to_save := temp_dir + \"/save_game.dat\" var data = { 'user': \"Hoschi\", 'level': 42 } var file := File.new() file.open(file_to_save, File.WRITE) file.store_line(JSON.print(data)) file.close() # the data is saved at \"user://tmp/examples/game/save/save_game.dat\" assert_bool(file.file_exists(file_to_save)).is_true() . ",
    "url": "/gdUnit4/latest/advanced_testing/tools/#create_temp_dir",
    
    "relUrl": "/advanced_testing/tools/#create_temp_dir"
  },"248": {
    "doc": "Tools and Helpers",
    "title": "clean_temp_dir()",
    "content": "Deletes the temporary directory created by create_temp_dir(). This function is called automatically after each execution of the test suite to ensure that the temporary directory is clean and ready for the next test suite. | GdScript | C# | . | func clean_temp_dir(): . | public static void ClearTempDir(); . | . ",
    "url": "/gdUnit4/latest/advanced_testing/tools/#clean_temp_dir",
    
    "relUrl": "/advanced_testing/tools/#clean_temp_dir"
  },"249": {
    "doc": "Tools and Helpers",
    "title": "create_temp_file()",
    "content": "The create_temp_file() function creates a new File under the temporary directory user://tmp + &lt;relative_path&gt; with the given name &lt;file_name&gt; and file &lt;mode&gt; (default = File.WRITE). If successful, the returned File is automatically closed after the execution of the test suite. We can create a small test file at the beginning of a test suite in the before() function and read it later in the test. It is not necessary to close the file, as the GdUnit test runner will close it automatically. func create_temp_file(relative_path :String, file_name :String, mode :=File.WRITE) -&gt; File: . Here’s an example: . # setup test data func before(): # opens a tmp file with WRITE mode under \"user://tmp/examples/game/game.sav\" (auto closed) var file := create_temp_file(\"examples/game\", \"game.sav\") assert_object(file).is_not_null() # write some example data file.store_line(\"some data\") # not needs to be manually close, will be auto closed before test execution func test_create_temp_file(): # opens the stored tmp file with READ mode under \"user://tmp/examples/game/game.sav\" (auto closed) var file_read := create_temp_file(\"examples/game\", \"game.sav\", File.READ) assert_object(file_read).is_not_null() assert_str(file_read.get_as_text()).is_equal(\"some data\\n\") # not needs to be manually close, will be auto closed after test suite execution . ",
    "url": "/gdUnit4/latest/advanced_testing/tools/#create_temp_file",
    
    "relUrl": "/advanced_testing/tools/#create_temp_file"
  },"250": {
    "doc": "Tools and Helpers",
    "title": "resource_as_array()",
    "content": "This function reads a resource file located at the given path &lt;resource_path&gt; and returns its contents as a PackedStringArray. func resource_as_array(resource_path :String) -&gt; PoolStringArray: . Here’s an example: . var rows = [\"row a\", \"row b\"] var file_content := resource_as_array(\"res://myproject/test/resources/TestRows.txt\") assert_array(rows).contains_exactly(file_content) . ",
    "url": "/gdUnit4/latest/advanced_testing/tools/#resource_as_array",
    
    "relUrl": "/advanced_testing/tools/#resource_as_array"
  },"251": {
    "doc": "Tools and Helpers",
    "title": "resource_as_string()",
    "content": "This function reads a resource file located at the given path &lt;resource_path&gt; and returned the content as String. func resource_as_string(resource_path :String) -&gt; String: . Here’s an example: . var rows = \"row a\\nrow b\\n\" var file_content := resource_as_string(\"res://myproject/test/resources/TestRows.txt\") assert_string(rows).is_equal(file_content) . ",
    "url": "/gdUnit4/latest/advanced_testing/tools/#resource_as_string",
    
    "relUrl": "/advanced_testing/tools/#resource_as_string"
  },"252": {
    "doc": "Tutorials",
    "title": "GdUnit4 Tutorials",
    "content": "Welcome to the GdUnit4 tutorial page! Here, we’ll go through a set of tutorials that will help you learn how to use GdUnit4 to write tests for your Godot game. Prerequisites Before starting these tutorials, you should have a basic understanding of the Godot engine and the GDScript language. You should also have GdUnit4 installed and set up in your Godot project. ",
    "url": "/gdUnit4/latest/tutorials/index/#gdunit4-tutorials",
    
    "relUrl": "/tutorials/index/#gdunit4-tutorials"
  },"253": {
    "doc": "Tutorials",
    "title": "Tutorial List",
    "content": "Here’s a list of tutorials we currently have available: . | Getting Started with GDScript Tests | Test Fixtures and Setup Methods | Assertions and Expectations | Test Doubles: Stubs, Mocks, and Spies | Running Tests from the Command Line | Testing Signals and Events | Test Driven Development (TDD) with GdUnit4 | Testing Scene Interactions | . ",
    "url": "/gdUnit4/latest/tutorials/index/#tutorial-list",
    
    "relUrl": "/tutorials/index/#tutorial-list"
  },"254": {
    "doc": "Tutorials",
    "title": "Basics",
    "content": "This is a list of sample test cases that can serve as examples to inspire you to write your own tests. These cases provide a wide range of testing scenarios that cover different aspects of software development. By reviewing these examples, you can get ideas for how to structure and design your own tests, as well as identify potential pitfalls to avoid. Keep in mind that these tests are not exhaustive and may need to be adapted to your specific application or framework. However, they can provide a valuable starting point for creating effective and comprehensive tests. Here’s a list we currently have available: . | Verify a Message for Length and Content | . ",
    "url": "/gdUnit4/latest/tutorials/index/#basics",
    
    "relUrl": "/tutorials/index/#basics"
  },"255": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": " ",
    "url": "/gdUnit4/latest/tutorials/index/",
    
    "relUrl": "/tutorials/index/"
  },"256": {
    "doc": "Testing Scene Interactions",
    "title": "Testing Scene Interactions",
    "content": " ",
    "url": "/gdUnit4/latest/tutorials/scenerunner_examples/",
    
    "relUrl": "/tutorials/scenerunner_examples/"
  },"257": {
    "doc": "Testing Scene Interactions",
    "title": "Verified 3D Platformer with GdUnit4",
    "content": "In this tutorial, I explain how to use the Scene Runner in GdUnit4 to verify that a character in a 3D platformer can make certain jumps and cannot make others. This tutorial focuses on how to use Scene Runner, but it may also be helpful if you are just starting to make a 3D platformer in Godot. The full project can be found here. Many thanks to ACG8 for providing this nice tutorial. ",
    "url": "/gdUnit4/latest/tutorials/scenerunner_examples/#verified-3d-platformer-with-gdunit4",
    
    "relUrl": "/tutorials/scenerunner_examples/#verified-3d-platformer-with-gdunit4"
  },"258": {
    "doc": "Test Driven Development",
    "title": "Test Driven Development (TDD) with GdUnit4",
    "content": "Test Driven Development is a software development methodology in which tests are written before the code. In TDD, developers write a failing test first, then write the minimum amount of code needed to pass the test, and then refactor the code to improve its design. The cycle is repeated until all the requirements are implemented. GdUnit4 provides a framework for writing and running tests in the Godot game engine. With GdUnit4, developers can write tests for their code and run them automatically. TDD with GdUnit4 involves writing tests that check the expected behavior of the code before writing the code itself. By writing tests first, developers can ensure that the code meets the requirements and works as expected. ",
    "url": "/gdUnit4/latest/tutorials/tdd/#test-driven-development-tdd-with-gdunit4",
    
    "relUrl": "/tutorials/tdd/#test-driven-development-tdd-with-gdunit4"
  },"259": {
    "doc": "Test Driven Development",
    "title": "Verified TicTacToe with GdUnit4",
    "content": "The Verified TicTacToe example tutorial walks you through creating a TicTacToe game using TDD with GdUnit4. The tutorial shows you how to write tests for the different components of the game, including game logic. By following this tutorial, you will learn how to use TDD with GdUnit4 to develop high-quality, reliable code. The full project can be found here. Many thanks to ACG8 for providing this nice tutorial. ",
    "url": "/gdUnit4/latest/tutorials/tdd/#verified-tictactoe-with-gdunit4",
    
    "relUrl": "/tutorials/tdd/#verified-tictactoe-with-gdunit4"
  },"260": {
    "doc": "Test Driven Development",
    "title": "Test Driven Development",
    "content": " ",
    "url": "/gdUnit4/latest/tutorials/tdd/",
    
    "relUrl": "/tutorials/tdd/"
  },"261": {
    "doc": "Basics",
    "title": "Examples",
    "content": "This page contains a collection of examples that demonstrate how to use GdUnit4 to write tests for your Godot projects. These examples cover a range of use cases and will be expanded over time to provide more comprehensive coverage of GdUnit4 features. Verify a Message for Length and Content . This example demonstrates how to use GdUnit4 to test a given string for expected length and content. This type of test can be useful in verifying the output of various functions, such as text formatting or input validation. To use this example, simply copy the code into a new GdUnit4 test script and modify the message and expected length and content to match your own requirements. When you run the test, GdUnit4 will compare the actual message length and content to the expected values, and report any discrepancies. | GdScript | C# | . | extends GdUnitTestSuite func test_example(): # Verify the given string by using `assert_str` assert_str(\"This is a example message\")\\ # We expect a lenght equal 25 characters .has_length(25)\\ # The message must start wiht `This is a ex` .starts_with(\"This is a ex\") . | [TestCase] public Example2() // Verify the given string by using `AssertString` AssertString(\"This is a example message\") // We expect a lenght equal 25 characters .HasLength(25) // The message must start wiht `This is a ex` .StartsWith(\"This is a ex\"); . | . If the test fails, GdUnit4 will report an failure message that shows the expected and actual values. ",
    "url": "/gdUnit4/latest/tutorials/tutorial_basics/#examples",
    
    "relUrl": "/tutorials/tutorial_basics/#examples"
  },"262": {
    "doc": "Basics",
    "title": "Basics",
    "content": " ",
    "url": "/gdUnit4/latest/tutorials/tutorial_basics/",
    
    "relUrl": "/tutorials/tutorial_basics/"
  },"263": {
    "doc": "Continuous Integration Testing",
    "title": "Continuous Integration Testing (CI)",
    "content": " ",
    "url": "/gdUnit4/latest/faq/ci/#continuous-integration-testing-ci",
    
    "relUrl": "/faq/ci/#continuous-integration-testing-ci"
  },"264": {
    "doc": "Continuous Integration Testing",
    "title": "Definition",
    "content": "Continuous Integration (CI) is a method for automating the integration of code changes made by multiple contributors to a single software project. It is a primary DevOps best practice that allows developers to frequently merge code changes into a central repository where builds and tests are executed. Automated tools are used to confirm the new code is bug-free before integration. Wiki - Continuous Integration . ",
    "url": "/gdUnit4/latest/faq/ci/#definition",
    
    "relUrl": "/faq/ci/#definition"
  },"265": {
    "doc": "Continuous Integration Testing",
    "title": "Command Line Tool",
    "content": "GdUnit4 provides a command line tool that allows you to automate your testing workflow, including CI. For more details please show at Command Line Tool . ",
    "url": "/gdUnit4/latest/faq/ci/#command-line-tool",
    
    "relUrl": "/faq/ci/#command-line-tool"
  },"266": {
    "doc": "Continuous Integration Testing",
    "title": "Howto deploy with GitHub Action",
    "content": "To deploy with GitHub Actions, you need to create a new workflow file in the .github/workflows/ directory and name it ci.yml. Please visit GitHub Workflows Page . Using the gdUnit4-action . This GitHub Action automates the execution of GdUnit4 unit tests within the Godot Engine 4.x environment. It provides flexibility in configuring the Godot version, GdUnit4 version, test paths, and other parameters to suit your testing needs. Find here on GitHub Marketplace gdUnit4-action . Example workflow: (Please note that this is just an example and needs to be adapted to your project environment.) . name: ci-pr-example run-name: ${{ github.head_ref || github.ref_name }}-ci-pr-example on: pull_request: paths-ignore: - '**.yml' - '**.md' workflow_dispatch: concurrency: group: ci-pr-example${{ github.event.number }} cancel-in-progress: true jobs: unit-test: name: \"CI Unit Test\" runs-on: 'ubuntu-22.04' timeout-minutes: 10 # The overall timeout permissions: actions: write checks: write contents: write pull-requests: write statuses: write steps: # checkout your repository - uses: actions/checkout@v4 with: lfs: true # run tests by using the gdUnit4-action with Godot version 4.2.1 and the latest GdUnit4 release - uses: MikeSchulze/gdUnit4-action@v1.0.2 with: godot-version: '4.2.1' paths: | res://project/tests/ timeout: 5 report-name: test_report.xml . ",
    "url": "/gdUnit4/latest/faq/ci/#howto-deploy-with-github-action",
    
    "relUrl": "/faq/ci/#howto-deploy-with-github-action"
  },"267": {
    "doc": "Continuous Integration Testing",
    "title": "Howto deploy with GitLab CI",
    "content": "You have to create a new workflow file on GitLab and named it .gitlab-ci.yml. Please visit GitLab CI Documentation for more detaild instructions . Thanks to mzoeller to providing this example workflow. image: barichello/godot-ci:4.0.0 cache: key: import-assets paths: - .import/ stages: - export - tests - deploy variables: EXPORT_NAME: $CI_PROJECT_NAME GIT_SUBMODULE_STRATEGY: recursive linux: stage: export script: - mkdir -v -p build/linux - godot -v --export \"Linux/X11\" build/linux/$EXPORT_NAME.x86_64 artifacts: name: $EXPORT_NAME-$CI_JOB_NAME paths: - build/linux gdunit4: stage: tests dependencies: - linux script: - export GODOT_BIN=/usr/local/bin/godot - ./runtest.sh -a ./test || if [ $? -eq 101 ]; then echo \"warnings\"; elif [ $? -eq 0 ]; then echo \"success\"; else exit 1; fi artifacts: when: always reports: junit: ./reports/report_1/results.xml . ",
    "url": "/gdUnit4/latest/faq/ci/#howto-deploy-with-gitlab-ci",
    
    "relUrl": "/faq/ci/#howto-deploy-with-gitlab-ci"
  },"268": {
    "doc": "Continuous Integration Testing",
    "title": "Continuous Integration Testing",
    "content": " ",
    "url": "/gdUnit4/latest/faq/ci/",
    
    "relUrl": "/faq/ci/"
  },"269": {
    "doc": "Problems & Solutions",
    "title": "Problems &amp; Solutions",
    "content": "This section lists known problems and possible solutions/workarounds. ",
    "url": "/gdUnit4/latest/faq/solutions/#problems--solutions",
    
    "relUrl": "/faq/solutions/#problems--solutions"
  },"270": {
    "doc": "Problems & Solutions",
    "title": "Problems",
    "content": ". | Script/Resource Errors after the plugin is installed | Modifying the Game Engine State ‘mainLoop.Paused = true’ during Tests | Export Failures with GdUnit4 Plugin Installed | . Script/Resource Errors after the plugin is installed . When installing the GdUnit4 plugin and activating it, you may encounter a lot of script and resource loading errors. These errors occur due to a cache problem in the Godot Engine. Solution . To solve the errors, you need to restart the Godot Editor. If this does not help, you may need to manually delete the Godot cache folder: . | Close the Godot Editor. | Delete the .godot folder from your working directory. | Start the Godot Editor (you may still see loading errors). | Close and restart the Godot Editor. The loading errors should no longer occur. | . Modifying the Game Engine State ‘mainLoop.Paused = true’ during Tests . When a test modifies the game engine state Paused on the SceneTree, it can affect the test execution. Setting the main loop to paused will stop the engine running, including the test execution running in the main loop, causing the GdUnit4 test window to remain open even after tests are complete. Solution . When you modify engine states during tests, ensure you restore them to their previous values when the test is finished. You can achieve this by adding an “after test” stage to your test suite. | GDScript | C# | . | # Reset the paused mode back to false after each test func after_test() -&gt; void: Engine.get_main_loop().paused = false # Simple example test to modify the game state func test_game_paused() -&gt; void: var mainLoop :SceneTree = Engine.get_main_loop() assert_that(mainLoop.paused).is_false() # The following lines cause the GdUnit4 test window to remain open even after tests are complete mainLoop.paused = true assert_that(mainLoop.paused).is_true() . | // Reset the paused mode back to false after each test [AfterTest] public void TearDown() =&gt; ((SceneTree)Engine.GetMainLoop()).Paused = false; [TestCase] public void GamePaused() { var mainLoop = (SceneTree)Engine.GetMainLoop(); AssertThat(mainLoop.Paused).IsFalse(); // The following lines cause the GdUnit4 test window to remain open even after tests are complete mainLoop.Paused = true; AssertThat(mainLoop.Paused).IsTrue(); } . | . Export Failures with GdUnit4 Plugin Installed . When exporting games with the GdUnit4 plugin installed, you may encounter crashes during the export process, particularly in CI/CD environments. The crash typically shows a “Program crashed with signal 11” error and occurs because Godot has issues when exporting projects that include editor-only plugins like GdUnit4. Solution . The recommended solution is to exclude the GdUnit4 addon from the export rather than disabling the plugin entirely. This allows you to keep the plugin active for development while ensuring clean exports. Exclude GdUnit4 from Export Settings . | Open your project in the Godot Editor | Go to Project &gt; Export… | Select your export preset (e.g., “Windows Desktop”, “macOS”, etc.) | In the Resources tab, locate the Filters to exclude files/folders from project section | Add the following filter to exclude the GdUnit4 addon: addons/gdunit4/* . | Export your game - the crash should no longer occur | . Important Notes: . | The export exclusion method is preferred over disabling the plugin because it keeps GdUnit4 functional during development | The GdUnit4 addon is designed for development and testing environments and should not be included in production builds | After applying the exclusion filters, test your export to ensure it works correctly | . ",
    "url": "/gdUnit4/latest/faq/solutions/#problems",
    
    "relUrl": "/faq/solutions/#problems"
  },"271": {
    "doc": "Problems & Solutions",
    "title": "Problems & Solutions",
    "content": " ",
    "url": "/gdUnit4/latest/faq/solutions/",
    
    "relUrl": "/faq/solutions/"
  }
}
